// Generated from D:/workspace/mysql-entity/src/main/java/com/zwk/antlr\MySqlParser.g4 by ANTLR 4.10.1
package com.zwk.antlr;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, EXIT=58, 
		EXPLAIN=59, FALSE=60, FETCH=61, FOR=62, FORCE=63, FOREIGN=64, FROM=65, 
		FULLTEXT=66, GENERATED=67, GET=68, GRANT=69, GROUP=70, HAVING=71, HIGH_PRIORITY=72, 
		HISTOGRAM=73, IF=74, IGNORE=75, IGNORED=76, IN=77, INDEX=78, INFILE=79, 
		INNER=80, INOUT=81, INSERT=82, INTERVAL=83, INTO=84, IS=85, ITERATE=86, 
		JOIN=87, KEY=88, KEYS=89, KILL=90, LEADING=91, LEAVE=92, LEFT=93, LIKE=94, 
		LIMIT=95, LINEAR=96, LINES=97, LOAD=98, LOCK=99, LOOP=100, LOW_PRIORITY=101, 
		MASTER_BIND=102, MASTER_SSL_VERIFY_SERVER_CERT=103, MATCH=104, MAXVALUE=105, 
		MODIFIES=106, NATURAL=107, NOT=108, NO_WRITE_TO_BINLOG=109, NULL_LITERAL=110, 
		NUMBER=111, ON=112, OPTIMIZE=113, OPTION=114, OPTIONAL=115, OPTIONALLY=116, 
		OR=117, ORDER=118, OUT=119, OVER=120, OUTER=121, OUTFILE=122, PARTITION=123, 
		PRIMARY=124, PROCEDURE=125, PURGE=126, RANGE=127, READ=128, READS=129, 
		REFERENCES=130, REGEXP=131, RELEASE=132, RENAME=133, REPEAT=134, REPLACE=135, 
		REQUIRE=136, RESIGNAL=137, RESTRICT=138, RETAIN=139, RETURN=140, REVOKE=141, 
		RIGHT=142, RLIKE=143, SCHEMA=144, SCHEMAS=145, SELECT=146, SET=147, SEPARATOR=148, 
		SHOW=149, SIGNAL=150, SPATIAL=151, SQL=152, SQLEXCEPTION=153, SQLSTATE=154, 
		SQLWARNING=155, SQL_BIG_RESULT=156, SQL_CALC_FOUND_ROWS=157, SQL_SMALL_RESULT=158, 
		SSL=159, STACKED=160, STARTING=161, STRAIGHT_JOIN=162, TABLE=163, TERMINATED=164, 
		THEN=165, TO=166, TRAILING=167, TRIGGER=168, TRUE=169, UNDO=170, UNION=171, 
		UNIQUE=172, UNLOCK=173, UNSIGNED=174, UPDATE=175, USAGE=176, USE=177, 
		USING=178, VALUES=179, WHEN=180, WHERE=181, WHILE=182, WITH=183, WRITE=184, 
		XOR=185, ZEROFILL=186, TINYINT=187, SMALLINT=188, MEDIUMINT=189, MIDDLEINT=190, 
		INT=191, INT1=192, INT2=193, INT3=194, INT4=195, INT8=196, INTEGER=197, 
		BIGINT=198, REAL=199, DOUBLE=200, PRECISION=201, FLOAT=202, FLOAT4=203, 
		FLOAT8=204, DECIMAL=205, DEC=206, NUMERIC=207, DATE=208, TIME=209, TIMESTAMP=210, 
		DATETIME=211, YEAR=212, CHAR=213, VARCHAR=214, NVARCHAR=215, NATIONAL=216, 
		BINARY=217, VARBINARY=218, TINYBLOB=219, BLOB=220, MEDIUMBLOB=221, LONG=222, 
		LONGBLOB=223, TINYTEXT=224, TEXT=225, MEDIUMTEXT=226, LONGTEXT=227, ENUM=228, 
		VARYING=229, SERIAL=230, YEAR_MONTH=231, DAY_HOUR=232, DAY_MINUTE=233, 
		DAY_SECOND=234, HOUR_MINUTE=235, HOUR_SECOND=236, MINUTE_SECOND=237, SECOND_MICROSECOND=238, 
		MINUTE_MICROSECOND=239, HOUR_MICROSECOND=240, DAY_MICROSECOND=241, JSON_ARRAY=242, 
		JSON_OBJECT=243, JSON_QUOTE=244, JSON_CONTAINS=245, JSON_CONTAINS_PATH=246, 
		JSON_EXTRACT=247, JSON_KEYS=248, JSON_OVERLAPS=249, JSON_SEARCH=250, JSON_VALUE=251, 
		JSON_ARRAY_APPEND=252, JSON_ARRAY_INSERT=253, JSON_INSERT=254, JSON_MERGE=255, 
		JSON_MERGE_PATCH=256, JSON_MERGE_PRESERVE=257, JSON_REMOVE=258, JSON_REPLACE=259, 
		JSON_SET=260, JSON_UNQUOTE=261, JSON_DEPTH=262, JSON_LENGTH=263, JSON_TYPE=264, 
		JSON_VALID=265, JSON_TABLE=266, JSON_SCHEMA_VALID=267, JSON_SCHEMA_VALIDATION_REPORT=268, 
		JSON_PRETTY=269, JSON_STORAGE_FREE=270, JSON_STORAGE_SIZE=271, JSON_ARRAYAGG=272, 
		JSON_OBJECTAGG=273, AVG=274, BIT_AND=275, BIT_OR=276, BIT_XOR=277, COUNT=278, 
		CUME_DIST=279, DENSE_RANK=280, FIRST_VALUE=281, GROUP_CONCAT=282, LAG=283, 
		LAST_VALUE=284, LEAD=285, MAX=286, MIN=287, NTILE=288, NTH_VALUE=289, 
		PERCENT_RANK=290, RANK=291, ROW_NUMBER=292, STD=293, STDDEV=294, STDDEV_POP=295, 
		STDDEV_SAMP=296, SUM=297, VAR_POP=298, VAR_SAMP=299, VARIANCE=300, CURRENT_DATE=301, 
		CURRENT_TIME=302, CURRENT_TIMESTAMP=303, LOCALTIME=304, CURDATE=305, CURTIME=306, 
		DATE_ADD=307, DATE_SUB=308, EXTRACT=309, LOCALTIMESTAMP=310, NOW=311, 
		POSITION=312, SUBSTR=313, SUBSTRING=314, SYSDATE=315, TRIM=316, UTC_DATE=317, 
		UTC_TIME=318, UTC_TIMESTAMP=319, ACCOUNT=320, ACTION=321, AFTER=322, AGGREGATE=323, 
		ALGORITHM=324, ANY=325, AT=326, AUTHORS=327, AUTOCOMMIT=328, AUTOEXTEND_SIZE=329, 
		AUTO_INCREMENT=330, AVG_ROW_LENGTH=331, BEGIN=332, BINLOG=333, BIT=334, 
		BLOCK=335, BOOL=336, BOOLEAN=337, BTREE=338, CACHE=339, CASCADED=340, 
		CHAIN=341, CHANGED=342, CHANNEL=343, CHECKSUM=344, PAGE_CHECKSUM=345, 
		CIPHER=346, CLASS_ORIGIN=347, CLIENT=348, CLOSE=349, CLUSTERING=350, COALESCE=351, 
		CODE=352, COLUMNS=353, COLUMN_FORMAT=354, COLUMN_NAME=355, COMMENT=356, 
		COMMIT=357, COMPACT=358, COMPLETION=359, COMPRESSED=360, COMPRESSION=361, 
		CONCURRENT=362, CONNECT=363, CONNECTION=364, CONSISTENT=365, CONSTRAINT_CATALOG=366, 
		CONSTRAINT_SCHEMA=367, CONSTRAINT_NAME=368, CONTAINS=369, CONTEXT=370, 
		CONTRIBUTORS=371, COPY=372, CPU=373, CURSOR_NAME=374, DATA=375, DATAFILE=376, 
		DEALLOCATE=377, DEFAULT_AUTH=378, DEFINER=379, DELAY_KEY_WRITE=380, DES_KEY_FILE=381, 
		DIRECTORY=382, DISABLE=383, DISCARD=384, DISK=385, DO=386, DUMPFILE=387, 
		DUPLICATE=388, DYNAMIC=389, ENABLE=390, ENCRYPTION=391, END=392, ENDS=393, 
		ENGINE=394, ENGINES=395, ERROR=396, ERRORS=397, ESCAPE=398, EVEN=399, 
		EVENT=400, EVENTS=401, EVERY=402, EXCHANGE=403, EXCLUSIVE=404, EXPIRE=405, 
		EXPORT=406, EXTENDED=407, EXTENT_SIZE=408, FAST=409, FAULTS=410, FIELDS=411, 
		FILE_BLOCK_SIZE=412, FILTER=413, FIRST=414, FIXED=415, FLUSH=416, FOLLOWING=417, 
		FOLLOWS=418, FOUND=419, FULL=420, FUNCTION=421, GENERAL=422, GLOBAL=423, 
		GRANTS=424, GROUP_REPLICATION=425, HANDLER=426, HASH=427, HELP=428, HOST=429, 
		HOSTS=430, IDENTIFIED=431, IGNORE_SERVER_IDS=432, IMPORT=433, INDEXES=434, 
		INITIAL_SIZE=435, INPLACE=436, INSERT_METHOD=437, INSTALL=438, INSTANCE=439, 
		INSTANT=440, INVISIBLE=441, INVOKER=442, IO=443, IO_THREAD=444, IPC=445, 
		ISOLATION=446, ISSUER=447, JSON=448, KEY_BLOCK_SIZE=449, LANGUAGE=450, 
		LAST=451, LEAVES=452, LESS=453, LEVEL=454, LIST=455, LOCAL=456, LOGFILE=457, 
		LOGS=458, MASTER=459, MASTER_AUTO_POSITION=460, MASTER_CONNECT_RETRY=461, 
		MASTER_DELAY=462, MASTER_HEARTBEAT_PERIOD=463, MASTER_HOST=464, MASTER_LOG_FILE=465, 
		MASTER_LOG_POS=466, MASTER_PASSWORD=467, MASTER_PORT=468, MASTER_RETRY_COUNT=469, 
		MASTER_SSL=470, MASTER_SSL_CA=471, MASTER_SSL_CAPATH=472, MASTER_SSL_CERT=473, 
		MASTER_SSL_CIPHER=474, MASTER_SSL_CRL=475, MASTER_SSL_CRLPATH=476, MASTER_SSL_KEY=477, 
		MASTER_TLS_VERSION=478, MASTER_USER=479, MAX_CONNECTIONS_PER_HOUR=480, 
		MAX_QUERIES_PER_HOUR=481, MAX_ROWS=482, MAX_SIZE=483, MAX_UPDATES_PER_HOUR=484, 
		MAX_USER_CONNECTIONS=485, MEDIUM=486, MEMBER=487, MERGE=488, MESSAGE_TEXT=489, 
		MID=490, MIGRATE=491, MIN_ROWS=492, MODE=493, MODIFY=494, MUTEX=495, MYSQL=496, 
		MYSQL_ERRNO=497, NAME=498, NAMES=499, NCHAR=500, NEVER=501, NEXT=502, 
		NO=503, NOCOPY=504, NOWAIT=505, NODEGROUP=506, NONE=507, ODBC=508, OFFLINE=509, 
		OFFSET=510, OF=511, OJ=512, OLD_PASSWORD=513, ONE=514, ONLINE=515, ONLY=516, 
		OPEN=517, OPTIMIZER_COSTS=518, OPTIONS=519, OWNER=520, PACK_KEYS=521, 
		PAGE=522, PARSER=523, PARTIAL=524, PARTITIONING=525, PARTITIONS=526, PASSWORD=527, 
		PHASE=528, PLUGIN=529, PLUGIN_DIR=530, PLUGINS=531, PORT=532, PRECEDES=533, 
		PRECEDING=534, PREPARE=535, PRESERVE=536, PREV=537, PROCESSLIST=538, PROFILE=539, 
		PROFILES=540, PROXY=541, QUERY=542, QUICK=543, REBUILD=544, RECOVER=545, 
		RECURSIVE=546, REDO_BUFFER_SIZE=547, REDUNDANT=548, RELAY=549, RELAY_LOG_FILE=550, 
		RELAY_LOG_POS=551, RELAYLOG=552, REMOVE=553, REORGANIZE=554, REPAIR=555, 
		REPLICATE_DO_DB=556, REPLICATE_DO_TABLE=557, REPLICATE_IGNORE_DB=558, 
		REPLICATE_IGNORE_TABLE=559, REPLICATE_REWRITE_DB=560, REPLICATE_WILD_DO_TABLE=561, 
		REPLICATE_WILD_IGNORE_TABLE=562, REPLICATION=563, RESET=564, RESUME=565, 
		RETURNED_SQLSTATE=566, RETURNING=567, RETURNS=568, ROLE=569, ROLLBACK=570, 
		ROLLUP=571, ROTATE=572, ROW=573, ROWS=574, ROW_FORMAT=575, RTREE=576, 
		SAVEPOINT=577, SCHEDULE=578, SECURITY=579, SERVER=580, SESSION=581, SHARE=582, 
		SHARED=583, SIGNED=584, SIMPLE=585, SLAVE=586, SLOW=587, SNAPSHOT=588, 
		SOCKET=589, SOME=590, SONAME=591, SOUNDS=592, SOURCE=593, SQL_AFTER_GTIDS=594, 
		SQL_AFTER_MTS_GAPS=595, SQL_BEFORE_GTIDS=596, SQL_BUFFER_RESULT=597, SQL_CACHE=598, 
		SQL_NO_CACHE=599, SQL_THREAD=600, START=601, STARTS=602, STATS_AUTO_RECALC=603, 
		STATS_PERSISTENT=604, STATS_SAMPLE_PAGES=605, STATUS=606, STOP=607, STORAGE=608, 
		STORED=609, STRING=610, SUBCLASS_ORIGIN=611, SUBJECT=612, SUBPARTITION=613, 
		SUBPARTITIONS=614, SUSPEND=615, SWAPS=616, SWITCHES=617, TABLE_NAME=618, 
		TABLESPACE=619, TABLE_TYPE=620, TEMPORARY=621, TEMPTABLE=622, THAN=623, 
		TRADITIONAL=624, TRANSACTION=625, TRANSACTIONAL=626, TRIGGERS=627, TRUNCATE=628, 
		UNBOUNDED=629, UNDEFINED=630, UNDOFILE=631, UNDO_BUFFER_SIZE=632, UNINSTALL=633, 
		UNKNOWN=634, UNTIL=635, UPGRADE=636, USER=637, USE_FRM=638, USER_RESOURCES=639, 
		VALIDATION=640, VALUE=641, VARIABLES=642, VIEW=643, VIRTUAL=644, VISIBLE=645, 
		WAIT=646, WARNINGS=647, WINDOW=648, WITHOUT=649, WORK=650, WRAPPER=651, 
		X509=652, XA=653, XML=654, YES=655, EUR=656, USA=657, JIS=658, ISO=659, 
		INTERNAL=660, QUARTER=661, MONTH=662, DAY=663, HOUR=664, MINUTE=665, WEEK=666, 
		SECOND=667, MICROSECOND=668, TABLES=669, ROUTINE=670, EXECUTE=671, FILE=672, 
		PROCESS=673, RELOAD=674, SHUTDOWN=675, SUPER=676, PRIVILEGES=677, APPLICATION_PASSWORD_ADMIN=678, 
		AUDIT_ADMIN=679, BACKUP_ADMIN=680, BINLOG_ADMIN=681, BINLOG_ENCRYPTION_ADMIN=682, 
		CLONE_ADMIN=683, CONNECTION_ADMIN=684, ENCRYPTION_KEY_ADMIN=685, FIREWALL_ADMIN=686, 
		FIREWALL_USER=687, FLUSH_OPTIMIZER_COSTS=688, FLUSH_STATUS=689, FLUSH_TABLES=690, 
		FLUSH_USER_RESOURCES=691, ADMIN=692, GROUP_REPLICATION_ADMIN=693, INNODB_REDO_LOG_ARCHIVE=694, 
		INNODB_REDO_LOG_ENABLE=695, NDB_STORED_USER=696, PERSIST_RO_VARIABLES_ADMIN=697, 
		REPLICATION_APPLIER=698, REPLICATION_SLAVE_ADMIN=699, RESOURCE_GROUP_ADMIN=700, 
		RESOURCE_GROUP_USER=701, ROLE_ADMIN=702, SERVICE_CONNECTION_ADMIN=703, 
		SESSION_VARIABLES_ADMIN=704, SET_USER_ID=705, SHOW_ROUTINE=706, SYSTEM_VARIABLES_ADMIN=707, 
		TABLE_ENCRYPTION_ADMIN=708, VERSION_TOKEN_ADMIN=709, XA_RECOVER_ADMIN=710, 
		ARMSCII8=711, ASCII=712, BIG5=713, CP1250=714, CP1251=715, CP1256=716, 
		CP1257=717, CP850=718, CP852=719, CP866=720, CP932=721, DEC8=722, EUCJPMS=723, 
		EUCKR=724, GB18030=725, GB2312=726, GBK=727, GEOSTD8=728, GREEK=729, HEBREW=730, 
		HP8=731, KEYBCS2=732, KOI8R=733, KOI8U=734, LATIN1=735, LATIN2=736, LATIN5=737, 
		LATIN7=738, MACCE=739, MACROMAN=740, SJIS=741, SWE7=742, TIS620=743, UCS2=744, 
		UJIS=745, UTF16=746, UTF16LE=747, UTF32=748, UTF8=749, UTF8MB3=750, UTF8MB4=751, 
		ARCHIVE=752, BLACKHOLE=753, CSV=754, FEDERATED=755, INNODB=756, MEMORY=757, 
		MRG_MYISAM=758, MYISAM=759, NDB=760, NDBCLUSTER=761, PERFORMANCE_SCHEMA=762, 
		TOKUDB=763, REPEATABLE=764, COMMITTED=765, UNCOMMITTED=766, SERIALIZABLE=767, 
		GEOMETRYCOLLECTION=768, GEOMCOLLECTION=769, GEOMETRY=770, LINESTRING=771, 
		MULTILINESTRING=772, MULTIPOINT=773, MULTIPOLYGON=774, POINT=775, POLYGON=776, 
		ABS=777, ACOS=778, ADDDATE=779, ADDTIME=780, AES_DECRYPT=781, AES_ENCRYPT=782, 
		AREA=783, ASBINARY=784, ASIN=785, ASTEXT=786, ASWKB=787, ASWKT=788, ASYMMETRIC_DECRYPT=789, 
		ASYMMETRIC_DERIVE=790, ASYMMETRIC_ENCRYPT=791, ASYMMETRIC_SIGN=792, ASYMMETRIC_VERIFY=793, 
		ATAN=794, ATAN2=795, BENCHMARK=796, BIN=797, BIT_COUNT=798, BIT_LENGTH=799, 
		BUFFER=800, CATALOG_NAME=801, CEIL=802, CEILING=803, CENTROID=804, CHARACTER_LENGTH=805, 
		CHARSET=806, CHAR_LENGTH=807, COERCIBILITY=808, COLLATION=809, COMPRESS=810, 
		CONCAT=811, CONCAT_WS=812, CONNECTION_ID=813, CONV=814, CONVERT_TZ=815, 
		COS=816, COT=817, CRC32=818, CREATE_ASYMMETRIC_PRIV_KEY=819, CREATE_ASYMMETRIC_PUB_KEY=820, 
		CREATE_DH_PARAMETERS=821, CREATE_DIGEST=822, CROSSES=823, DATEDIFF=824, 
		DATE_FORMAT=825, DAYNAME=826, DAYOFMONTH=827, DAYOFWEEK=828, DAYOFYEAR=829, 
		DECODE=830, DEGREES=831, DES_DECRYPT=832, DES_ENCRYPT=833, DIMENSION=834, 
		DISJOINT=835, ELT=836, ENCODE=837, ENCRYPT=838, ENDPOINT=839, ENGINE_ATTRIBUTE=840, 
		ENVELOPE=841, EQUALS=842, EXP=843, EXPORT_SET=844, EXTERIORRING=845, EXTRACTVALUE=846, 
		FIELD=847, FIND_IN_SET=848, FLOOR=849, FORMAT=850, FOUND_ROWS=851, FROM_BASE64=852, 
		FROM_DAYS=853, FROM_UNIXTIME=854, GEOMCOLLFROMTEXT=855, GEOMCOLLFROMWKB=856, 
		GEOMETRYCOLLECTIONFROMTEXT=857, GEOMETRYCOLLECTIONFROMWKB=858, GEOMETRYFROMTEXT=859, 
		GEOMETRYFROMWKB=860, GEOMETRYN=861, GEOMETRYTYPE=862, GEOMFROMTEXT=863, 
		GEOMFROMWKB=864, GET_FORMAT=865, GET_LOCK=866, GLENGTH=867, GREATEST=868, 
		GTID_SUBSET=869, GTID_SUBTRACT=870, HEX=871, IFNULL=872, INET6_ATON=873, 
		INET6_NTOA=874, INET_ATON=875, INET_NTOA=876, INSTR=877, INTERIORRINGN=878, 
		INTERSECTS=879, ISCLOSED=880, ISEMPTY=881, ISNULL=882, ISSIMPLE=883, IS_FREE_LOCK=884, 
		IS_IPV4=885, IS_IPV4_COMPAT=886, IS_IPV4_MAPPED=887, IS_IPV6=888, IS_USED_LOCK=889, 
		LAST_INSERT_ID=890, LCASE=891, LEAST=892, LENGTH=893, LINEFROMTEXT=894, 
		LINEFROMWKB=895, LINESTRINGFROMTEXT=896, LINESTRINGFROMWKB=897, LN=898, 
		LOAD_FILE=899, LOCATE=900, LOG=901, LOG10=902, LOG2=903, LOWER=904, LPAD=905, 
		LTRIM=906, MAKEDATE=907, MAKETIME=908, MAKE_SET=909, MASTER_POS_WAIT=910, 
		MBRCONTAINS=911, MBRDISJOINT=912, MBREQUAL=913, MBRINTERSECTS=914, MBROVERLAPS=915, 
		MBRTOUCHES=916, MBRWITHIN=917, MD5=918, MLINEFROMTEXT=919, MLINEFROMWKB=920, 
		MONTHNAME=921, MPOINTFROMTEXT=922, MPOINTFROMWKB=923, MPOLYFROMTEXT=924, 
		MPOLYFROMWKB=925, MULTILINESTRINGFROMTEXT=926, MULTILINESTRINGFROMWKB=927, 
		MULTIPOINTFROMTEXT=928, MULTIPOINTFROMWKB=929, MULTIPOLYGONFROMTEXT=930, 
		MULTIPOLYGONFROMWKB=931, NAME_CONST=932, NULLIF=933, NUMGEOMETRIES=934, 
		NUMINTERIORRINGS=935, NUMPOINTS=936, OCT=937, OCTET_LENGTH=938, ORD=939, 
		OVERLAPS=940, PERIOD_ADD=941, PERIOD_DIFF=942, PI=943, POINTFROMTEXT=944, 
		POINTFROMWKB=945, POINTN=946, POLYFROMTEXT=947, POLYFROMWKB=948, POLYGONFROMTEXT=949, 
		POLYGONFROMWKB=950, POW=951, POWER=952, QUOTE=953, RADIANS=954, RAND=955, 
		RANDOM_BYTES=956, RELEASE_LOCK=957, REVERSE=958, ROUND=959, ROW_COUNT=960, 
		RPAD=961, RTRIM=962, SEC_TO_TIME=963, SECONDARY_ENGINE_ATTRIBUTE=964, 
		SESSION_USER=965, SHA=966, SHA1=967, SHA2=968, SCHEMA_NAME=969, SIGN=970, 
		SIN=971, SLEEP=972, SOUNDEX=973, SQL_THREAD_WAIT_AFTER_GTIDS=974, SQRT=975, 
		SRID=976, STARTPOINT=977, STRCMP=978, STR_TO_DATE=979, ST_AREA=980, ST_ASBINARY=981, 
		ST_ASTEXT=982, ST_ASWKB=983, ST_ASWKT=984, ST_BUFFER=985, ST_CENTROID=986, 
		ST_CONTAINS=987, ST_CROSSES=988, ST_DIFFERENCE=989, ST_DIMENSION=990, 
		ST_DISJOINT=991, ST_DISTANCE=992, ST_ENDPOINT=993, ST_ENVELOPE=994, ST_EQUALS=995, 
		ST_EXTERIORRING=996, ST_GEOMCOLLFROMTEXT=997, ST_GEOMCOLLFROMTXT=998, 
		ST_GEOMCOLLFROMWKB=999, ST_GEOMETRYCOLLECTIONFROMTEXT=1000, ST_GEOMETRYCOLLECTIONFROMWKB=1001, 
		ST_GEOMETRYFROMTEXT=1002, ST_GEOMETRYFROMWKB=1003, ST_GEOMETRYN=1004, 
		ST_GEOMETRYTYPE=1005, ST_GEOMFROMTEXT=1006, ST_GEOMFROMWKB=1007, ST_INTERIORRINGN=1008, 
		ST_INTERSECTION=1009, ST_INTERSECTS=1010, ST_ISCLOSED=1011, ST_ISEMPTY=1012, 
		ST_ISSIMPLE=1013, ST_LINEFROMTEXT=1014, ST_LINEFROMWKB=1015, ST_LINESTRINGFROMTEXT=1016, 
		ST_LINESTRINGFROMWKB=1017, ST_NUMGEOMETRIES=1018, ST_NUMINTERIORRING=1019, 
		ST_NUMINTERIORRINGS=1020, ST_NUMPOINTS=1021, ST_OVERLAPS=1022, ST_POINTFROMTEXT=1023, 
		ST_POINTFROMWKB=1024, ST_POINTN=1025, ST_POLYFROMTEXT=1026, ST_POLYFROMWKB=1027, 
		ST_POLYGONFROMTEXT=1028, ST_POLYGONFROMWKB=1029, ST_SRID=1030, ST_STARTPOINT=1031, 
		ST_SYMDIFFERENCE=1032, ST_TOUCHES=1033, ST_UNION=1034, ST_WITHIN=1035, 
		ST_X=1036, ST_Y=1037, SUBDATE=1038, SUBSTRING_INDEX=1039, SUBTIME=1040, 
		SYSTEM_USER=1041, TAN=1042, TIMEDIFF=1043, TIMESTAMPADD=1044, TIMESTAMPDIFF=1045, 
		TIME_FORMAT=1046, TIME_TO_SEC=1047, TOUCHES=1048, TO_BASE64=1049, TO_DAYS=1050, 
		TO_SECONDS=1051, UCASE=1052, UNCOMPRESS=1053, UNCOMPRESSED_LENGTH=1054, 
		UNHEX=1055, UNIX_TIMESTAMP=1056, UPDATEXML=1057, UPPER=1058, UUID=1059, 
		UUID_SHORT=1060, VALIDATE_PASSWORD_STRENGTH=1061, VERSION=1062, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1063, 
		WEEKDAY=1064, WEEKOFYEAR=1065, WEIGHT_STRING=1066, WITHIN=1067, YEARWEEK=1068, 
		Y_FUNCTION=1069, X_FUNCTION=1070, VIA=1071, LASTVAL=1072, NEXTVAL=1073, 
		SETVAL=1074, PREVIOUS=1075, PERSISTENT=1076, BINLOG_MONITOR=1077, BINLOG_REPLAY=1078, 
		FEDERATED_ADMIN=1079, READ_ONLY_ADMIN=1080, REPLICA=1081, REPLICATION_MASTER_ADMIN=1082, 
		VAR_ASSIGN=1083, PLUS_ASSIGN=1084, MINUS_ASSIGN=1085, MULT_ASSIGN=1086, 
		DIV_ASSIGN=1087, MOD_ASSIGN=1088, AND_ASSIGN=1089, XOR_ASSIGN=1090, OR_ASSIGN=1091, 
		STAR=1092, DIVIDE=1093, MODULE=1094, PLUS=1095, MINUS=1096, DIV=1097, 
		MOD=1098, EQUAL_SYMBOL=1099, GREATER_SYMBOL=1100, LESS_SYMBOL=1101, EXCLAMATION_SYMBOL=1102, 
		BIT_NOT_OP=1103, BIT_OR_OP=1104, BIT_AND_OP=1105, BIT_XOR_OP=1106, DOT=1107, 
		LR_BRACKET=1108, RR_BRACKET=1109, COMMA=1110, SEMI=1111, AT_SIGN=1112, 
		ZERO_DECIMAL=1113, ONE_DECIMAL=1114, TWO_DECIMAL=1115, SINGLE_QUOTE_SYMB=1116, 
		DOUBLE_QUOTE_SYMB=1117, REVERSE_QUOTE_SYMB=1118, COLON_SYMB=1119, CHARSET_REVERSE_QOUTE_STRING=1120, 
		FILESIZE_LITERAL=1121, START_NATIONAL_STRING_LITERAL=1122, STRING_LITERAL=1123, 
		DECIMAL_LITERAL=1124, HEXADECIMAL_LITERAL=1125, REAL_LITERAL=1126, NULL_SPEC_LITERAL=1127, 
		BIT_STRING=1128, STRING_CHARSET_NAME=1129, DOT_ID=1130, ID=1131, REVERSE_QUOTE_ID=1132, 
		STRING_USER_NAME=1133, IP_ADDRESS=1134, STRING_USER_NAME_MARIADB=1135, 
		LOCAL_ID=1136, GLOBAL_ID=1137, ERROR_RECONGNIGION=1138, ENCRYPTED=1139, 
		ENCRYPTION_KEY_ID=1140;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_compoundStatement = 6, 
		RULE_createIndex = 7, RULE_createTable = 8, RULE_commonTableExpressions = 9, 
		RULE_cteName = 10, RULE_cteColumnName = 11, RULE_charSet = 12, RULE_intervalType = 13, 
		RULE_indexType = 14, RULE_indexOption = 15, RULE_createDefinitions = 16, 
		RULE_createDefinition = 17, RULE_columnDefinition = 18, RULE_columnConstraint = 19, 
		RULE_tableConstraint = 20, RULE_referenceDefinition = 21, RULE_referenceAction = 22, 
		RULE_referenceControlType = 23, RULE_indexColumnDefinition = 24, RULE_tableOption = 25, 
		RULE_tableType = 26, RULE_tablespaceStorage = 27, RULE_partitionDefinitions = 28, 
		RULE_partitionFunctionDefinition = 29, RULE_subpartitionFunctionDefinition = 30, 
		RULE_partitionDefinition = 31, RULE_partitionDefinerAtom = 32, RULE_partitionDefinerVector = 33, 
		RULE_subpartitionDefinition = 34, RULE_partitionOption = 35, RULE_alterTable = 36, 
		RULE_alterSpecification = 37, RULE_dropIndex = 38, RULE_dropTable = 39, 
		RULE_renameTable = 40, RULE_renameTableClause = 41, RULE_truncateTable = 42, 
		RULE_deleteStatement = 43, RULE_insertStatement = 44, RULE_replaceStatement = 45, 
		RULE_selectStatement = 46, RULE_updateStatement = 47, RULE_insertStatementValue = 48, 
		RULE_updatedElement = 49, RULE_assignmentField = 50, RULE_lockClause = 51, 
		RULE_singleDeleteStatement = 52, RULE_multipleDeleteStatement = 53, RULE_singleUpdateStatement = 54, 
		RULE_multipleUpdateStatement = 55, RULE_orderByClause = 56, RULE_orderByExpression = 57, 
		RULE_tableSources = 58, RULE_tableSource = 59, RULE_tableSourceItem = 60, 
		RULE_indexHint = 61, RULE_indexHintType = 62, RULE_joinPart = 63, RULE_queryExpression = 64, 
		RULE_queryExpressionNointo = 65, RULE_querySpecification = 66, RULE_querySpecificationNointo = 67, 
		RULE_unionParenthesis = 68, RULE_unionStatement = 69, RULE_selectSpec = 70, 
		RULE_selectElements = 71, RULE_selectElement = 72, RULE_selectIntoExpression = 73, 
		RULE_selectFieldsInto = 74, RULE_selectLinesInto = 75, RULE_fromClause = 76, 
		RULE_groupByClause = 77, RULE_havingClause = 78, RULE_windowClause = 79, 
		RULE_groupByItem = 80, RULE_limitClause = 81, RULE_limitClauseAtom = 82, 
		RULE_routineBody = 83, RULE_blockStatement = 84, RULE_caseStatement = 85, 
		RULE_ifStatement = 86, RULE_iterateStatement = 87, RULE_leaveStatement = 88, 
		RULE_loopStatement = 89, RULE_repeatStatement = 90, RULE_returnStatement = 91, 
		RULE_whileStatement = 92, RULE_cursorStatement = 93, RULE_declareVariable = 94, 
		RULE_declareCondition = 95, RULE_declareCursor = 96, RULE_declareHandler = 97, 
		RULE_handlerConditionValue = 98, RULE_procedureSqlStatement = 99, RULE_caseAlternative = 100, 
		RULE_elifAlternative = 101, RULE_fullId = 102, RULE_tableName = 103, RULE_fullColumnName = 104, 
		RULE_indexColumnName = 105, RULE_mysqlVariable = 106, RULE_charsetName = 107, 
		RULE_collationName = 108, RULE_engineName = 109, RULE_uid = 110, RULE_simpleId = 111, 
		RULE_dottedId = 112, RULE_decimalLiteral = 113, RULE_fileSizeLiteral = 114, 
		RULE_stringLiteral = 115, RULE_booleanLiteral = 116, RULE_hexadecimalLiteral = 117, 
		RULE_nullNotnull = 118, RULE_constant = 119, RULE_dataType = 120, RULE_collectionOptions = 121, 
		RULE_convertedDataType = 122, RULE_lengthOneDimension = 123, RULE_lengthTwoDimension = 124, 
		RULE_lengthTwoOptionalDimension = 125, RULE_uidList = 126, RULE_tables = 127, 
		RULE_indexColumnNames = 128, RULE_expressions = 129, RULE_expressionsWithDefaults = 130, 
		RULE_defaultValue = 131, RULE_currentTimestamp = 132, RULE_expressionOrDefault = 133, 
		RULE_ifExists = 134, RULE_ifNotExists = 135, RULE_functionCall = 136, 
		RULE_specificFunction = 137, RULE_caseFuncAlternative = 138, RULE_levelsInWeightString = 139, 
		RULE_levelInWeightListElement = 140, RULE_aggregateWindowedFunction = 141, 
		RULE_nonAggregateWindowedFunction = 142, RULE_overClause = 143, RULE_windowSpec = 144, 
		RULE_windowName = 145, RULE_frameClause = 146, RULE_frameUnits = 147, 
		RULE_frameExtent = 148, RULE_frameBetween = 149, RULE_frameRange = 150, 
		RULE_partitionClause = 151, RULE_scalarFunctionName = 152, RULE_passwordFunctionClause = 153, 
		RULE_functionArgs = 154, RULE_functionArg = 155, RULE_expression = 156, 
		RULE_predicate = 157, RULE_expressionAtom = 158, RULE_unaryOperator = 159, 
		RULE_comparisonOperator = 160, RULE_logicalOperator = 161, RULE_bitOperator = 162, 
		RULE_mathOperator = 163, RULE_jsonOperator = 164, RULE_charsetNameBase = 165, 
		RULE_transactionLevelBase = 166, RULE_privilegesBase = 167, RULE_intervalTypeBase = 168, 
		RULE_dataTypeBase = 169, RULE_keywordsCanBeId = 170, RULE_functionNameBase = 171;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
			"dmlStatement", "compoundStatement", "createIndex", "createTable", "commonTableExpressions", 
			"cteName", "cteColumnName", "charSet", "intervalType", "indexType", "indexOption", 
			"createDefinitions", "createDefinition", "columnDefinition", "columnConstraint", 
			"tableConstraint", "referenceDefinition", "referenceAction", "referenceControlType", 
			"indexColumnDefinition", "tableOption", "tableType", "tablespaceStorage", 
			"partitionDefinitions", "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
			"partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", 
			"subpartitionDefinition", "partitionOption", "alterTable", "alterSpecification", 
			"dropIndex", "dropTable", "renameTable", "renameTableClause", "truncateTable", 
			"deleteStatement", "insertStatement", "replaceStatement", "selectStatement", 
			"updateStatement", "insertStatementValue", "updatedElement", "assignmentField", 
			"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "singleUpdateStatement", 
			"multipleUpdateStatement", "orderByClause", "orderByExpression", "tableSources", 
			"tableSource", "tableSourceItem", "indexHint", "indexHintType", "joinPart", 
			"queryExpression", "queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
			"unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByClause", "havingClause", "windowClause", "groupByItem", 
			"limitClause", "limitClauseAtom", "routineBody", "blockStatement", "caseStatement", 
			"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
			"repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
			"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
			"handlerConditionValue", "procedureSqlStatement", "caseAlternative", 
			"elifAlternative", "fullId", "tableName", "fullColumnName", "indexColumnName", 
			"mysqlVariable", "charsetName", "collationName", "engineName", "uid", 
			"simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", "stringLiteral", 
			"booleanLiteral", "hexadecimalLiteral", "nullNotnull", "constant", "dataType", 
			"collectionOptions", "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
			"lengthTwoOptionalDimension", "uidList", "tables", "indexColumnNames", 
			"expressions", "expressionsWithDefaults", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
			"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
			"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
			"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
			"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
			"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
			"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
			"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
			"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
			"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
			"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
			"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
			"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
			"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
			"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
			"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", 
			"'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
			"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
			"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
			"'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
			"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
			"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", 
			"'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", 
			"'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", 
			"'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", 
			"'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", 
			"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
			"'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
			"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
			"'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", 
			"'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", 
			"'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", 
			"'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", 
			"'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
			"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
			"'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
			"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
			"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", 
			"'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
			"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
			"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
			"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
			"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
			"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
			"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
			"'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
			"'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", 
			"'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
			"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", 
			"'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
			"'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
			"'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
			"'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
			"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
			"'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
			"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
			"'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
			"'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
			"'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", 
			"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
			"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
			"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
			"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
			"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
			"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
			"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
			"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
			"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
			"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
			"'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
			"'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", 
			"'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCOPY'", "'NOWAIT'", 
			"'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
			"'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
			"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
			"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
			"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
			"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
			"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
			"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
			"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
			"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
			"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
			"'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", 
			"'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
			"'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", 
			"'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
			"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
			"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
			"'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", 
			"'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
			"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
			"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
			"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", 
			"'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", 
			"'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", 
			"'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
			"'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
			"'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", 
			"'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
			"'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
			"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
			"'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
			"'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
			"'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
			"'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", 
			"'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
			"'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
			"'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", 
			"'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", 
			"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", 
			"'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
			"'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", 
			"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", 
			"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
			"'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
			"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
			"'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
			"'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
			"'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
			"'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
			"'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
			"'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
			"'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
			"'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
			"'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
			"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
			"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
			"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
			"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
			"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
			"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
			"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
			"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", 
			"'NEXTVAL'", "'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", 
			"'BINLOG_REPLAY'", "'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", 
			"'REPLICATION_MASTER_ADMIN'", "':='", "'+='", "'-='", "'*='", "'/='", 
			"'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", 
			"'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
			"'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", 
			"'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
			"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
			"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
			"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
			"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
			"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", 
			"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
			"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
			"LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
			"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", 
			"OR", "ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
			"PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
			"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
			"RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", 
			"SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
			"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
			"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", 
			"JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", 
			"JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", 
			"JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
			"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
			"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
			"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
			"CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
			"CLOSE", "CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
			"COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
			"COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
			"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
			"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
			"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
			"ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
			"FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
			"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", 
			"INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", 
			"IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NOCOPY", "NOWAIT", "NODEGROUP", "NONE", "ODBC", 
			"OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
			"OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
			"PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", 
			"PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", "PREPARE", 
			"PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
			"QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", 
			"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
			"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
			"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
			"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", 
			"RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", 
			"ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", 
			"SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", 
			"SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
			"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
			"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
			"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
			"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
			"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
			"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
			"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
			"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
			"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
			"APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
			"BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
			"FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
			"FLUSH_TABLES", "FLUSH_USER_RESOURCES", "ADMIN", "GROUP_REPLICATION_ADMIN", 
			"INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", 
			"PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
			"RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", 
			"SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", 
			"TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", 
			"GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
			"KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
			"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
			"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
			"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
			"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
			"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
			"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
			"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
			"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
			"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
			"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
			"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
			"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
			"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
			"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
			"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
			"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
			"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
			"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
			"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", 
			"MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
			"NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
			"OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
			"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
			"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
			"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
			"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
			"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
			"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
			"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
			"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
			"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
			"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
			"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
			"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
			"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
			"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
			"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
			"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
			"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
			"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
			"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
			"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
			"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
			"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
			"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
			"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
			"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
			"X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", 
			"BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", 
			"REPLICA", "REPLICATION_MASTER_ADMIN", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
			"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
			"OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", 
			"EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
			"BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
			"RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
			"TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
			"COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
			"REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "STRING_USER_NAME_MARIADB", 
			"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "ENCRYPTED", "ENCRYPTION_KEY_ID"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << CREATE) | (1L << DELETE) | (1L << DROP))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (INSERT - 82)) | (1L << (RENAME - 82)) | (1L << (REPLACE - 82)))) != 0) || _la==SELECT || _la==UPDATE || _la==TRUNCATE || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(344);
				sqlStatements();
				}
			}

			setState(349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(347);
				match(MINUS);
				setState(348);
				match(MINUS);
				}
			}

			setState(351);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatement_Context> emptyStatement_() {
			return getRuleContexts(EmptyStatement_Context.class);
		}
		public EmptyStatement_Context emptyStatement_(int i) {
			return getRuleContext(EmptyStatement_Context.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(364);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(362);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case CREATE:
					case DELETE:
					case DROP:
					case INSERT:
					case RENAME:
					case REPLACE:
					case SELECT:
					case UPDATE:
					case TRUNCATE:
					case LR_BRACKET:
						{
						setState(353);
						sqlStatement();
						setState(356);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(354);
							match(MINUS);
							setState(355);
							match(MINUS);
							}
						}

						setState(359);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(358);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(361);
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(366);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(376);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case RENAME:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case TRUNCATE:
			case LR_BRACKET:
				{
				setState(367);
				sqlStatement();
				setState(373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(370);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(368);
						match(MINUS);
						setState(369);
						match(MINUS);
						}
					}

					setState(372);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(375);
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(380);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case CREATE:
			case DROP:
			case RENAME:
			case TRUNCATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(378);
				ddlStatement();
				}
				break;
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(379);
				dmlStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatement_Context extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEmptyStatement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatement_Context emptyStatement_() throws RecognitionException {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(382);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(384);
				createIndex();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(385);
				createTable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(386);
				alterTable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(387);
				dropIndex();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(388);
				dropTable();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(389);
				renameTable();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(390);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(393);
				selectStatement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(394);
				insertStatement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(395);
				updateStatement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(396);
				deleteStatement();
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(397);
				replaceStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_compoundStatement);
		try {
			setState(410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(400);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(401);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(402);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(403);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(404);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(405);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(406);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(407);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(408);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(409);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(MySqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(MySqlParser.NOCOPY, i);
		}
		public List<TerminalNode> INSTANT() { return getTokens(MySqlParser.INSTANT); }
		public TerminalNode INSTANT(int i) {
			return getToken(MySqlParser.INSTANT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(412);
			match(CREATE);
			setState(415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(413);
				match(OR);
				setState(414);
				match(REPLACE);
				}
			}

			setState(418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(417);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(420);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(423);
			match(INDEX);
			setState(427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(424);
				match(IF);
				setState(425);
				match(NOT);
				setState(426);
				match(EXISTS);
				}
			}

			setState(429);
			uid();
			setState(431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(430);
				indexType();
				}
			}

			setState(433);
			match(ON);
			setState(434);
			tableName();
			setState(435);
			indexColumnNames();
			setState(439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				{
				setState(436);
				match(WAIT);
				setState(437);
				decimalLiteral();
				}
				break;
			case NOWAIT:
				{
				setState(438);
				match(NOWAIT);
				}
				break;
			case EOF:
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case IGNORED:
			case INSERT:
			case LOCK:
			case NOT:
			case RENAME:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case USING:
			case WITH:
			case ALGORITHM:
			case CLUSTERING:
			case COMMENT:
			case INVISIBLE:
			case KEY_BLOCK_SIZE:
			case TRUNCATE:
			case VISIBLE:
			case ENGINE_ATTRIBUTE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				setState(441);
				indexOption();
				}
				}
				setState(446);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCK || _la==ALGORITHM) {
				{
				setState(457);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(447);
					match(ALGORITHM);
					setState(449);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQUAL_SYMBOL) {
						{
						setState(448);
						match(EQUAL_SYMBOL);
						}
					}

					setState(451);
					((CreateIndexContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT || _la==NOCOPY) ) {
						((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LOCK:
					{
					setState(452);
					match(LOCK);
					setState(454);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQUAL_SYMBOL) {
						{
						setState(453);
						match(EQUAL_SYMBOL);
						}
					}

					setState(456);
					((CreateIndexContext)_localctx).lockType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
						((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(461);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_createTable);
		int _la;
		try {
			_localctx = new ColumnCreateTableContext(_localctx);
			enterOuterAlt(_localctx, 1);
			{
			setState(462);
			match(CREATE);
			setState(465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(463);
				match(OR);
				setState(464);
				match(REPLACE);
				}
			}

			setState(468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(467);
				match(TEMPORARY);
				}
			}

			setState(470);
			match(TABLE);
			setState(472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(471);
				ifNotExists();
				}
			}

			setState(474);
			tableName();
			setState(475);
			createDefinitions();
			setState(486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (AUTO_INCREMENT - 330)) | (1L << (AVG_ROW_LENGTH - 330)) | (1L << (CHECKSUM - 330)) | (1L << (PAGE_CHECKSUM - 330)) | (1L << (COMMENT - 330)) | (1L << (COMPRESSION - 330)) | (1L << (CONNECTION - 330)) | (1L << (DATA - 330)) | (1L << (DELAY_KEY_WRITE - 330)) | (1L << (ENCRYPTION - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (ENGINE - 394)) | (1L << (INSERT_METHOD - 394)) | (1L << (KEY_BLOCK_SIZE - 394)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (PACK_KEYS - 482)) | (1L << (PASSWORD - 482)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (ROW_FORMAT - 575)) | (1L << (STATS_AUTO_RECALC - 575)) | (1L << (STATS_PERSISTENT - 575)) | (1L << (STATS_SAMPLE_PAGES - 575)) | (1L << (STORAGE - 575)) | (1L << (TABLESPACE - 575)) | (1L << (TABLE_TYPE - 575)))) != 0) || _la==CHARSET) {
				{
				setState(476);
				tableOption();
				setState(483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (AUTO_INCREMENT - 330)) | (1L << (AVG_ROW_LENGTH - 330)) | (1L << (CHECKSUM - 330)) | (1L << (PAGE_CHECKSUM - 330)) | (1L << (COMMENT - 330)) | (1L << (COMPRESSION - 330)) | (1L << (CONNECTION - 330)) | (1L << (DATA - 330)) | (1L << (DELAY_KEY_WRITE - 330)) | (1L << (ENCRYPTION - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (ENGINE - 394)) | (1L << (INSERT_METHOD - 394)) | (1L << (KEY_BLOCK_SIZE - 394)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (PACK_KEYS - 482)) | (1L << (PASSWORD - 482)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (ROW_FORMAT - 575)) | (1L << (STATS_AUTO_RECALC - 575)) | (1L << (STATS_PERSISTENT - 575)) | (1L << (STATS_SAMPLE_PAGES - 575)) | (1L << (STORAGE - 575)) | (1L << (TABLESPACE - 575)) | (1L << (TABLE_TYPE - 575)))) != 0) || _la==CHARSET || _la==COMMA) {
					{
					{
					setState(478);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(477);
						match(COMMA);
						}
					}

					setState(480);
					tableOption();
					}
					}
					setState(485);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(488);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionsContext extends ParserRuleContext {
		public CteNameContext cteName() {
			return getRuleContext(CteNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<CteColumnNameContext> cteColumnName() {
			return getRuleContexts(CteColumnNameContext.class);
		}
		public CteColumnNameContext cteColumnName(int i) {
			return getRuleContext(CteColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommonTableExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommonTableExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommonTableExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionsContext commonTableExpressions() throws RecognitionException {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_commonTableExpressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(491);
			cteName();
			setState(503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(492);
				match(LR_BRACKET);
				setState(493);
				cteColumnName();
				setState(498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(494);
					match(COMMA);
					setState(495);
					cteColumnName();
					}
					}
					setState(500);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(501);
				match(RR_BRACKET);
				}
			}

			setState(505);
			match(AS);
			setState(506);
			match(LR_BRACKET);
			setState(507);
			dmlStatement();
			setState(508);
			match(RR_BRACKET);
			setState(511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(509);
				match(COMMA);
				setState(510);
				commonTableExpressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteNameContext cteName() throws RecognitionException {
		CteNameContext _localctx = new CteNameContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_cteName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(513);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteColumnNameContext cteColumnName() throws RecognitionException {
		CteColumnNameContext _localctx = new CteColumnNameContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_cteColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(515);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharSetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharSetContext charSet() throws RecognitionException {
		CharSetContext _localctx = new CharSetContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_charSet);
		try {
			setState(522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(517);
				match(CHARACTER);
				setState(518);
				match(SET);
				}
				break;
			case CHARSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(519);
				match(CHARSET);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(520);
				match(CHAR);
				setState(521);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_intervalType);
		try {
			setState(537);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(524);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(525);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(526);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(527);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(528);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(529);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(530);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(531);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(532);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(533);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(534);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(535);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(536);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(539);
			match(USING);
			setState(540);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH || _la==RTREE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode YES() { return getToken(MySqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_indexOption);
		int _la;
		try {
			setState(572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(542);
				match(KEY_BLOCK_SIZE);
				setState(544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(543);
					match(EQUAL_SYMBOL);
					}
				}

				setState(546);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(547);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(548);
				match(WITH);
				setState(549);
				match(PARSER);
				setState(550);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(551);
				match(COMMENT);
				setState(552);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(553);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(554);
				match(ENGINE_ATTRIBUTE);
				setState(556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(555);
					match(EQUAL_SYMBOL);
					}
				}

				setState(558);
				match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(559);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(560);
					match(EQUAL_SYMBOL);
					}
				}

				setState(563);
				match(STRING_LITERAL);
				}
				break;
			case CLUSTERING:
				enterOuterAlt(_localctx, 8);
				{
				setState(564);
				match(CLUSTERING);
				setState(565);
				match(EQUAL_SYMBOL);
				setState(566);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case IGNORED:
			case NOT:
				enterOuterAlt(_localctx, 9);
				{
				setState(570);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IGNORED:
					{
					setState(567);
					match(IGNORED);
					}
					break;
				case NOT:
					{
					setState(568);
					match(NOT);
					setState(569);
					match(IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(574);
			match(LR_BRACKET);
			setState(575);
			createDefinition();
			setState(580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(576);
				match(COMMA);
				setState(577);
				createDefinition();
				}
				}
				setState(582);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(583);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createDefinition);
		try {
			setState(590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(585);
				uid();
				setState(586);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(588);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(589);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(592);
			dataType();
			setState(596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CHECK) | (1L << COLLATE) | (1L << CONSTRAINT) | (1L << DEFAULT))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (GENERATED - 67)) | (1L << (KEY - 67)) | (1L << (NOT - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (ON - 67)) | (1L << (PRIMARY - 67)) | (1L << (REFERENCES - 67)))) != 0) || _la==UNIQUE || _la==SERIAL || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (AUTO_INCREMENT - 330)) | (1L << (COLUMN_FORMAT - 330)) | (1L << (COMMENT - 330)))) != 0) || _la==INVISIBLE || _la==STORAGE || _la==VISIBLE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(593);
				columnConstraint();
				}
				}
				setState(598);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVisibilityColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVisibilityColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_columnConstraint);
		int _la;
		try {
			setState(652);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(599);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(600);
				match(DEFAULT);
				setState(601);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(602);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(603);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(608);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(604);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(605);
					match(ON);
					setState(606);
					match(UPDATE);
					setState(607);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(610);
					match(PRIMARY);
					}
				}

				setState(613);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(614);
				match(UNIQUE);
				setState(616);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(615);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(618);
				match(COMMENT);
				setState(619);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(620);
				match(COLUMN_FORMAT);
				setState(621);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(622);
				match(STORAGE);
				setState(623);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(624);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(625);
				match(COLLATE);
				setState(626);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(627);
					match(GENERATED);
					setState(628);
					match(ALWAYS);
					}
				}

				setState(631);
				match(AS);
				setState(632);
				match(LR_BRACKET);
				setState(633);
				expression(0);
				setState(634);
				match(RR_BRACKET);
				setState(636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(635);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(638);
				match(SERIAL);
				setState(639);
				match(DEFAULT);
				setState(640);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(641);
					match(CONSTRAINT);
					setState(643);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(642);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(647);
				match(CHECK);
				setState(648);
				match(LR_BRACKET);
				setState(649);
				expression(0);
				setState(650);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_tableConstraint);
		int _la;
		try {
			setState(723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(654);
					match(CONSTRAINT);
					setState(656);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(655);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(660);
				match(PRIMARY);
				setState(661);
				match(KEY);
				setState(663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(662);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(665);
					indexType();
					}
				}

				setState(668);
				indexColumnNames();
				setState(672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(669);
					indexOption();
					}
					}
					setState(674);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(675);
					match(CONSTRAINT);
					setState(677);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(676);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(681);
				match(UNIQUE);
				setState(683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(682);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(685);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(688);
					indexType();
					}
				}

				setState(691);
				indexColumnNames();
				setState(695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(692);
					indexOption();
					}
					}
					setState(697);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(698);
					match(CONSTRAINT);
					setState(700);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(699);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(704);
				match(FOREIGN);
				setState(705);
				match(KEY);
				setState(707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(706);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(709);
				indexColumnNames();
				setState(710);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(712);
					match(CONSTRAINT);
					setState(714);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(713);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(718);
				match(CHECK);
				setState(719);
				match(LR_BRACKET);
				setState(720);
				expression(0);
				setState(721);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(725);
			match(REFERENCES);
			setState(726);
			tableName();
			setState(728);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(727);
				indexColumnNames();
				}
				break;
			}
			setState(732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(730);
				match(MATCH);
				setState(731);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(734);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_referenceAction);
		try {
			setState(753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(737);
				match(ON);
				setState(738);
				match(DELETE);
				setState(739);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(740);
					match(ON);
					setState(741);
					match(UPDATE);
					setState(742);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(745);
				match(ON);
				setState(746);
				match(UPDATE);
				setState(747);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(748);
					match(ON);
					setState(749);
					match(DELETE);
					setState(750);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_referenceControlType);
		try {
			setState(761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(755);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(756);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(757);
				match(SET);
				setState(758);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(759);
				match(NO);
				setState(760);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(791);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(763);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(764);
					uid();
					}
				}

				setState(768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(767);
					indexType();
					}
				}

				setState(770);
				indexColumnNames();
				setState(774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(771);
					indexOption();
					}
					}
					setState(776);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(777);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(778);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(781);
					uid();
					}
				}

				setState(784);
				indexColumnNames();
				setState(788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(785);
					indexOption();
					}
					}
					setState(790);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTableTypeContext extends TableOptionContext {
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableTypeContext tableType() {
			return getRuleContext(TableTypeContext.class,0);
		}
		public TableOptionTableTypeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTableType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_tableOption);
		int _la;
		try {
			setState(938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(793);
				match(ENGINE);
				setState(795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(794);
					match(EQUAL_SYMBOL);
					}
				}

				setState(798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECT || ((((_la - 752)) & ~0x3f) == 0 && ((1L << (_la - 752)) & ((1L << (ARCHIVE - 752)) | (1L << (BLACKHOLE - 752)) | (1L << (CSV - 752)) | (1L << (FEDERATED - 752)) | (1L << (INNODB - 752)) | (1L << (MEMORY - 752)) | (1L << (MRG_MYISAM - 752)) | (1L << (MYISAM - 752)) | (1L << (NDB - 752)) | (1L << (NDBCLUSTER - 752)) | (1L << (PERFORMANCE_SCHEMA - 752)) | (1L << (TOKUDB - 752)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)))) != 0)) {
					{
					setState(797);
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(800);
				match(AUTO_INCREMENT);
				setState(802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(801);
					match(EQUAL_SYMBOL);
					}
				}

				setState(804);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(805);
				match(AVG_ROW_LENGTH);
				setState(807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(806);
					match(EQUAL_SYMBOL);
					}
				}

				setState(809);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(810);
					match(DEFAULT);
					}
				}

				setState(813);
				charSet();
				setState(815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(814);
					match(EQUAL_SYMBOL);
					}
				}

				setState(819);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(817);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(818);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(821);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(822);
					match(EQUAL_SYMBOL);
					}
				}

				setState(825);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(826);
					match(DEFAULT);
					}
				}

				setState(829);
				match(COLLATE);
				setState(831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(830);
					match(EQUAL_SYMBOL);
					}
				}

				setState(833);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(834);
				match(COMMENT);
				setState(836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(835);
					match(EQUAL_SYMBOL);
					}
				}

				setState(838);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(839);
				match(COMPRESSION);
				setState(841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(840);
					match(EQUAL_SYMBOL);
					}
				}

				setState(843);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(844);
				match(CONNECTION);
				setState(846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(845);
					match(EQUAL_SYMBOL);
					}
				}

				setState(848);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(849);
				match(DATA);
				setState(850);
				match(DIRECTORY);
				setState(852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(851);
					match(EQUAL_SYMBOL);
					}
				}

				setState(854);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(855);
				match(DELAY_KEY_WRITE);
				setState(857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(856);
					match(EQUAL_SYMBOL);
					}
				}

				setState(859);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(860);
				match(ENCRYPTION);
				setState(862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(861);
					match(EQUAL_SYMBOL);
					}
				}

				setState(864);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(865);
				match(INDEX);
				setState(866);
				match(DIRECTORY);
				setState(868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(867);
					match(EQUAL_SYMBOL);
					}
				}

				setState(870);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(871);
				match(INSERT_METHOD);
				setState(873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(872);
					match(EQUAL_SYMBOL);
					}
				}

				setState(875);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(876);
				match(KEY_BLOCK_SIZE);
				setState(878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(877);
					match(EQUAL_SYMBOL);
					}
				}

				setState(880);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(881);
				match(MAX_ROWS);
				setState(883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(882);
					match(EQUAL_SYMBOL);
					}
				}

				setState(885);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(886);
				match(MIN_ROWS);
				setState(888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(887);
					match(EQUAL_SYMBOL);
					}
				}

				setState(890);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(891);
				match(PACK_KEYS);
				setState(893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(892);
					match(EQUAL_SYMBOL);
					}
				}

				setState(895);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(896);
				match(PASSWORD);
				setState(898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(897);
					match(EQUAL_SYMBOL);
					}
				}

				setState(900);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(901);
				match(ROW_FORMAT);
				setState(903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(902);
					match(EQUAL_SYMBOL);
					}
				}

				setState(905);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 358)) & ~0x3f) == 0 && ((1L << (_la - 358)) & ((1L << (COMPACT - 358)) | (1L << (COMPRESSED - 358)) | (1L << (DYNAMIC - 358)) | (1L << (FIXED - 358)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(906);
				match(STATS_AUTO_RECALC);
				setState(908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(907);
					match(EQUAL_SYMBOL);
					}
				}

				setState(910);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(911);
				match(STATS_PERSISTENT);
				setState(913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(912);
					match(EQUAL_SYMBOL);
					}
				}

				setState(915);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(916);
				match(STATS_SAMPLE_PAGES);
				setState(918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(917);
					match(EQUAL_SYMBOL);
					}
				}

				setState(920);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(921);
				match(TABLESPACE);
				setState(922);
				uid();
				setState(924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					setState(923);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTableTypeContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(926);
				match(TABLE_TYPE);
				setState(927);
				match(EQUAL_SYMBOL);
				setState(928);
				tableType();
				}
				break;
			case 26:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(929);
				tablespaceStorage();
				}
				break;
			case 27:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(930);
				match(UNION);
				setState(932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(931);
					match(EQUAL_SYMBOL);
					}
				}

				setState(934);
				match(LR_BRACKET);
				setState(935);
				tables();
				setState(936);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(940);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(942);
			match(STORAGE);
			setState(943);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(945);
			match(PARTITION);
			setState(946);
			match(BY);
			setState(947);
			partitionFunctionDefinition();
			setState(950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(948);
				match(PARTITIONS);
				setState(949);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(952);
				match(SUBPARTITION);
				setState(953);
				match(BY);
				setState(954);
				subpartitionFunctionDefinition();
				setState(957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(955);
					match(SUBPARTITIONS);
					setState(956);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(961);
				match(LR_BRACKET);
				setState(962);
				partitionDefinition();
				setState(967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(963);
					match(COMMA);
					setState(964);
					partitionDefinition();
					}
					}
					setState(969);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(970);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(974);
					match(LINEAR);
					}
				}

				setState(977);
				match(HASH);
				setState(978);
				match(LR_BRACKET);
				setState(979);
				expression(0);
				setState(980);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(982);
					match(LINEAR);
					}
				}

				setState(985);
				match(KEY);
				setState(989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(986);
					match(ALGORITHM);
					setState(987);
					match(EQUAL_SYMBOL);
					setState(988);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(991);
				match(LR_BRACKET);
				setState(992);
				uidList();
				setState(993);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(995);
				match(RANGE);
				setState(1005);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(996);
					match(LR_BRACKET);
					setState(997);
					expression(0);
					setState(998);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1000);
					match(COLUMNS);
					setState(1001);
					match(LR_BRACKET);
					setState(1002);
					uidList();
					setState(1003);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1007);
				match(LIST);
				setState(1017);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1008);
					match(LR_BRACKET);
					setState(1009);
					expression(0);
					setState(1010);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1012);
					match(COLUMNS);
					setState(1013);
					match(LR_BRACKET);
					setState(1014);
					uidList();
					setState(1015);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1021);
					match(LINEAR);
					}
				}

				setState(1024);
				match(HASH);
				setState(1025);
				match(LR_BRACKET);
				setState(1026);
				expression(0);
				setState(1027);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1029);
					match(LINEAR);
					}
				}

				setState(1032);
				match(KEY);
				setState(1036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1033);
					match(ALGORITHM);
					setState(1034);
					match(EQUAL_SYMBOL);
					setState(1035);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1038);
				match(LR_BRACKET);
				setState(1039);
				uidList();
				setState(1040);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisonContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_partitionDefinition);
		int _la;
		try {
			setState(1190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1044);
				match(PARTITION);
				setState(1045);
				uid();
				setState(1046);
				match(VALUES);
				setState(1047);
				match(LESS);
				setState(1048);
				match(THAN);
				setState(1049);
				match(LR_BRACKET);
				setState(1050);
				partitionDefinerAtom();
				setState(1055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1051);
					match(COMMA);
					setState(1052);
					partitionDefinerAtom();
					}
					}
					setState(1057);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1058);
				match(RR_BRACKET);
				setState(1062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1059);
					partitionOption();
					}
					}
					setState(1064);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1065);
					match(LR_BRACKET);
					setState(1066);
					subpartitionDefinition();
					setState(1071);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1067);
						match(COMMA);
						setState(1068);
						subpartitionDefinition();
						}
						}
						setState(1073);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1074);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1078);
				match(PARTITION);
				setState(1079);
				uid();
				setState(1080);
				match(VALUES);
				setState(1081);
				match(LESS);
				setState(1082);
				match(THAN);
				setState(1083);
				partitionDefinerAtom();
				setState(1087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1084);
					partitionOption();
					}
					}
					setState(1089);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1090);
					match(LR_BRACKET);
					setState(1091);
					subpartitionDefinition();
					setState(1096);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1092);
						match(COMMA);
						setState(1093);
						subpartitionDefinition();
						}
						}
						setState(1098);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1099);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1103);
				match(PARTITION);
				setState(1104);
				uid();
				setState(1105);
				match(VALUES);
				setState(1106);
				match(IN);
				setState(1107);
				match(LR_BRACKET);
				setState(1108);
				partitionDefinerAtom();
				setState(1113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1109);
					match(COMMA);
					setState(1110);
					partitionDefinerAtom();
					}
					}
					setState(1115);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1116);
				match(RR_BRACKET);
				setState(1120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1117);
					partitionOption();
					}
					}
					setState(1122);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1123);
					match(LR_BRACKET);
					setState(1124);
					subpartitionDefinition();
					setState(1129);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1125);
						match(COMMA);
						setState(1126);
						subpartitionDefinition();
						}
						}
						setState(1131);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1132);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1136);
				match(PARTITION);
				setState(1137);
				uid();
				setState(1138);
				match(VALUES);
				setState(1139);
				match(IN);
				setState(1140);
				match(LR_BRACKET);
				setState(1141);
				partitionDefinerVector();
				setState(1146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1142);
					match(COMMA);
					setState(1143);
					partitionDefinerVector();
					}
					}
					setState(1148);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1149);
				match(RR_BRACKET);
				setState(1153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1150);
					partitionOption();
					}
					}
					setState(1155);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1156);
					match(LR_BRACKET);
					setState(1157);
					subpartitionDefinition();
					setState(1162);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1158);
						match(COMMA);
						setState(1159);
						subpartitionDefinition();
						}
						}
						setState(1164);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1165);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1169);
				match(PARTITION);
				setState(1170);
				uid();
				setState(1174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1171);
					partitionOption();
					}
					}
					setState(1176);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1177);
					match(LR_BRACKET);
					setState(1178);
					subpartitionDefinition();
					setState(1183);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1179);
						match(COMMA);
						setState(1180);
						subpartitionDefinition();
						}
						}
						setState(1185);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1186);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_partitionDefinerAtom);
		try {
			setState(1195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1192);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1193);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1194);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1197);
			match(LR_BRACKET);
			setState(1198);
			partitionDefinerAtom();
			setState(1201); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1199);
				match(COMMA);
				setState(1200);
				partitionDefinerAtom();
				}
				}
				setState(1203); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(1205);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1207);
			match(SUBPARTITION);
			setState(1208);
			uid();
			setState(1212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(1209);
				partitionOption();
				}
				}
				setState(1214);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_partitionOption);
		int _la;
		try {
			setState(1263);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1215);
					match(DEFAULT);
					}
				}

				setState(1219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1218);
					match(STORAGE);
					}
				}

				setState(1221);
				match(ENGINE);
				setState(1223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1222);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1225);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1226);
				match(COMMENT);
				setState(1228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1227);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1230);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1231);
				match(DATA);
				setState(1232);
				match(DIRECTORY);
				setState(1234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1233);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1236);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1237);
				match(INDEX);
				setState(1238);
				match(DIRECTORY);
				setState(1240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1239);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1242);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1243);
				match(MAX_ROWS);
				setState(1245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1244);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1247);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1248);
				match(MIN_ROWS);
				setState(1250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1249);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1252);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1253);
				match(TABLESPACE);
				setState(1255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1254);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1257);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1258);
				match(NODEGROUP);
				setState(1260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1259);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1262);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			match(ALTER);
			setState(1267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(1266);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1269);
				match(IGNORE);
				}
			}

			setState(1272);
			match(TABLE);
			setState(1273);
			tableName();
			setState(1282);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(1274);
				alterSpecification();
				setState(1279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1275);
					match(COMMA);
					setState(1276);
					alterSpecification();
					}
					}
					setState(1281);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1284);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropConstraintCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropConstraintCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropConstraintCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAlterIndexVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAlterIndexVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAlterIndexVisibility(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(1689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1287);
				tableOption();
				setState(1294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1289);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1288);
							match(COMMA);
							}
						}

						setState(1291);
						tableOption();
						}
						} 
					}
					setState(1296);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1297);
				match(ADD);
				setState(1299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1298);
					match(COLUMN);
					}
				}

				setState(1302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1301);
					ifNotExists();
					}
				}

				setState(1304);
				uid();
				setState(1305);
				columnDefinition();
				setState(1309);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(1306);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(1307);
					match(AFTER);
					setState(1308);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case INSERT:
				case PARTITION:
				case RENAME:
				case REPLACE:
				case SELECT:
				case UPDATE:
				case TRUNCATE:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1311);
				match(ADD);
				setState(1313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1312);
					match(COLUMN);
					}
				}

				setState(1316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1315);
					ifNotExists();
					}
				}

				setState(1318);
				match(LR_BRACKET);
				setState(1319);
				uid();
				setState(1320);
				columnDefinition();
				setState(1327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1321);
					match(COMMA);
					setState(1322);
					uid();
					setState(1323);
					columnDefinition();
					}
					}
					setState(1329);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1330);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1332);
				match(ADD);
				setState(1333);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1334);
					ifNotExists();
					}
				}

				setState(1338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(1337);
					uid();
					}
				}

				setState(1341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1340);
					indexType();
					}
				}

				setState(1343);
				indexColumnNames();
				setState(1347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1344);
					indexOption();
					}
					}
					setState(1349);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1350);
				match(ADD);
				setState(1355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1351);
					match(CONSTRAINT);
					setState(1353);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(1352);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1357);
				match(PRIMARY);
				setState(1358);
				match(KEY);
				setState(1360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(1359);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(1363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1362);
					indexType();
					}
				}

				setState(1365);
				indexColumnNames();
				setState(1369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1366);
					indexOption();
					}
					}
					setState(1371);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1372);
				match(ADD);
				setState(1377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1373);
					match(CONSTRAINT);
					setState(1375);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(1374);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1379);
				match(UNIQUE);
				setState(1381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1380);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(1383);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(1387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1386);
					indexType();
					}
				}

				setState(1389);
				indexColumnNames();
				setState(1393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1390);
					indexOption();
					}
					}
					setState(1395);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1396);
				match(ADD);
				setState(1397);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1398);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(1401);
					uid();
					}
				}

				setState(1404);
				indexColumnNames();
				setState(1408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1405);
					indexOption();
					}
					}
					setState(1410);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1411);
				match(ADD);
				setState(1416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1412);
					match(CONSTRAINT);
					setState(1414);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(1413);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1418);
				match(FOREIGN);
				setState(1419);
				match(KEY);
				setState(1421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1420);
					ifNotExists();
					}
				}

				setState(1424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(1423);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(1426);
				indexColumnNames();
				setState(1427);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1429);
				match(ADD);
				setState(1434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1430);
					match(CONSTRAINT);
					setState(1432);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
						{
						setState(1431);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1436);
				match(CHECK);
				setState(1437);
				match(LR_BRACKET);
				setState(1438);
				expression(0);
				setState(1439);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1441);
				match(ALGORITHM);
				setState(1443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1442);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1445);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1446);
				match(ALTER);
				setState(1448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1447);
					match(COLUMN);
					}
				}

				setState(1450);
				uid();
				setState(1456);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(1451);
					match(SET);
					setState(1452);
					match(DEFAULT);
					setState(1453);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(1454);
					match(DROP);
					setState(1455);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1458);
				match(CHANGE);
				setState(1460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1459);
					match(COLUMN);
					}
				}

				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1462);
					ifExists();
					}
				}

				setState(1465);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(1466);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(1467);
				columnDefinition();
				setState(1471);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(1468);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(1469);
					match(AFTER);
					setState(1470);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case INSERT:
				case PARTITION:
				case RENAME:
				case REPLACE:
				case SELECT:
				case UPDATE:
				case TRUNCATE:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1473);
				match(RENAME);
				setState(1474);
				match(COLUMN);
				setState(1475);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(1476);
				match(TO);
				setState(1477);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1479);
				match(LOCK);
				setState(1481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1480);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1483);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1484);
				match(MODIFY);
				setState(1486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1485);
					match(COLUMN);
					}
				}

				setState(1489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1488);
					ifExists();
					}
				}

				setState(1491);
				uid();
				setState(1492);
				columnDefinition();
				setState(1496);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(1493);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(1494);
					match(AFTER);
					setState(1495);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case INSERT:
				case PARTITION:
				case RENAME:
				case REPLACE:
				case SELECT:
				case UPDATE:
				case TRUNCATE:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1498);
				match(DROP);
				setState(1500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1499);
					match(COLUMN);
					}
				}

				setState(1503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1502);
					ifExists();
					}
				}

				setState(1505);
				uid();
				setState(1507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(1506);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1509);
				match(DROP);
				setState(1510);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1511);
					ifExists();
					}
				}

				setState(1514);
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1515);
				match(DROP);
				setState(1516);
				match(PRIMARY);
				setState(1517);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1518);
				match(RENAME);
				setState(1519);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1520);
				uid();
				setState(1521);
				match(TO);
				setState(1522);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1524);
				match(ALTER);
				setState(1525);
				match(INDEX);
				setState(1526);
				uid();
				setState(1527);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1529);
				match(DROP);
				setState(1530);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1531);
					ifExists();
					}
				}

				setState(1534);
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1535);
				match(DROP);
				setState(1536);
				match(FOREIGN);
				setState(1537);
				match(KEY);
				setState(1539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1538);
					ifExists();
					}
				}

				setState(1541);
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1542);
				match(DISABLE);
				setState(1543);
				match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1544);
				match(ENABLE);
				setState(1545);
				match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1546);
				match(RENAME);
				setState(1548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(1547);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					setState(1550);
					uid();
					}
					break;
				case 2:
					{
					setState(1551);
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1554);
				match(ORDER);
				setState(1555);
				match(BY);
				setState(1556);
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1557);
				match(CONVERT);
				setState(1558);
				match(TO);
				setState(1559);
				match(CHARACTER);
				setState(1560);
				match(SET);
				setState(1561);
				charsetName();
				setState(1564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(1562);
					match(COLLATE);
					setState(1563);
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(1567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1566);
					match(DEFAULT);
					}
				}

				setState(1569);
				match(CHARACTER);
				setState(1570);
				match(SET);
				setState(1571);
				match(EQUAL_SYMBOL);
				setState(1572);
				charsetName();
				setState(1576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(1573);
					match(COLLATE);
					setState(1574);
					match(EQUAL_SYMBOL);
					setState(1575);
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1578);
				match(DISCARD);
				setState(1579);
				match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(1580);
				match(IMPORT);
				setState(1581);
				match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(1582);
				match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(1583);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1584);
				match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(1585);
				match(ADD);
				setState(1586);
				match(PARTITION);
				setState(1588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1587);
					ifNotExists();
					}
				}

				setState(1590);
				match(LR_BRACKET);
				setState(1591);
				partitionDefinition();
				setState(1596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1592);
					match(COMMA);
					setState(1593);
					partitionDefinition();
					}
					}
					setState(1598);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1599);
				match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(1601);
				match(DROP);
				setState(1602);
				match(PARTITION);
				setState(1604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1603);
					ifExists();
					}
				}

				setState(1606);
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(1607);
				match(DISCARD);
				setState(1608);
				match(PARTITION);
				setState(1611);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1609);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1610);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1613);
				match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(1614);
				match(IMPORT);
				setState(1615);
				match(PARTITION);
				setState(1618);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1616);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1617);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1620);
				match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(1621);
				match(TRUNCATE);
				setState(1622);
				match(PARTITION);
				setState(1625);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1623);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1624);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(1627);
				match(COALESCE);
				setState(1628);
				match(PARTITION);
				setState(1629);
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(1630);
				match(REORGANIZE);
				setState(1631);
				match(PARTITION);
				setState(1632);
				uidList();
				setState(1633);
				match(INTO);
				setState(1634);
				match(LR_BRACKET);
				setState(1635);
				partitionDefinition();
				setState(1640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1636);
					match(COMMA);
					setState(1637);
					partitionDefinition();
					}
					}
					setState(1642);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1643);
				match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(1645);
				match(EXCHANGE);
				setState(1646);
				match(PARTITION);
				setState(1647);
				uid();
				setState(1648);
				match(WITH);
				setState(1649);
				match(TABLE);
				setState(1650);
				tableName();
				setState(1653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(1651);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1652);
					match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(1655);
				match(ANALYZE);
				setState(1656);
				match(PARTITION);
				setState(1659);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1657);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1658);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(1661);
				match(CHECK);
				setState(1662);
				match(PARTITION);
				setState(1665);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1663);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1664);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(1667);
				match(OPTIMIZE);
				setState(1668);
				match(PARTITION);
				setState(1671);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1669);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1670);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(1673);
				match(REBUILD);
				setState(1674);
				match(PARTITION);
				setState(1677);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1675);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1676);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(1679);
				match(REPAIR);
				setState(1680);
				match(PARTITION);
				setState(1683);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(1681);
					uidList();
					}
					break;
				case ALL:
					{
					setState(1682);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(1685);
				match(REMOVE);
				setState(1686);
				match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(1687);
				match(UPGRADE);
				setState(1688);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1691);
			match(DROP);
			setState(1692);
			match(INDEX);
			setState(1694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				setState(1693);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1696);
			uid();
			setState(1697);
			match(ON);
			setState(1698);
			tableName();
			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCK || _la==ALGORITHM) {
				{
				setState(1709);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(1699);
					match(ALGORITHM);
					setState(1701);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQUAL_SYMBOL) {
						{
						setState(1700);
						match(EQUAL_SYMBOL);
						}
					}

					setState(1703);
					((DropIndexContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
						((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LOCK:
					{
					setState(1704);
					match(LOCK);
					setState(1706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQUAL_SYMBOL) {
						{
						setState(1705);
						match(EQUAL_SYMBOL);
						}
					}

					setState(1708);
					((DropIndexContext)_localctx).lockType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
						((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1713);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			match(DROP);
			setState(1716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(1715);
				match(TEMPORARY);
				}
			}

			setState(1718);
			match(TABLE);
			setState(1720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1719);
				ifExists();
				}
			}

			setState(1722);
			tables();
			setState(1724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1723);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1726);
			match(RENAME);
			setState(1727);
			match(TABLE);
			setState(1728);
			renameTableClause();
			setState(1733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1729);
				match(COMMA);
				setState(1730);
				renameTableClause();
				}
				}
				setState(1735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1736);
			tableName();
			setState(1737);
			match(TO);
			setState(1738);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1740);
			match(TRUNCATE);
			setState(1742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(1741);
				match(TABLE);
				}
			}

			setState(1744);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_deleteStatement);
		try {
			setState(1748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1746);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1747);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			match(INSERT);
			setState(1752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				setState(1751);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1754);
				match(IGNORE);
				}
			}

			setState(1758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1757);
				match(INTO);
				}
			}

			setState(1760);
			tableName();
			setState(1767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1761);
				match(PARTITION);
				setState(1762);
				match(LR_BRACKET);
				setState(1764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
					{
					setState(1763);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(1766);
				match(RR_BRACKET);
				}
			}

			setState(1785);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(1773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(1769);
					match(LR_BRACKET);
					setState(1770);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(1771);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1775);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(1776);
				match(SET);
				setState(1777);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(1782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1778);
					match(COMMA);
					setState(1779);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(1784);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1787);
				match(ON);
				setState(1788);
				match(DUPLICATE);
				setState(1789);
				match(KEY);
				setState(1790);
				match(UPDATE);
				setState(1791);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(1796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1792);
					match(COMMA);
					setState(1793);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(1798);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			match(REPLACE);
			setState(1803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(1802);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1805);
				match(INTO);
				}
			}

			setState(1808);
			tableName();
			setState(1814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1809);
				match(PARTITION);
				setState(1810);
				match(LR_BRACKET);
				setState(1811);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(1812);
				match(RR_BRACKET);
				}
			}

			setState(1832);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(1820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(1816);
					match(LR_BRACKET);
					setState(1817);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(1818);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1822);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(1823);
				match(SET);
				setState(1824);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(1829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1825);
					match(COMMA);
					setState(1826);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(1831);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(1889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1834);
				querySpecification();
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1835);
					lockClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1838);
				queryExpression();
				setState(1840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1839);
					lockClause();
					}
				}

				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1842);
				querySpecificationNointo();
				setState(1844); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1843);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1846); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,262,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(1848);
					match(UNION);
					setState(1850);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1849);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1854);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(1852);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(1853);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(1859);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(1858);
					orderByClause();
					}
					break;
				}
				setState(1862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(1861);
					limitClause();
					}
				}

				setState(1865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1864);
					lockClause();
					}
				}

				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1867);
				queryExpressionNointo();
				setState(1869); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1868);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1871); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(1873);
					match(UNION);
					setState(1875);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1874);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1877);
					queryExpression();
					}
				}

				setState(1881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(1880);
					orderByClause();
					}
					break;
				}
				setState(1884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(1883);
					limitClause();
					}
				}

				setState(1887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1886);
					lockClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_updateStatement);
		try {
			setState(1893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1891);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1892);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_insertStatementValue);
		int _la;
		try {
			setState(1913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1895);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1896);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1897);
				match(LR_BRACKET);
				setState(1899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(1898);
					expressionsWithDefaults();
					}
					break;
				}
				setState(1901);
				match(RR_BRACKET);
				setState(1910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1902);
					match(COMMA);
					setState(1903);
					match(LR_BRACKET);
					setState(1905);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
					case 1:
						{
						setState(1904);
						expressionsWithDefaults();
						}
						break;
					}
					setState(1907);
					match(RR_BRACKET);
					}
					}
					setState(1912);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1915);
			fullColumnName();
			setState(1916);
			match(EQUAL_SYMBOL);
			setState(1919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(1917);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1918);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_assignmentField);
		try {
			setState(1923);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1921);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1922);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_lockClause);
		try {
			setState(1931);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1925);
				match(FOR);
				setState(1926);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(1927);
				match(LOCK);
				setState(1928);
				match(IN);
				setState(1929);
				match(SHARE);
				setState(1930);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1933);
			match(DELETE);
			setState(1935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1934);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(1937);
				match(QUICK);
				}
			}

			setState(1941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1940);
				match(IGNORE);
				}
			}

			setState(1943);
			match(FROM);
			setState(1944);
			tableName();
			setState(1950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1945);
				match(PARTITION);
				setState(1946);
				match(LR_BRACKET);
				setState(1947);
				uidList();
				setState(1948);
				match(RR_BRACKET);
				}
			}

			setState(1954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1952);
				match(WHERE);
				setState(1953);
				expression(0);
				}
			}

			setState(1957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1956);
				orderByClause();
				}
			}

			setState(1961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1959);
				match(LIMIT);
				setState(1960);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1963);
			match(DELETE);
			setState(1965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1964);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				setState(1967);
				match(QUICK);
				}
				break;
			}
			setState(1971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1970);
				match(IGNORE);
				}
			}

			setState(2012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(1973);
				tableName();
				setState(1976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1974);
					match(DOT);
					setState(1975);
					match(STAR);
					}
				}

				setState(1986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1978);
					match(COMMA);
					setState(1979);
					tableName();
					setState(1982);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(1980);
						match(DOT);
						setState(1981);
						match(STAR);
						}
					}

					}
					}
					setState(1988);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1989);
				match(FROM);
				setState(1990);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(1992);
				match(FROM);
				setState(1993);
				tableName();
				setState(1996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1994);
					match(DOT);
					setState(1995);
					match(STAR);
					}
				}

				setState(2006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1998);
					match(COMMA);
					setState(1999);
					tableName();
					setState(2002);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(2000);
						match(DOT);
						setState(2001);
						match(STAR);
						}
					}

					}
					}
					setState(2008);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2009);
				match(USING);
				setState(2010);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2014);
				match(WHERE);
				setState(2015);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2018);
			match(UPDATE);
			setState(2020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(2019);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(2023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2022);
				match(IGNORE);
				}
			}

			setState(2025);
			tableName();
			setState(2030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (RIGHT - 142)) | (1L << (SCHEMA - 142)) | (1L << (STACKED - 142)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2026);
					match(AS);
					}
				}

				setState(2029);
				uid();
				}
			}

			setState(2032);
			match(SET);
			setState(2033);
			updatedElement();
			setState(2038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2034);
				match(COMMA);
				setState(2035);
				updatedElement();
				}
				}
				setState(2040);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2041);
				match(WHERE);
				setState(2042);
				expression(0);
				}
			}

			setState(2046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2045);
				orderByClause();
				}
			}

			setState(2049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2048);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2051);
			match(UPDATE);
			setState(2053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(2052);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(2056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2055);
				match(IGNORE);
				}
			}

			setState(2058);
			tableSources();
			setState(2059);
			match(SET);
			setState(2060);
			updatedElement();
			setState(2065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2061);
				match(COMMA);
				setState(2062);
				updatedElement();
				}
				}
				setState(2067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2068);
				match(WHERE);
				setState(2069);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2072);
			match(ORDER);
			setState(2073);
			match(BY);
			setState(2074);
			orderByExpression();
			setState(2079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2075);
				match(COMMA);
				setState(2076);
				orderByExpression();
				}
				}
				setState(2081);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2082);
			expression(0);
			setState(2084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2083);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2086);
			tableSource();
			setState(2091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2087);
				match(COMMA);
				setState(2088);
				tableSource();
				}
				}
				setState(2093);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(2111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2094);
				tableSourceItem();
				setState(2098);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2095);
						joinPart();
						}
						} 
					}
					setState(2100);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2101);
				match(LR_BRACKET);
				setState(2102);
				tableSourceItem();
				setState(2106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (NATURAL - 107)) | (1L << (RIGHT - 107)) | (1L << (STRAIGHT_JOIN - 107)))) != 0)) {
					{
					{
					setState(2103);
					joinPart();
					}
					}
					setState(2108);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2109);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(2153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2113);
				tableName();
				setState(2119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2114);
					match(PARTITION);
					setState(2115);
					match(LR_BRACKET);
					setState(2116);
					uidList();
					setState(2117);
					match(RR_BRACKET);
					}
				}

				setState(2125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
				case 1:
					{
					setState(2122);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2121);
						match(AS);
						}
					}

					setState(2124);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(2135);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					setState(2127);
					indexHint();
					setState(2132);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2128);
							match(COMMA);
							setState(2129);
							indexHint();
							}
							} 
						}
						setState(2134);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
				case 1:
					{
					setState(2137);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(2138);
					match(LR_BRACKET);
					setState(2139);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(2140);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2144);
					match(AS);
					}
				}

				setState(2147);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2149);
				match(LR_BRACKET);
				setState(2150);
				tableSources();
				setState(2151);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2156);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2157);
				match(FOR);
				setState(2158);
				indexHintType();
				}
			}

			setState(2161);
			match(LR_BRACKET);
			setState(2162);
			uidList();
			setState(2163);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_indexHintType);
		try {
			setState(2170);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2165);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2166);
				match(ORDER);
				setState(2167);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(2168);
				match(GROUP);
				setState(2169);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_joinPart);
		int _la;
		try {
			setState(2216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(2172);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2175);
				match(JOIN);
				setState(2176);
				tableSourceItem();
				setState(2184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(2177);
					match(ON);
					setState(2178);
					expression(0);
					}
					break;
				case 2:
					{
					setState(2179);
					match(USING);
					setState(2180);
					match(LR_BRACKET);
					setState(2181);
					uidList();
					setState(2182);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2186);
				match(STRAIGHT_JOIN);
				setState(2187);
				tableSourceItem();
				setState(2190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					setState(2188);
					match(ON);
					setState(2189);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2192);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2193);
					match(OUTER);
					}
				}

				setState(2196);
				match(JOIN);
				setState(2197);
				tableSourceItem();
				setState(2205);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(2198);
					match(ON);
					setState(2199);
					expression(0);
					}
					break;
				case USING:
					{
					setState(2200);
					match(USING);
					setState(2201);
					match(LR_BRACKET);
					setState(2202);
					uidList();
					setState(2203);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2207);
				match(NATURAL);
				setState(2212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(2208);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2210);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(2209);
						match(OUTER);
						}
					}

					}
				}

				setState(2214);
				match(JOIN);
				setState(2215);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_queryExpression);
		try {
			setState(2226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2218);
				match(LR_BRACKET);
				setState(2219);
				querySpecification();
				setState(2220);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2222);
				match(LR_BRACKET);
				setState(2223);
				queryExpression();
				setState(2224);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_queryExpressionNointo);
		try {
			setState(2236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2228);
				match(LR_BRACKET);
				setState(2229);
				querySpecificationNointo();
				setState(2230);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2232);
				match(LR_BRACKET);
				setState(2233);
				queryExpressionNointo();
				setState(2234);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(2296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2238);
				match(SELECT);
				setState(2242);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2239);
						selectSpec();
						}
						} 
					}
					setState(2244);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
				}
				setState(2245);
				selectElements();
				setState(2247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(2246);
					selectIntoExpression();
					}
				}

				setState(2250);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(2249);
					fromClause();
					}
					break;
				}
				setState(2253);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(2252);
					groupByClause();
					}
					break;
				}
				setState(2256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(2255);
					havingClause();
					}
				}

				setState(2259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(2258);
					windowClause();
					}
				}

				setState(2262);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(2261);
					orderByClause();
					}
					break;
				}
				setState(2265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(2264);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2267);
				match(SELECT);
				setState(2271);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2268);
						selectSpec();
						}
						} 
					}
					setState(2273);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
				}
				setState(2274);
				selectElements();
				setState(2276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(2275);
					fromClause();
					}
					break;
				}
				setState(2279);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(2278);
					groupByClause();
					}
					break;
				}
				setState(2282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(2281);
					havingClause();
					}
				}

				setState(2285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(2284);
					windowClause();
					}
				}

				setState(2288);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(2287);
					orderByClause();
					}
					break;
				}
				setState(2291);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(2290);
					limitClause();
					}
					break;
				}
				setState(2294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(2293);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2298);
			match(SELECT);
			setState(2302);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,357,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2299);
					selectSpec();
					}
					} 
				}
				setState(2304);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,357,_ctx);
			}
			setState(2305);
			selectElements();
			setState(2307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(2306);
				fromClause();
				}
				break;
			}
			setState(2310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(2309);
				groupByClause();
				}
				break;
			}
			setState(2313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(2312);
				havingClause();
				}
			}

			setState(2316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(2315);
				windowClause();
				}
			}

			setState(2319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(2318);
				orderByClause();
				}
				break;
			}
			setState(2322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(2321);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2324);
			match(UNION);
			setState(2326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2325);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2328);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2330);
			match(UNION);
			setState(2332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2331);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2336);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(2334);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(2335);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_selectSpec);
		int _la;
		try {
			setState(2346);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2338);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2339);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2340);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(2341);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(2342);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2343);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2344);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(2345);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				setState(2348);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(2349);
				selectElement();
				}
				break;
			}
			setState(2356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2352);
				match(COMMA);
				setState(2353);
				selectElement();
				}
				}
				setState(2358);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_selectElement);
		int _la;
		try {
			setState(2388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2359);
				fullId();
				setState(2360);
				match(DOT);
				setState(2361);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2363);
				fullColumnName();
				setState(2368);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(2365);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2364);
						match(AS);
						}
					}

					setState(2367);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2370);
				functionCall();
				setState(2375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(2372);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2371);
						match(AS);
						}
					}

					setState(2374);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2379);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(2377);
					match(LOCAL_ID);
					setState(2378);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(2381);
				expression(0);
				setState(2386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(2383);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2382);
						match(AS);
						}
					}

					setState(2385);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_selectIntoExpression);
		int _la;
		try {
			setState(2426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2390);
				match(INTO);
				setState(2391);
				assignmentField();
				setState(2396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2392);
					match(COMMA);
					setState(2393);
					assignmentField();
					}
					}
					setState(2398);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2399);
				match(INTO);
				setState(2400);
				match(DUMPFILE);
				setState(2401);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(2402);
				match(INTO);
				setState(2403);
				match(OUTFILE);
				setState(2404);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(2408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(2405);
					match(CHARACTER);
					setState(2406);
					match(SET);
					setState(2407);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(2416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(2410);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2412); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2411);
						selectFieldsInto();
						}
						}
						setState(2414); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(2424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(2418);
					match(LINES);
					setState(2420); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2419);
						selectLinesInto();
						}
						}
						setState(2422); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_selectFieldsInto);
		int _la;
		try {
			setState(2440);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2428);
				match(TERMINATED);
				setState(2429);
				match(BY);
				setState(2430);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(2431);
					match(OPTIONALLY);
					}
				}

				setState(2434);
				match(ENCLOSED);
				setState(2435);
				match(BY);
				setState(2436);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2437);
				match(ESCAPED);
				setState(2438);
				match(BY);
				setState(2439);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_selectLinesInto);
		try {
			setState(2448);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2442);
				match(STARTING);
				setState(2443);
				match(BY);
				setState(2444);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(2445);
				match(TERMINATED);
				setState(2446);
				match(BY);
				setState(2447);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2450);
				match(FROM);
				setState(2451);
				tableSources();
				}
			}

			setState(2456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2454);
				match(WHERE);
				setState(2455);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2458);
			match(GROUP);
			setState(2459);
			match(BY);
			setState(2460);
			groupByItem();
			setState(2465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2461);
				match(COMMA);
				setState(2462);
				groupByItem();
				}
				}
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2468);
				match(WITH);
				setState(2469);
				match(ROLLUP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2472);
			match(HAVING);
			setState(2473);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(MySqlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(MySqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(MySqlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_windowClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2475);
			match(WINDOW);
			setState(2476);
			windowName();
			setState(2477);
			match(AS);
			setState(2478);
			match(LR_BRACKET);
			setState(2479);
			windowSpec();
			setState(2480);
			match(RR_BRACKET);
			setState(2490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2481);
				match(COMMA);
				setState(2482);
				windowName();
				setState(2483);
				match(AS);
				setState(2484);
				match(LR_BRACKET);
				setState(2485);
				windowSpec();
				setState(2486);
				match(RR_BRACKET);
				}
				}
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			expression(0);
			setState(2495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2494);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2497);
			match(LIMIT);
			setState(2508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				setState(2501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(2498);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(2499);
					match(COMMA);
					}
					break;
				}
				setState(2503);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(2504);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(2505);
				match(OFFSET);
				setState(2506);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_limitClauseAtom);
		try {
			setState(2513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2510);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2511);
				mysqlVariable();
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(2512);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_routineBody);
		try {
			setState(2517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2515);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2516);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				setState(2519);
				uid();
				setState(2520);
				match(COLON_SYMB);
				}
				break;
			}
			setState(2524);
			match(BEGIN);
			setState(2563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(2530);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2525);
						declareVariable();
						setState(2526);
						match(SEMI);
						}
						} 
					}
					setState(2532);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
				}
				setState(2538);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2533);
						declareCondition();
						setState(2534);
						match(SEMI);
						}
						} 
					}
					setState(2540);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
				}
				setState(2546);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2541);
						declareCursor();
						setState(2542);
						match(SEMI);
						}
						} 
					}
					setState(2548);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
				}
				setState(2554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(2549);
					declareHandler();
					setState(2550);
					match(SEMI);
					}
					}
					setState(2556);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2560);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2557);
						procedureSqlStatement();
						}
						} 
					}
					setState(2562);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
				}
				}
				break;
			}
			setState(2565);
			match(END);
			setState(2567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2566);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2569);
			match(CASE);
			setState(2572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(2570);
				uid();
				}
				break;
			case 2:
				{
				setState(2571);
				expression(0);
				}
				break;
			}
			setState(2575); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2574);
				caseAlternative();
				}
				}
				setState(2577); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(2585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2579);
				match(ELSE);
				setState(2581); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2580);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2583); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,408,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(2587);
			match(END);
			setState(2588);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			match(IF);
			setState(2591);
			expression(0);
			setState(2592);
			match(THEN);
			setState(2594); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2593);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2596); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,410,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(2598);
				elifAlternative();
				}
				}
				setState(2603);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2604);
				match(ELSE);
				setState(2606); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2605);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2608); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,412,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(2612);
			match(END);
			setState(2613);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2615);
			match(ITERATE);
			setState(2616);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2618);
			match(LEAVE);
			setState(2619);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2621);
				uid();
				setState(2622);
				match(COLON_SYMB);
				}
			}

			setState(2626);
			match(LOOP);
			setState(2628); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2627);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2630); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,415,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2632);
			match(END);
			setState(2633);
			match(LOOP);
			setState(2635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2634);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2637);
				uid();
				setState(2638);
				match(COLON_SYMB);
				}
			}

			setState(2642);
			match(REPEAT);
			setState(2644); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2643);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2646); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,418,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2648);
			match(UNTIL);
			setState(2649);
			expression(0);
			setState(2650);
			match(END);
			setState(2651);
			match(REPEAT);
			setState(2653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2652);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2655);
			match(RETURN);
			setState(2656);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2658);
				uid();
				setState(2659);
				match(COLON_SYMB);
				}
			}

			setState(2663);
			match(WHILE);
			setState(2664);
			expression(0);
			setState(2665);
			match(DO);
			setState(2667); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2666);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2669); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,421,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2671);
			match(END);
			setState(2672);
			match(WHILE);
			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (VIA - 1040)) | (1L << (LASTVAL - 1040)) | (1L << (NEXTVAL - 1040)) | (1L << (SETVAL - 1040)) | (1L << (PREVIOUS - 1040)) | (1L << (PERSISTENT - 1040)) | (1L << (BINLOG_MONITOR - 1040)) | (1L << (BINLOG_REPLAY - 1040)) | (1L << (FEDERATED_ADMIN - 1040)) | (1L << (READ_ONLY_ADMIN - 1040)) | (1L << (REPLICA - 1040)) | (1L << (REPLICATION_MASTER_ADMIN - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1120)) & ~0x3f) == 0 && ((1L << (_la - 1120)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1120)) | (1L << (STRING_LITERAL - 1120)) | (1L << (ID - 1120)) | (1L << (REVERSE_QUOTE_ID - 1120)) | (1L << (ENCRYPTED - 1120)) | (1L << (ENCRYPTION_KEY_ID - 1120)))) != 0)) {
				{
				setState(2673);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_cursorStatement);
		int _la;
		try {
			setState(2691);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2676);
				match(CLOSE);
				setState(2677);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2678);
				match(FETCH);
				setState(2683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(2680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(2679);
						match(NEXT);
						}
					}

					setState(2682);
					match(FROM);
					}
					break;
				}
				setState(2685);
				uid();
				setState(2686);
				match(INTO);
				setState(2687);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2689);
				match(OPEN);
				setState(2690);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2693);
			match(DECLARE);
			setState(2694);
			uidList();
			setState(2695);
			dataType();
			setState(2698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2696);
				match(DEFAULT);
				setState(2697);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			match(DECLARE);
			setState(2701);
			uid();
			setState(2702);
			match(CONDITION);
			setState(2703);
			match(FOR);
			setState(2710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(2704);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(2705);
				match(SQLSTATE);
				setState(2707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(2706);
					match(VALUE);
					}
				}

				setState(2709);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712);
			match(DECLARE);
			setState(2713);
			uid();
			setState(2714);
			match(CURSOR);
			setState(2715);
			match(FOR);
			setState(2716);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2718);
			match(DECLARE);
			setState(2719);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2720);
			match(HANDLER);
			setState(2721);
			match(FOR);
			setState(2722);
			handlerConditionValue();
			setState(2727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2723);
				match(COMMA);
				setState(2724);
				handlerConditionValue();
				}
				}
				setState(2729);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2730);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerConditionValue);
		int _la;
		try {
			setState(2743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2732);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2733);
				match(SQLSTATE);
				setState(2735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(2734);
					match(VALUE);
					}
				}

				setState(2737);
				match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2738);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2739);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2740);
				match(NOT);
				setState(2741);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2742);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(2745);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(2746);
				sqlStatement();
				}
				break;
			}
			setState(2749);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2751);
			match(WHEN);
			setState(2754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(2752);
				constant();
				}
				break;
			case 2:
				{
				setState(2753);
				expression(0);
				}
				break;
			}
			setState(2756);
			match(THEN);
			setState(2758); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2757);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2760); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,434,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(MySqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2762);
			match(ELSEIF);
			setState(2763);
			expression(0);
			setState(2764);
			match(THEN);
			setState(2766); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2765);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2768); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2770);
			uid();
			setState(2774);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				setState(2771);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(2772);
				match(DOT);
				setState(2773);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2776);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_fullColumnName);
		try {
			setState(2790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2778);
				uid();
				setState(2783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					setState(2779);
					dottedId();
					setState(2781);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
					case 1:
						{
						setState(2780);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2785);
				matchWildcard();
				setState(2786);
				dottedId();
				setState(2788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(2787);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(2794);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(2792);
					uid();
					}
					break;
				case 2:
					{
					setState(2793);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(2800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2796);
					match(LR_BRACKET);
					setState(2797);
					decimalLiteral();
					setState(2798);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(2802);
				expression(0);
				}
				break;
			}
			setState(2806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2805);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2808);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_charsetName);
		try {
			setState(2814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2810);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2811);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2812);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2813);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_collationName);
		try {
			setState(2818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2816);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2817);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2820);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 752)) & ~0x3f) == 0 && ((1L << (_la - 752)) & ((1L << (ARCHIVE - 752)) | (1L << (BLACKHOLE - 752)) | (1L << (CSV - 752)) | (1L << (FEDERATED - 752)) | (1L << (INNODB - 752)) | (1L << (MEMORY - 752)) | (1L << (MRG_MYISAM - 752)) | (1L << (MYISAM - 752)) | (1L << (NDB - 752)) | (1L << (NDBCLUSTER - 752)) | (1L << (PERFORMANCE_SCHEMA - 752)) | (1L << (TOKUDB - 752)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_uid);
		try {
			setState(2825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2822);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2823);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2824);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_simpleId);
		try {
			setState(2836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2827);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2828);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2829);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2830);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2831);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2832);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2833);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2834);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2835);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_dottedId);
		try {
			setState(2841);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2838);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2839);
				match(DOT);
				setState(2840);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843);
			_la = _input.LA(1);
			if ( !(((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (ZERO_DECIMAL - 1113)) | (1L << (ONE_DECIMAL - 1113)) | (1L << (TWO_DECIMAL - 1113)) | (1L << (DECIMAL_LITERAL - 1113)) | (1L << (REAL_LITERAL - 1113)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_fileSizeLiteral);
		try {
			setState(2847);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2845);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2846);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(2872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2854);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(2850);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(2849);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(2852);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(2853);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2857); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2856);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2859); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2866);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(2862);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(2861);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(2864);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(2865);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2870);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(2868);
					match(COLLATE);
					setState(2869);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2874);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(2876);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(2879);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2881);
				match(NOT);
				}
			}

			setState(2884);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_constant);
		int _la;
		try {
			setState(2898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2886);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2887);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2888);
				match(MINUS);
				setState(2889);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2890);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2891);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2892);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2893);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2894);
					match(NOT);
					}
				}

				setState(2897);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> SIGNED() { return getTokens(MySqlParser.SIGNED); }
		public TerminalNode SIGNED(int i) {
			return getToken(MySqlParser.SIGNED, i);
		}
		public List<TerminalNode> UNSIGNED() { return getTokens(MySqlParser.UNSIGNED); }
		public TerminalNode UNSIGNED(int i) {
			return getToken(MySqlParser.UNSIGNED, i);
		}
		public List<TerminalNode> ZEROFILL() { return getTokens(MySqlParser.ZEROFILL); }
		public TerminalNode ZEROFILL(int i) {
			return getToken(MySqlParser.ZEROFILL, i);
		}
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_dataType);
		int _la;
		try {
			setState(3022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2900);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (CHAR - 213)) | (1L << (VARCHAR - 213)) | (1L << (NVARCHAR - 213)) | (1L << (LONG - 213)) | (1L << (TINYTEXT - 213)) | (1L << (TEXT - 213)) | (1L << (MEDIUMTEXT - 213)) | (1L << (LONGTEXT - 213)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(2901);
					match(VARYING);
					}
				}

				setState(2905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(2904);
					lengthOneDimension();
					}
					break;
				}
				setState(2908);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(2907);
					match(BINARY);
					}
					break;
				}
				setState(2913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(2910);
					charSet();
					setState(2911);
					charsetName();
					}
				}

				setState(2918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(2915);
					match(COLLATE);
					setState(2916);
					collationName();
					}
					break;
				case 2:
					{
					setState(2917);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2920);
				match(NATIONAL);
				setState(2921);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(2922);
					lengthOneDimension();
					}
					break;
				}
				setState(2926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2925);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2928);
				match(NCHAR);
				setState(2929);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(2931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(2930);
					lengthOneDimension();
					}
					break;
				}
				setState(2934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2933);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2936);
				match(NATIONAL);
				setState(2937);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2938);
				match(VARYING);
				setState(2940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(2939);
					lengthOneDimension();
					}
					break;
				}
				setState(2943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2942);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2945);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TINYINT - 187)) | (1L << (SMALLINT - 187)) | (1L << (MEDIUMINT - 187)) | (1L << (MIDDLEINT - 187)) | (1L << (INT - 187)) | (1L << (INT1 - 187)) | (1L << (INT2 - 187)) | (1L << (INT3 - 187)) | (1L << (INT4 - 187)) | (1L << (INT8 - 187)) | (1L << (INTEGER - 187)) | (1L << (BIGINT - 187)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(2946);
					lengthOneDimension();
					}
					break;
				}
				setState(2952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2949);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2954);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2955);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(2957);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
				case 1:
					{
					setState(2956);
					lengthTwoDimension();
					}
					break;
				}
				setState(2962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2959);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2964);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2965);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(2967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(2966);
					match(PRECISION);
					}
				}

				setState(2970);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					setState(2969);
					lengthTwoDimension();
					}
					break;
				}
				setState(2975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2972);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2977);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2978);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (FLOAT - 202)) | (1L << (FLOAT4 - 202)) | (1L << (FLOAT8 - 202)) | (1L << (DECIMAL - 202)) | (1L << (DEC - 202)) | (1L << (NUMERIC - 202)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(2979);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(2985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2982);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2987);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2988);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TINYBLOB - 208)) | (1L << (MEDIUMBLOB - 208)) | (1L << (LONGBLOB - 208)) | (1L << (SERIAL - 208)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2989);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (TIME - 209)) | (1L << (TIMESTAMP - 209)) | (1L << (DATETIME - 209)) | (1L << (YEAR - 209)) | (1L << (BINARY - 209)) | (1L << (VARBINARY - 209)) | (1L << (BLOB - 209)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2991);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(2990);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2993);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2994);
				collectionOptions();
				setState(2996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2995);
					match(BINARY);
					}
				}

				setState(3001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(2998);
					charSet();
					setState(2999);
					charsetName();
					}
				}

				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(3003);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (GEOMETRYCOLLECTION - 768)) | (1L << (GEOMCOLLECTION - 768)) | (1L << (GEOMETRY - 768)) | (1L << (LINESTRING - 768)) | (1L << (MULTILINESTRING - 768)) | (1L << (MULTIPOINT - 768)) | (1L << (MULTIPOLYGON - 768)) | (1L << (POINT - 768)) | (1L << (POLYGON - 768)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(3004);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(3006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(3005);
					match(VARCHAR);
					}
				}

				setState(3009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(3008);
					match(BINARY);
					}
				}

				setState(3014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(3011);
					charSet();
					setState(3012);
					charsetName();
					}
				}

				setState(3018);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
				case 1:
					{
					setState(3016);
					match(COLLATE);
					setState(3017);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(3020);
				match(LONG);
				setState(3021);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3024);
			match(LR_BRACKET);
			setState(3025);
			match(STRING_LITERAL);
			setState(3030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3026);
				match(COMMA);
				setState(3027);
				match(STRING_LITERAL);
				}
				}
				setState(3032);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3033);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ARRAY() { return getToken(MySqlParser.ARRAY, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_convertedDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3057);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				setState(3035);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(3036);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				setState(3039);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(3040);
					lengthOneDimension();
					}
				}

				setState(3046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(3043);
					charSet();
					setState(3044);
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				setState(3048);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (INT - 191)) | (1L << (INTEGER - 191)) | (1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				{
				setState(3049);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(3051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(3050);
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				setState(3053);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(3054);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY) {
				{
				setState(3059);
				match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062);
			match(LR_BRACKET);
			setState(3063);
			decimalLiteral();
			setState(3064);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3066);
			match(LR_BRACKET);
			setState(3067);
			decimalLiteral();
			setState(3068);
			match(COMMA);
			setState(3069);
			decimalLiteral();
			setState(3070);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(LR_BRACKET);
			setState(3073);
			decimalLiteral();
			setState(3076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3074);
				match(COMMA);
				setState(3075);
				decimalLiteral();
				}
			}

			setState(3078);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3080);
			uid();
			setState(3085);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,499,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3081);
					match(COMMA);
					setState(3082);
					uid();
					}
					} 
				}
				setState(3087);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,499,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3088);
			tableName();
			setState(3093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3089);
				match(COMMA);
				setState(3090);
				tableName();
				}
				}
				setState(3095);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3096);
			match(LR_BRACKET);
			setState(3097);
			indexColumnName();
			setState(3102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3098);
				match(COMMA);
				setState(3099);
				indexColumnName();
				}
				}
				setState(3104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3105);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3107);
			expression(0);
			setState(3112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3108);
				match(COMMA);
				setState(3109);
				expression(0);
				}
				}
				setState(3114);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115);
			expressionOrDefault();
			setState(3120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3116);
				match(COMMA);
				setState(3117);
				expressionOrDefault();
				}
				}
				setState(3122);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode PREVIOUS() { return getToken(MySqlParser.PREVIOUS, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_defaultValue);
		int _la;
		try {
			setState(3158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3123);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3124);
				match(CAST);
				setState(3125);
				match(LR_BRACKET);
				setState(3126);
				expression(0);
				setState(3127);
				match(AS);
				setState(3128);
				convertedDataType();
				setState(3129);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(3131);
					unaryOperator();
					}
					break;
				}
				setState(3134);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3135);
				currentTimestamp();
				setState(3139);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(3136);
					match(ON);
					setState(3137);
					match(UPDATE);
					setState(3138);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3141);
				match(LR_BRACKET);
				setState(3142);
				expression(0);
				setState(3143);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3145);
				_la = _input.LA(1);
				if ( !(_la==LASTVAL || _la==NEXTVAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3146);
				match(LR_BRACKET);
				setState(3147);
				fullId();
				setState(3148);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3150);
				match(LR_BRACKET);
				setState(3151);
				_la = _input.LA(1);
				if ( !(_la==NEXT || _la==PREVIOUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3152);
				match(VALUE);
				setState(3153);
				match(FOR);
				setState(3154);
				fullId();
				setState(3155);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3157);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case LOCALTIMESTAMP:
				{
				setState(3160);
				_la = _input.LA(1);
				if ( !(((((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & ((1L << (CURRENT_TIMESTAMP - 303)) | (1L << (LOCALTIME - 303)) | (1L << (CURDATE - 303)) | (1L << (CURTIME - 303)) | (1L << (LOCALTIMESTAMP - 303)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3161);
					match(LR_BRACKET);
					setState(3163);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (ZERO_DECIMAL - 1113)) | (1L << (ONE_DECIMAL - 1113)) | (1L << (TWO_DECIMAL - 1113)) | (1L << (DECIMAL_LITERAL - 1113)) | (1L << (REAL_LITERAL - 1113)))) != 0)) {
						{
						setState(3162);
						decimalLiteral();
						}
					}

					setState(3165);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(3168);
				match(NOW);
				setState(3169);
				match(LR_BRACKET);
				setState(3171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (ZERO_DECIMAL - 1113)) | (1L << (ONE_DECIMAL - 1113)) | (1L << (TWO_DECIMAL - 1113)) | (1L << (DECIMAL_LITERAL - 1113)) | (1L << (REAL_LITERAL - 1113)))) != 0)) {
					{
					setState(3170);
					decimalLiteral();
					}
				}

				setState(3173);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_expressionOrDefault);
		try {
			setState(3178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3176);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3177);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180);
			match(IF);
			setState(3181);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3183);
			match(IF);
			setState(3184);
			match(NOT);
			setState(3185);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_functionCall);
		try {
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3187);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3188);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3189);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3190);
				scalarFunctionName();
				setState(3191);
				match(LR_BRACKET);
				setState(3193);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
				case 1:
					{
					setState(3192);
					functionArgs();
					}
					break;
				}
				setState(3195);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3197);
				fullId();
				setState(3198);
				match(LR_BRACKET);
				setState(3200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
				case 1:
					{
					setState(3199);
					functionArgs();
					}
					break;
				}
				setState(3202);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3204);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(MySqlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public List<TerminalNode> ERROR() { return getTokens(MySqlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(MySqlParser.ERROR, i);
		}
		public List<TerminalNode> NULL_LITERAL() { return getTokens(MySqlParser.NULL_LITERAL); }
		public TerminalNode NULL_LITERAL(int i) {
			return getToken(MySqlParser.NULL_LITERAL, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<DefaultValueContext> defaultValue() {
			return getRuleContexts(DefaultValueContext.class);
		}
		public DefaultValueContext defaultValue(int i) {
			return getRuleContext(DefaultValueContext.class,i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonValueFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonValueFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseExpressionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseExpressionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_specificFunction);
		int _la;
		try {
			setState(3399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3207);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (CURRENT_DATE - 301)) | (1L << (CURRENT_TIME - 301)) | (1L << (CURRENT_TIMESTAMP - 301)) | (1L << (LOCALTIME - 301)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3210);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(3208);
					match(LR_BRACKET);
					setState(3209);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3212);
				match(CONVERT);
				setState(3213);
				match(LR_BRACKET);
				setState(3214);
				expression(0);
				setState(3215);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(3216);
				convertedDataType();
				setState(3217);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3219);
				match(CONVERT);
				setState(3220);
				match(LR_BRACKET);
				setState(3221);
				expression(0);
				setState(3222);
				match(USING);
				setState(3223);
				charsetName();
				setState(3224);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3226);
				match(CAST);
				setState(3227);
				match(LR_BRACKET);
				setState(3228);
				expression(0);
				setState(3229);
				match(AS);
				setState(3230);
				convertedDataType();
				setState(3231);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3233);
				match(VALUES);
				setState(3234);
				match(LR_BRACKET);
				setState(3235);
				fullColumnName();
				setState(3236);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3238);
				match(CASE);
				setState(3239);
				expression(0);
				setState(3241); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3240);
					caseFuncAlternative();
					}
					}
					setState(3243); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3245);
					match(ELSE);
					setState(3246);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(3249);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3251);
				match(CASE);
				setState(3253); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3252);
					caseFuncAlternative();
					}
					}
					setState(3255); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3257);
					match(ELSE);
					setState(3258);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(3261);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(3263);
				match(CHAR);
				setState(3264);
				match(LR_BRACKET);
				setState(3265);
				functionArgs();
				setState(3268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3266);
					match(USING);
					setState(3267);
					charsetName();
					}
				}

				setState(3270);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(3272);
				match(POSITION);
				setState(3273);
				match(LR_BRACKET);
				setState(3276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(3274);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3275);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(3278);
				match(IN);
				setState(3281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(3279);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3280);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(3283);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(3285);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3286);
				match(LR_BRACKET);
				setState(3289);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(3287);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3288);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(3291);
				match(FROM);
				setState(3294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
				case 1:
					{
					setState(3292);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(3293);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(3301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3296);
					match(FOR);
					setState(3299);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
					case 1:
						{
						setState(3297);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(3298);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(3303);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(3305);
				match(TRIM);
				setState(3306);
				match(LR_BRACKET);
				setState(3307);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3310);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
				case 1:
					{
					setState(3308);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3309);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(3312);
				match(FROM);
				setState(3315);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(3313);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3314);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(3317);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(3319);
				match(TRIM);
				setState(3320);
				match(LR_BRACKET);
				setState(3323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
				case 1:
					{
					setState(3321);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3322);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(3325);
				match(FROM);
				setState(3328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(3326);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3327);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(3330);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(3332);
				match(WEIGHT_STRING);
				setState(3333);
				match(LR_BRACKET);
				setState(3336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(3334);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(3335);
					expression(0);
					}
					break;
				}
				setState(3344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3338);
					match(AS);
					setState(3339);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3340);
					match(LR_BRACKET);
					setState(3341);
					decimalLiteral();
					setState(3342);
					match(RR_BRACKET);
					}
				}

				setState(3347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(3346);
					levelsInWeightString();
					}
				}

				setState(3349);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(3351);
				match(EXTRACT);
				setState(3352);
				match(LR_BRACKET);
				setState(3353);
				intervalType();
				setState(3354);
				match(FROM);
				setState(3357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(3355);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(3356);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(3359);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(3361);
				match(GET_FORMAT);
				setState(3362);
				match(LR_BRACKET);
				setState(3363);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (DATETIME - 208)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3364);
				match(COMMA);
				setState(3365);
				stringLiteral();
				setState(3366);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(3368);
				match(JSON_VALUE);
				setState(3369);
				match(LR_BRACKET);
				setState(3370);
				expression(0);
				setState(3371);
				match(COMMA);
				setState(3372);
				expression(0);
				setState(3375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(3373);
					match(RETURNING);
					setState(3374);
					convertedDataType();
					}
				}

				setState(3385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
				case 1:
					{
					setState(3381);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(3377);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(3378);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(3379);
						match(DEFAULT);
						setState(3380);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3383);
					match(ON);
					setState(3384);
					match(EMPTY);
					}
					break;
				}
				setState(3395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(3391);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(3387);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(3388);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(3389);
						match(DEFAULT);
						setState(3390);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3393);
					match(ON);
					setState(3394);
					match(ERROR);
					}
				}

				setState(3397);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401);
			match(WHEN);
			setState(3402);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(3403);
			match(THEN);
			setState(3404);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_levelsInWeightString);
		int _la;
		try {
			setState(3420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3406);
				match(LEVEL);
				setState(3407);
				levelInWeightListElement();
				setState(3412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3408);
					match(COMMA);
					setState(3409);
					levelInWeightListElement();
					}
					}
					setState(3414);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3415);
				match(LEVEL);
				setState(3416);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(3417);
				match(MINUS);
				setState(3418);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3422);
			decimalLiteral();
			setState(3424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(3423);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(3485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(3426);
				_la = _input.LA(1);
				if ( !(((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (AVG - 274)) | (1L << (MAX - 274)) | (1L << (MIN - 274)) | (1L << (SUM - 274)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3427);
				match(LR_BRACKET);
				setState(3429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					setState(3428);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3431);
				functionArg();
				setState(3432);
				match(RR_BRACKET);
				setState(3434);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
				case 1:
					{
					setState(3433);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3436);
				match(COUNT);
				setState(3437);
				match(LR_BRACKET);
				setState(3445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
				case 1:
					{
					setState(3438);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(3440);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
					case 1:
						{
						setState(3439);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(3442);
					functionArg();
					}
					break;
				case 3:
					{
					setState(3443);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(3444);
					functionArgs();
					}
					break;
				}
				setState(3447);
				match(RR_BRACKET);
				setState(3449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
				case 1:
					{
					setState(3448);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3451);
				_la = _input.LA(1);
				if ( !(((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3452);
				match(LR_BRACKET);
				setState(3454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
				case 1:
					{
					setState(3453);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(3456);
				functionArg();
				setState(3457);
				match(RR_BRACKET);
				setState(3459);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
				case 1:
					{
					setState(3458);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3461);
				match(GROUP_CONCAT);
				setState(3462);
				match(LR_BRACKET);
				setState(3464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
				case 1:
					{
					setState(3463);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(3466);
				functionArgs();
				setState(3477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3467);
					match(ORDER);
					setState(3468);
					match(BY);
					setState(3469);
					orderByExpression();
					setState(3474);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3470);
						match(COMMA);
						setState(3471);
						orderByExpression();
						}
						}
						setState(3476);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(3479);
					match(SEPARATOR);
					setState(3480);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(3483);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(3525);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3487);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3488);
				match(LR_BRACKET);
				setState(3489);
				expression(0);
				setState(3492);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
				case 1:
					{
					setState(3490);
					match(COMMA);
					setState(3491);
					decimalLiteral();
					}
					break;
				}
				setState(3496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3494);
					match(COMMA);
					setState(3495);
					decimalLiteral();
					}
				}

				setState(3498);
				match(RR_BRACKET);
				setState(3499);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3501);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3502);
				match(LR_BRACKET);
				setState(3503);
				expression(0);
				setState(3504);
				match(RR_BRACKET);
				setState(3505);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3507);
				_la = _input.LA(1);
				if ( !(((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (CUME_DIST - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (PERCENT_RANK - 279)) | (1L << (RANK - 279)) | (1L << (ROW_NUMBER - 279)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3508);
				match(LR_BRACKET);
				setState(3509);
				match(RR_BRACKET);
				setState(3510);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3511);
				match(NTH_VALUE);
				setState(3512);
				match(LR_BRACKET);
				setState(3513);
				expression(0);
				setState(3514);
				match(COMMA);
				setState(3515);
				decimalLiteral();
				setState(3516);
				match(RR_BRACKET);
				setState(3517);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3519);
				match(NTILE);
				setState(3520);
				match(LR_BRACKET);
				setState(3521);
				decimalLiteral();
				setState(3522);
				match(RR_BRACKET);
				setState(3523);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3527);
			match(OVER);
			setState(3534);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(3528);
				match(LR_BRACKET);
				setState(3530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(3529);
					windowSpec();
					}
					break;
				}
				setState(3532);
				match(RR_BRACKET);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(3533);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(3536);
				windowName();
				}
				break;
			}
			setState(3540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3539);
				partitionClause();
				}
			}

			setState(3543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3542);
				orderByClause();
				}
			}

			setState(3546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(3545);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3548);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3550);
			frameUnits();
			setState(3551);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3553);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_frameExtent);
		try {
			setState(3557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3555);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3556);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3559);
			match(BETWEEN);
			setState(3560);
			frameRange();
			setState(3561);
			match(AND);
			setState(3562);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySqlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_frameRange);
		int _la;
		try {
			setState(3571);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3564);
				match(CURRENT);
				setState(3565);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3566);
				match(UNBOUNDED);
				setState(3567);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3568);
				expression(0);
				setState(3569);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			match(PARTITION);
			setState(3574);
			match(BY);
			setState(3575);
			expression(0);
			setState(3580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3576);
				match(COMMA);
				setState(3577);
				expression(0);
				}
				}
				setState(3582);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_scalarFunctionName);
		try {
			setState(3606);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3583);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(3584);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3585);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3586);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(3587);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(3588);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(3589);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(3590);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(3591);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(3592);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(3593);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(3594);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(3595);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(3596);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(3597);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(3598);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(3599);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(3600);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(3601);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(3602);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(3603);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(3604);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(3605);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3609);
			match(LR_BRACKET);
			setState(3610);
			functionArg();
			setState(3611);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				setState(3613);
				constant();
				}
				break;
			case 2:
				{
				setState(3614);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(3615);
				functionCall();
				}
				break;
			case 4:
				{
				setState(3616);
				expression(0);
				}
				break;
			}
			setState(3628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3619);
				match(COMMA);
				setState(3624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
				case 1:
					{
					setState(3620);
					constant();
					}
					break;
				case 2:
					{
					setState(3621);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(3622);
					functionCall();
					}
					break;
				case 4:
					{
					setState(3623);
					expression(0);
					}
					break;
				}
				}
				}
				setState(3630);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_functionArg);
		try {
			setState(3635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3631);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3632);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3633);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3634);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 312;
		enterRecursionRule(_localctx, 312, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3638);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3639);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3640);
				predicate(0);
				setState(3641);
				match(IS);
				setState(3643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3642);
					match(NOT);
					}
				}

				setState(3645);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3647);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3656);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(3650);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(3651);
					logicalOperator();
					setState(3652);
					expression(4);
					}
					} 
				}
				setState(3658);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 314;
		enterRecursionRule(_localctx, 314, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(3662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				{
				setState(3660);
				match(LOCAL_ID);
				setState(3661);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(3664);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(3730);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,584,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3728);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3666);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(3667);
						comparisonOperator();
						setState(3668);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3670);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3672);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3671);
							match(NOT);
							}
						}

						setState(3674);
						match(BETWEEN);
						setState(3675);
						predicate(0);
						setState(3676);
						match(AND);
						setState(3677);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3679);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3680);
						match(SOUNDS);
						setState(3681);
						match(LIKE);
						setState(3682);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3683);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3685);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3684);
							match(NOT);
							}
						}

						setState(3687);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3688);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3689);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(3691);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3690);
							match(NOT);
							}
						}

						setState(3693);
						match(IN);
						setState(3694);
						match(LR_BRACKET);
						setState(3697);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
						case 1:
							{
							setState(3695);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(3696);
							expressions();
							}
							break;
						}
						setState(3699);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3701);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(3702);
						match(IS);
						setState(3703);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3704);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3705);
						comparisonOperator();
						setState(3706);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3707);
						match(LR_BRACKET);
						setState(3708);
						selectStatement();
						setState(3709);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3711);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3713);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3712);
							match(NOT);
							}
						}

						setState(3715);
						match(LIKE);
						setState(3716);
						predicate(0);
						setState(3719);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
						case 1:
							{
							setState(3717);
							match(ESCAPE);
							setState(3718);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3721);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3722);
						match(MEMBER);
						setState(3723);
						match(OF);
						setState(3724);
						match(LR_BRACKET);
						setState(3725);
						predicate(0);
						setState(3726);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(3732);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,584,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 316;
		enterRecursionRule(_localctx, 316, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3734);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3735);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3736);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3737);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3738);
				unaryOperator();
				setState(3739);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3741);
				match(BINARY);
				setState(3742);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3743);
				match(LR_BRACKET);
				setState(3744);
				expression(0);
				setState(3749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3745);
					match(COMMA);
					setState(3746);
					expression(0);
					}
					}
					setState(3751);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3752);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3754);
				match(ROW);
				setState(3755);
				match(LR_BRACKET);
				setState(3756);
				expression(0);
				setState(3759); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3757);
					match(COMMA);
					setState(3758);
					expression(0);
					}
					}
					setState(3761); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3763);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3765);
				match(EXISTS);
				setState(3766);
				match(LR_BRACKET);
				setState(3767);
				selectStatement();
				setState(3768);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3770);
				match(LR_BRACKET);
				setState(3771);
				selectStatement();
				setState(3772);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3774);
				match(INTERVAL);
				setState(3775);
				expression(0);
				setState(3776);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3797);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3795);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3780);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3781);
						bitOperator();
						setState(3782);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3784);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3785);
						mathOperator();
						setState(3786);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3788);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3789);
						jsonOperator();
						setState(3790);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3792);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(3793);
						match(COLLATE);
						setState(3794);
						collationName();
						}
						break;
					}
					} 
				}
				setState(3799);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1095)) & ~0x3f) == 0 && ((1L << (_la - 1095)) & ((1L << (PLUS - 1095)) | (1L << (MINUS - 1095)) | (1L << (EXCLAMATION_SYMBOL - 1095)) | (1L << (BIT_NOT_OP - 1095)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_comparisonOperator);
		try {
			setState(3816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3802);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3803);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3804);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3805);
				match(LESS_SYMBOL);
				setState(3806);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3807);
				match(GREATER_SYMBOL);
				setState(3808);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3809);
				match(LESS_SYMBOL);
				setState(3810);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3811);
				match(EXCLAMATION_SYMBOL);
				setState(3812);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3813);
				match(LESS_SYMBOL);
				setState(3814);
				match(EQUAL_SYMBOL);
				setState(3815);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_logicalOperator);
		try {
			setState(3825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(3818);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3819);
				match(BIT_AND_OP);
				setState(3820);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(3821);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(3822);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(3823);
				match(BIT_OR_OP);
				setState(3824);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_bitOperator);
		try {
			setState(3834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3827);
				match(LESS_SYMBOL);
				setState(3828);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3829);
				match(GREATER_SYMBOL);
				setState(3830);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3831);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(3832);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(3833);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3836);
			_la = _input.LA(1);
			if ( !(((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (STAR - 1092)) | (1L << (DIVIDE - 1092)) | (1L << (MODULE - 1092)) | (1L << (PLUS - 1092)) | (1L << (MINUS - 1092)) | (1L << (DIV - 1092)) | (1L << (MOD - 1092)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_jsonOperator);
		try {
			setState(3843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3838);
				match(MINUS);
				setState(3839);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3840);
				match(MINUS);
				setState(3841);
				match(GREATER_SYMBOL);
				setState(3842);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(MySqlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3845);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (ARMSCII8 - 711)) | (1L << (ASCII - 711)) | (1L << (BIG5 - 711)) | (1L << (CP1250 - 711)) | (1L << (CP1251 - 711)) | (1L << (CP1256 - 711)) | (1L << (CP1257 - 711)) | (1L << (CP850 - 711)) | (1L << (CP852 - 711)) | (1L << (CP866 - 711)) | (1L << (CP932 - 711)) | (1L << (DEC8 - 711)) | (1L << (EUCJPMS - 711)) | (1L << (EUCKR - 711)) | (1L << (GB18030 - 711)) | (1L << (GB2312 - 711)) | (1L << (GBK - 711)) | (1L << (GEOSTD8 - 711)) | (1L << (GREEK - 711)) | (1L << (HEBREW - 711)) | (1L << (HP8 - 711)) | (1L << (KEYBCS2 - 711)) | (1L << (KOI8R - 711)) | (1L << (KOI8U - 711)) | (1L << (LATIN1 - 711)) | (1L << (LATIN2 - 711)) | (1L << (LATIN5 - 711)) | (1L << (LATIN7 - 711)) | (1L << (MACCE - 711)) | (1L << (MACROMAN - 711)) | (1L << (SJIS - 711)) | (1L << (SWE7 - 711)) | (1L << (TIS620 - 711)) | (1L << (UCS2 - 711)) | (1L << (UJIS - 711)) | (1L << (UTF16 - 711)) | (1L << (UTF16LE - 711)) | (1L << (UTF32 - 711)) | (1L << (UTF8 - 711)) | (1L << (UTF8MB3 - 711)) | (1L << (UTF8MB4 - 711)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3847);
			_la = _input.LA(1);
			if ( !(((((_la - 764)) & ~0x3f) == 0 && ((1L << (_la - 764)) & ((1L << (REPEATABLE - 764)) | (1L << (COMMITTED - 764)) | (1L << (UNCOMMITTED - 764)) | (1L << (SERIALIZABLE - 764)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3849);
			_la = _input.LA(1);
			if ( !(((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (TABLES - 669)) | (1L << (ROUTINE - 669)) | (1L << (EXECUTE - 669)) | (1L << (FILE - 669)) | (1L << (PROCESS - 669)) | (1L << (RELOAD - 669)) | (1L << (SHUTDOWN - 669)) | (1L << (SUPER - 669)) | (1L << (PRIVILEGES - 669)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3851);
			_la = _input.LA(1);
			if ( !(((((_la - 661)) & ~0x3f) == 0 && ((1L << (_la - 661)) & ((1L << (QUARTER - 661)) | (1L << (MONTH - 661)) | (1L << (DAY - 661)) | (1L << (HOUR - 661)) | (1L << (MINUTE - 661)) | (1L << (WEEK - 661)) | (1L << (SECOND - 661)) | (1L << (MICROSECOND - 661)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3853);
			_la = _input.LA(1);
			if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(MySqlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(MySqlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(MySqlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NOCOPY() { return getToken(MySqlParser.NOCOPY, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(MySqlParser.USA, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode VIA() { return getToken(MySqlParser.VIA, 0); }
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(MySqlParser.SETVAL, 0); }
		public TerminalNode PREVIOUS() { return getToken(MySqlParser.PREVIOUS, 0); }
		public TerminalNode PERSISTENT() { return getToken(MySqlParser.PERSISTENT, 0); }
		public TerminalNode REPLICATION_MASTER_ADMIN() { return getToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0); }
		public TerminalNode REPLICA() { return getToken(MySqlParser.REPLICA, 0); }
		public TerminalNode READ_ONLY_ADMIN() { return getToken(MySqlParser.READ_ONLY_ADMIN, 0); }
		public TerminalNode FEDERATED_ADMIN() { return getToken(MySqlParser.FEDERATED_ADMIN, 0); }
		public TerminalNode BINLOG_MONITOR() { return getToken(MySqlParser.BINLOG_MONITOR, 0); }
		public TerminalNode BINLOG_REPLAY() { return getToken(MySqlParser.BINLOG_REPLAY, 0); }
		public TerminalNode ENCRYPTED() { return getToken(MySqlParser.ENCRYPTED, 0); }
		public TerminalNode ENCRYPTION_KEY_ID() { return getToken(MySqlParser.ENCRYPTION_KEY_ID, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3855);
			_la = _input.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 230)) & ~0x3f) == 0 && ((1L << (_la - 230)) & ((1L << (SERIAL - 230)) | (1L << (AVG - 230)) | (1L << (BIT_AND - 230)) | (1L << (BIT_OR - 230)) | (1L << (BIT_XOR - 230)) | (1L << (COUNT - 230)) | (1L << (GROUP_CONCAT - 230)) | (1L << (MAX - 230)) | (1L << (MIN - 230)) | (1L << (STD - 230)))) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (STDDEV - 294)) | (1L << (STDDEV_POP - 294)) | (1L << (STDDEV_SAMP - 294)) | (1L << (SUM - 294)) | (1L << (VAR_POP - 294)) | (1L << (VAR_SAMP - 294)) | (1L << (VARIANCE - 294)) | (1L << (ACCOUNT - 294)) | (1L << (ACTION - 294)) | (1L << (AFTER - 294)) | (1L << (AGGREGATE - 294)) | (1L << (ALGORITHM - 294)) | (1L << (ANY - 294)) | (1L << (AT - 294)) | (1L << (AUTHORS - 294)) | (1L << (AUTOCOMMIT - 294)) | (1L << (AUTOEXTEND_SIZE - 294)) | (1L << (AUTO_INCREMENT - 294)) | (1L << (AVG_ROW_LENGTH - 294)) | (1L << (BEGIN - 294)) | (1L << (BINLOG - 294)) | (1L << (BIT - 294)) | (1L << (BLOCK - 294)) | (1L << (BOOL - 294)) | (1L << (BOOLEAN - 294)) | (1L << (BTREE - 294)) | (1L << (CACHE - 294)) | (1L << (CASCADED - 294)) | (1L << (CHAIN - 294)) | (1L << (CHANGED - 294)) | (1L << (CHANNEL - 294)) | (1L << (CHECKSUM - 294)) | (1L << (PAGE_CHECKSUM - 294)) | (1L << (CIPHER - 294)) | (1L << (CLASS_ORIGIN - 294)) | (1L << (CLIENT - 294)) | (1L << (CLOSE - 294)) | (1L << (CLUSTERING - 294)) | (1L << (COALESCE - 294)) | (1L << (CODE - 294)) | (1L << (COLUMNS - 294)) | (1L << (COLUMN_FORMAT - 294)) | (1L << (COLUMN_NAME - 294)) | (1L << (COMMENT - 294)) | (1L << (COMMIT - 294)))) != 0) || ((((_la - 358)) & ~0x3f) == 0 && ((1L << (_la - 358)) & ((1L << (COMPACT - 358)) | (1L << (COMPLETION - 358)) | (1L << (COMPRESSED - 358)) | (1L << (COMPRESSION - 358)) | (1L << (CONCURRENT - 358)) | (1L << (CONNECT - 358)) | (1L << (CONNECTION - 358)) | (1L << (CONSISTENT - 358)) | (1L << (CONSTRAINT_CATALOG - 358)) | (1L << (CONSTRAINT_SCHEMA - 358)) | (1L << (CONSTRAINT_NAME - 358)) | (1L << (CONTAINS - 358)) | (1L << (CONTEXT - 358)) | (1L << (CONTRIBUTORS - 358)) | (1L << (COPY - 358)) | (1L << (CPU - 358)) | (1L << (CURSOR_NAME - 358)) | (1L << (DATA - 358)) | (1L << (DATAFILE - 358)) | (1L << (DEALLOCATE - 358)) | (1L << (DEFAULT_AUTH - 358)) | (1L << (DEFINER - 358)) | (1L << (DELAY_KEY_WRITE - 358)) | (1L << (DES_KEY_FILE - 358)) | (1L << (DIRECTORY - 358)) | (1L << (DISABLE - 358)) | (1L << (DISCARD - 358)) | (1L << (DISK - 358)) | (1L << (DO - 358)) | (1L << (DUMPFILE - 358)) | (1L << (DUPLICATE - 358)) | (1L << (DYNAMIC - 358)) | (1L << (ENABLE - 358)) | (1L << (ENCRYPTION - 358)) | (1L << (END - 358)) | (1L << (ENDS - 358)) | (1L << (ENGINE - 358)) | (1L << (ENGINES - 358)) | (1L << (ERROR - 358)) | (1L << (ERRORS - 358)) | (1L << (ESCAPE - 358)) | (1L << (EVEN - 358)) | (1L << (EVENT - 358)) | (1L << (EVENTS - 358)) | (1L << (EVERY - 358)) | (1L << (EXCHANGE - 358)) | (1L << (EXCLUSIVE - 358)) | (1L << (EXPIRE - 358)) | (1L << (EXPORT - 358)) | (1L << (EXTENDED - 358)) | (1L << (EXTENT_SIZE - 358)) | (1L << (FAST - 358)) | (1L << (FAULTS - 358)) | (1L << (FIELDS - 358)) | (1L << (FILE_BLOCK_SIZE - 358)) | (1L << (FILTER - 358)) | (1L << (FIRST - 358)) | (1L << (FIXED - 358)) | (1L << (FLUSH - 358)) | (1L << (FOLLOWS - 358)) | (1L << (FOUND - 358)) | (1L << (FULL - 358)) | (1L << (FUNCTION - 358)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (GENERAL - 422)) | (1L << (GLOBAL - 422)) | (1L << (GRANTS - 422)) | (1L << (GROUP_REPLICATION - 422)) | (1L << (HANDLER - 422)) | (1L << (HASH - 422)) | (1L << (HELP - 422)) | (1L << (HOST - 422)) | (1L << (HOSTS - 422)) | (1L << (IDENTIFIED - 422)) | (1L << (IGNORE_SERVER_IDS - 422)) | (1L << (IMPORT - 422)) | (1L << (INDEXES - 422)) | (1L << (INITIAL_SIZE - 422)) | (1L << (INPLACE - 422)) | (1L << (INSERT_METHOD - 422)) | (1L << (INSTALL - 422)) | (1L << (INSTANCE - 422)) | (1L << (INSTANT - 422)) | (1L << (INVOKER - 422)) | (1L << (IO - 422)) | (1L << (IO_THREAD - 422)) | (1L << (IPC - 422)) | (1L << (ISOLATION - 422)) | (1L << (ISSUER - 422)) | (1L << (JSON - 422)) | (1L << (KEY_BLOCK_SIZE - 422)) | (1L << (LANGUAGE - 422)) | (1L << (LAST - 422)) | (1L << (LEAVES - 422)) | (1L << (LESS - 422)) | (1L << (LEVEL - 422)) | (1L << (LIST - 422)) | (1L << (LOCAL - 422)) | (1L << (LOGFILE - 422)) | (1L << (LOGS - 422)) | (1L << (MASTER - 422)) | (1L << (MASTER_AUTO_POSITION - 422)) | (1L << (MASTER_CONNECT_RETRY - 422)) | (1L << (MASTER_DELAY - 422)) | (1L << (MASTER_HEARTBEAT_PERIOD - 422)) | (1L << (MASTER_HOST - 422)) | (1L << (MASTER_LOG_FILE - 422)) | (1L << (MASTER_LOG_POS - 422)) | (1L << (MASTER_PASSWORD - 422)) | (1L << (MASTER_PORT - 422)) | (1L << (MASTER_RETRY_COUNT - 422)) | (1L << (MASTER_SSL - 422)) | (1L << (MASTER_SSL_CA - 422)) | (1L << (MASTER_SSL_CAPATH - 422)) | (1L << (MASTER_SSL_CERT - 422)) | (1L << (MASTER_SSL_CIPHER - 422)) | (1L << (MASTER_SSL_CRL - 422)) | (1L << (MASTER_SSL_CRLPATH - 422)) | (1L << (MASTER_SSL_KEY - 422)) | (1L << (MASTER_TLS_VERSION - 422)) | (1L << (MASTER_USER - 422)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 422)) | (1L << (MAX_QUERIES_PER_HOUR - 422)) | (1L << (MAX_ROWS - 422)) | (1L << (MAX_SIZE - 422)) | (1L << (MAX_UPDATES_PER_HOUR - 422)) | (1L << (MAX_USER_CONNECTIONS - 422)))) != 0) || ((((_la - 486)) & ~0x3f) == 0 && ((1L << (_la - 486)) & ((1L << (MEDIUM - 486)) | (1L << (MEMBER - 486)) | (1L << (MERGE - 486)) | (1L << (MESSAGE_TEXT - 486)) | (1L << (MID - 486)) | (1L << (MIGRATE - 486)) | (1L << (MIN_ROWS - 486)) | (1L << (MODE - 486)) | (1L << (MODIFY - 486)) | (1L << (MUTEX - 486)) | (1L << (MYSQL - 486)) | (1L << (MYSQL_ERRNO - 486)) | (1L << (NAME - 486)) | (1L << (NAMES - 486)) | (1L << (NCHAR - 486)) | (1L << (NEVER - 486)) | (1L << (NEXT - 486)) | (1L << (NO - 486)) | (1L << (NOCOPY - 486)) | (1L << (NOWAIT - 486)) | (1L << (NODEGROUP - 486)) | (1L << (NONE - 486)) | (1L << (ODBC - 486)) | (1L << (OFFLINE - 486)) | (1L << (OFFSET - 486)) | (1L << (OF - 486)) | (1L << (OJ - 486)) | (1L << (OLD_PASSWORD - 486)) | (1L << (ONE - 486)) | (1L << (ONLINE - 486)) | (1L << (ONLY - 486)) | (1L << (OPEN - 486)) | (1L << (OPTIMIZER_COSTS - 486)) | (1L << (OPTIONS - 486)) | (1L << (OWNER - 486)) | (1L << (PACK_KEYS - 486)) | (1L << (PAGE - 486)) | (1L << (PARSER - 486)) | (1L << (PARTIAL - 486)) | (1L << (PARTITIONING - 486)) | (1L << (PARTITIONS - 486)) | (1L << (PASSWORD - 486)) | (1L << (PHASE - 486)) | (1L << (PLUGIN - 486)) | (1L << (PLUGIN_DIR - 486)) | (1L << (PLUGINS - 486)) | (1L << (PORT - 486)) | (1L << (PRECEDES - 486)) | (1L << (PREPARE - 486)) | (1L << (PRESERVE - 486)) | (1L << (PREV - 486)) | (1L << (PROCESSLIST - 486)) | (1L << (PROFILE - 486)) | (1L << (PROFILES - 486)) | (1L << (PROXY - 486)) | (1L << (QUERY - 486)) | (1L << (QUICK - 486)) | (1L << (REBUILD - 486)) | (1L << (RECOVER - 486)) | (1L << (RECURSIVE - 486)) | (1L << (REDO_BUFFER_SIZE - 486)) | (1L << (REDUNDANT - 486)) | (1L << (RELAY - 486)))) != 0) || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (RELAY_LOG_FILE - 550)) | (1L << (RELAY_LOG_POS - 550)) | (1L << (RELAYLOG - 550)) | (1L << (REMOVE - 550)) | (1L << (REORGANIZE - 550)) | (1L << (REPAIR - 550)) | (1L << (REPLICATE_DO_DB - 550)) | (1L << (REPLICATE_DO_TABLE - 550)) | (1L << (REPLICATE_IGNORE_DB - 550)) | (1L << (REPLICATE_IGNORE_TABLE - 550)) | (1L << (REPLICATE_REWRITE_DB - 550)) | (1L << (REPLICATE_WILD_DO_TABLE - 550)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 550)) | (1L << (REPLICATION - 550)) | (1L << (RESET - 550)) | (1L << (RESUME - 550)) | (1L << (RETURNED_SQLSTATE - 550)) | (1L << (RETURNS - 550)) | (1L << (ROLE - 550)) | (1L << (ROLLBACK - 550)) | (1L << (ROLLUP - 550)) | (1L << (ROTATE - 550)) | (1L << (ROW - 550)) | (1L << (ROWS - 550)) | (1L << (ROW_FORMAT - 550)) | (1L << (RTREE - 550)) | (1L << (SAVEPOINT - 550)) | (1L << (SCHEDULE - 550)) | (1L << (SECURITY - 550)) | (1L << (SERVER - 550)) | (1L << (SESSION - 550)) | (1L << (SHARE - 550)) | (1L << (SHARED - 550)) | (1L << (SIGNED - 550)) | (1L << (SIMPLE - 550)) | (1L << (SLAVE - 550)) | (1L << (SLOW - 550)) | (1L << (SNAPSHOT - 550)) | (1L << (SOCKET - 550)) | (1L << (SOME - 550)) | (1L << (SONAME - 550)) | (1L << (SOUNDS - 550)) | (1L << (SOURCE - 550)) | (1L << (SQL_AFTER_GTIDS - 550)) | (1L << (SQL_AFTER_MTS_GAPS - 550)) | (1L << (SQL_BEFORE_GTIDS - 550)) | (1L << (SQL_BUFFER_RESULT - 550)) | (1L << (SQL_CACHE - 550)) | (1L << (SQL_NO_CACHE - 550)) | (1L << (SQL_THREAD - 550)) | (1L << (START - 550)) | (1L << (STARTS - 550)) | (1L << (STATS_AUTO_RECALC - 550)) | (1L << (STATS_PERSISTENT - 550)) | (1L << (STATS_SAMPLE_PAGES - 550)) | (1L << (STATUS - 550)) | (1L << (STOP - 550)) | (1L << (STORAGE - 550)) | (1L << (STRING - 550)) | (1L << (SUBCLASS_ORIGIN - 550)) | (1L << (SUBJECT - 550)) | (1L << (SUBPARTITION - 550)))) != 0) || ((((_la - 614)) & ~0x3f) == 0 && ((1L << (_la - 614)) & ((1L << (SUBPARTITIONS - 614)) | (1L << (SUSPEND - 614)) | (1L << (SWAPS - 614)) | (1L << (SWITCHES - 614)) | (1L << (TABLE_NAME - 614)) | (1L << (TABLESPACE - 614)) | (1L << (TEMPORARY - 614)) | (1L << (TEMPTABLE - 614)) | (1L << (THAN - 614)) | (1L << (TRADITIONAL - 614)) | (1L << (TRANSACTION - 614)) | (1L << (TRANSACTIONAL - 614)) | (1L << (TRIGGERS - 614)) | (1L << (TRUNCATE - 614)) | (1L << (UNDEFINED - 614)) | (1L << (UNDOFILE - 614)) | (1L << (UNDO_BUFFER_SIZE - 614)) | (1L << (UNINSTALL - 614)) | (1L << (UNKNOWN - 614)) | (1L << (UNTIL - 614)) | (1L << (UPGRADE - 614)) | (1L << (USER - 614)) | (1L << (USE_FRM - 614)) | (1L << (USER_RESOURCES - 614)) | (1L << (VALIDATION - 614)) | (1L << (VALUE - 614)) | (1L << (VARIABLES - 614)) | (1L << (VIEW - 614)) | (1L << (WAIT - 614)) | (1L << (WARNINGS - 614)) | (1L << (WITHOUT - 614)) | (1L << (WORK - 614)) | (1L << (WRAPPER - 614)) | (1L << (X509 - 614)) | (1L << (XA - 614)) | (1L << (XML - 614)) | (1L << (EUR - 614)) | (1L << (USA - 614)) | (1L << (JIS - 614)) | (1L << (ISO - 614)) | (1L << (INTERNAL - 614)))) != 0) || ((((_la - 679)) & ~0x3f) == 0 && ((1L << (_la - 679)) & ((1L << (AUDIT_ADMIN - 679)) | (1L << (BACKUP_ADMIN - 679)) | (1L << (BINLOG_ADMIN - 679)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 679)) | (1L << (CLONE_ADMIN - 679)) | (1L << (CONNECTION_ADMIN - 679)) | (1L << (ENCRYPTION_KEY_ADMIN - 679)) | (1L << (FIREWALL_ADMIN - 679)) | (1L << (FIREWALL_USER - 679)) | (1L << (ADMIN - 679)) | (1L << (GROUP_REPLICATION_ADMIN - 679)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 679)) | (1L << (NDB_STORED_USER - 679)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 679)) | (1L << (REPLICATION_APPLIER - 679)) | (1L << (REPLICATION_SLAVE_ADMIN - 679)) | (1L << (RESOURCE_GROUP_ADMIN - 679)) | (1L << (RESOURCE_GROUP_USER - 679)) | (1L << (ROLE_ADMIN - 679)) | (1L << (SESSION_VARIABLES_ADMIN - 679)) | (1L << (SET_USER_ID - 679)) | (1L << (SHOW_ROUTINE - 679)) | (1L << (SYSTEM_VARIABLES_ADMIN - 679)) | (1L << (TABLE_ENCRYPTION_ADMIN - 679)) | (1L << (VERSION_TOKEN_ADMIN - 679)) | (1L << (XA_RECOVER_ADMIN - 679)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME || ((((_la - 1071)) & ~0x3f) == 0 && ((1L << (_la - 1071)) & ((1L << (VIA - 1071)) | (1L << (LASTVAL - 1071)) | (1L << (NEXTVAL - 1071)) | (1L << (SETVAL - 1071)) | (1L << (PREVIOUS - 1071)) | (1L << (PERSISTENT - 1071)) | (1L << (BINLOG_MONITOR - 1071)) | (1L << (BINLOG_REPLAY - 1071)) | (1L << (FEDERATED_ADMIN - 1071)) | (1L << (READ_ONLY_ADMIN - 1071)) | (1L << (REPLICA - 1071)) | (1L << (REPLICATION_MASTER_ADMIN - 1071)))) != 0) || _la==ENCRYPTED || _la==ENCRYPTION_KEY_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(MySqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(MySqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(MySqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(MySqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(MySqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(MySqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(MySqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(MySqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(MySqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(MySqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(MySqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(MySqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(MySqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(MySqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(MySqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(MySqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(MySqlParser.SETVAL, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3857);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (LEFT - 93)) | (1L << (RIGHT - 93)) | (1L << (SCHEMA - 93)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (YEAR - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (POSITION - 272)))) != 0) || _la==INVISIBLE || ((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & ((1L << (VISIBLE - 645)) | (1L << (QUARTER - 645)) | (1L << (MONTH - 645)) | (1L << (DAY - 645)) | (1L << (HOUR - 645)) | (1L << (MINUTE - 645)) | (1L << (WEEK - 645)) | (1L << (SECOND - 645)) | (1L << (MICROSECOND - 645)) | (1L << (SESSION_VARIABLES_ADMIN - 645)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (GEOMETRYCOLLECTION - 768)) | (1L << (LINESTRING - 768)) | (1L << (MULTILINESTRING - 768)) | (1L << (MULTIPOINT - 768)) | (1L << (MULTIPOLYGON - 768)) | (1L << (POINT - 768)) | (1L << (POLYGON - 768)) | (1L << (ABS - 768)) | (1L << (ACOS - 768)) | (1L << (ADDDATE - 768)) | (1L << (ADDTIME - 768)) | (1L << (AES_DECRYPT - 768)) | (1L << (AES_ENCRYPT - 768)) | (1L << (AREA - 768)) | (1L << (ASBINARY - 768)) | (1L << (ASIN - 768)) | (1L << (ASTEXT - 768)) | (1L << (ASWKB - 768)) | (1L << (ASWKT - 768)) | (1L << (ASYMMETRIC_DECRYPT - 768)) | (1L << (ASYMMETRIC_DERIVE - 768)) | (1L << (ASYMMETRIC_ENCRYPT - 768)) | (1L << (ASYMMETRIC_SIGN - 768)) | (1L << (ASYMMETRIC_VERIFY - 768)) | (1L << (ATAN - 768)) | (1L << (ATAN2 - 768)) | (1L << (BENCHMARK - 768)) | (1L << (BIN - 768)) | (1L << (BIT_COUNT - 768)) | (1L << (BIT_LENGTH - 768)) | (1L << (BUFFER - 768)) | (1L << (CEIL - 768)) | (1L << (CEILING - 768)) | (1L << (CENTROID - 768)) | (1L << (CHARACTER_LENGTH - 768)) | (1L << (CHARSET - 768)) | (1L << (CHAR_LENGTH - 768)) | (1L << (COERCIBILITY - 768)) | (1L << (COLLATION - 768)) | (1L << (COMPRESS - 768)) | (1L << (CONCAT - 768)) | (1L << (CONCAT_WS - 768)) | (1L << (CONNECTION_ID - 768)) | (1L << (CONV - 768)) | (1L << (CONVERT_TZ - 768)) | (1L << (COS - 768)) | (1L << (COT - 768)) | (1L << (CRC32 - 768)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 768)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 768)) | (1L << (CREATE_DH_PARAMETERS - 768)) | (1L << (CREATE_DIGEST - 768)) | (1L << (CROSSES - 768)) | (1L << (DATEDIFF - 768)) | (1L << (DATE_FORMAT - 768)) | (1L << (DAYNAME - 768)) | (1L << (DAYOFMONTH - 768)) | (1L << (DAYOFWEEK - 768)) | (1L << (DAYOFYEAR - 768)) | (1L << (DECODE - 768)) | (1L << (DEGREES - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (DES_DECRYPT - 832)) | (1L << (DES_ENCRYPT - 832)) | (1L << (DIMENSION - 832)) | (1L << (DISJOINT - 832)) | (1L << (ELT - 832)) | (1L << (ENCODE - 832)) | (1L << (ENCRYPT - 832)) | (1L << (ENDPOINT - 832)) | (1L << (ENVELOPE - 832)) | (1L << (EQUALS - 832)) | (1L << (EXP - 832)) | (1L << (EXPORT_SET - 832)) | (1L << (EXTERIORRING - 832)) | (1L << (EXTRACTVALUE - 832)) | (1L << (FIELD - 832)) | (1L << (FIND_IN_SET - 832)) | (1L << (FLOOR - 832)) | (1L << (FORMAT - 832)) | (1L << (FOUND_ROWS - 832)) | (1L << (FROM_BASE64 - 832)) | (1L << (FROM_DAYS - 832)) | (1L << (FROM_UNIXTIME - 832)) | (1L << (GEOMCOLLFROMTEXT - 832)) | (1L << (GEOMCOLLFROMWKB - 832)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 832)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 832)) | (1L << (GEOMETRYFROMTEXT - 832)) | (1L << (GEOMETRYFROMWKB - 832)) | (1L << (GEOMETRYN - 832)) | (1L << (GEOMETRYTYPE - 832)) | (1L << (GEOMFROMTEXT - 832)) | (1L << (GEOMFROMWKB - 832)) | (1L << (GET_FORMAT - 832)) | (1L << (GET_LOCK - 832)) | (1L << (GLENGTH - 832)) | (1L << (GREATEST - 832)) | (1L << (GTID_SUBSET - 832)) | (1L << (GTID_SUBTRACT - 832)) | (1L << (HEX - 832)) | (1L << (IFNULL - 832)) | (1L << (INET6_ATON - 832)) | (1L << (INET6_NTOA - 832)) | (1L << (INET_ATON - 832)) | (1L << (INET_NTOA - 832)) | (1L << (INSTR - 832)) | (1L << (INTERIORRINGN - 832)) | (1L << (INTERSECTS - 832)) | (1L << (ISCLOSED - 832)) | (1L << (ISEMPTY - 832)) | (1L << (ISNULL - 832)) | (1L << (ISSIMPLE - 832)) | (1L << (IS_FREE_LOCK - 832)) | (1L << (IS_IPV4 - 832)) | (1L << (IS_IPV4_COMPAT - 832)) | (1L << (IS_IPV4_MAPPED - 832)) | (1L << (IS_IPV6 - 832)) | (1L << (IS_USED_LOCK - 832)) | (1L << (LAST_INSERT_ID - 832)) | (1L << (LCASE - 832)) | (1L << (LEAST - 832)) | (1L << (LENGTH - 832)) | (1L << (LINEFROMTEXT - 832)) | (1L << (LINEFROMWKB - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (LINESTRINGFROMTEXT - 896)) | (1L << (LINESTRINGFROMWKB - 896)) | (1L << (LN - 896)) | (1L << (LOAD_FILE - 896)) | (1L << (LOCATE - 896)) | (1L << (LOG - 896)) | (1L << (LOG10 - 896)) | (1L << (LOG2 - 896)) | (1L << (LOWER - 896)) | (1L << (LPAD - 896)) | (1L << (LTRIM - 896)) | (1L << (MAKEDATE - 896)) | (1L << (MAKETIME - 896)) | (1L << (MAKE_SET - 896)) | (1L << (MASTER_POS_WAIT - 896)) | (1L << (MBRCONTAINS - 896)) | (1L << (MBRDISJOINT - 896)) | (1L << (MBREQUAL - 896)) | (1L << (MBRINTERSECTS - 896)) | (1L << (MBROVERLAPS - 896)) | (1L << (MBRTOUCHES - 896)) | (1L << (MBRWITHIN - 896)) | (1L << (MD5 - 896)) | (1L << (MLINEFROMTEXT - 896)) | (1L << (MLINEFROMWKB - 896)) | (1L << (MONTHNAME - 896)) | (1L << (MPOINTFROMTEXT - 896)) | (1L << (MPOINTFROMWKB - 896)) | (1L << (MPOLYFROMTEXT - 896)) | (1L << (MPOLYFROMWKB - 896)) | (1L << (MULTILINESTRINGFROMTEXT - 896)) | (1L << (MULTILINESTRINGFROMWKB - 896)) | (1L << (MULTIPOINTFROMTEXT - 896)) | (1L << (MULTIPOINTFROMWKB - 896)) | (1L << (MULTIPOLYGONFROMTEXT - 896)) | (1L << (MULTIPOLYGONFROMWKB - 896)) | (1L << (NAME_CONST - 896)) | (1L << (NULLIF - 896)) | (1L << (NUMGEOMETRIES - 896)) | (1L << (NUMINTERIORRINGS - 896)) | (1L << (NUMPOINTS - 896)) | (1L << (OCT - 896)) | (1L << (OCTET_LENGTH - 896)) | (1L << (ORD - 896)) | (1L << (OVERLAPS - 896)) | (1L << (PERIOD_ADD - 896)) | (1L << (PERIOD_DIFF - 896)) | (1L << (PI - 896)) | (1L << (POINTFROMTEXT - 896)) | (1L << (POINTFROMWKB - 896)) | (1L << (POINTN - 896)) | (1L << (POLYFROMTEXT - 896)) | (1L << (POLYFROMWKB - 896)) | (1L << (POLYGONFROMTEXT - 896)) | (1L << (POLYGONFROMWKB - 896)) | (1L << (POW - 896)) | (1L << (POWER - 896)) | (1L << (QUOTE - 896)) | (1L << (RADIANS - 896)) | (1L << (RAND - 896)) | (1L << (RANDOM_BYTES - 896)) | (1L << (RELEASE_LOCK - 896)) | (1L << (REVERSE - 896)) | (1L << (ROUND - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ROW_COUNT - 960)) | (1L << (RPAD - 960)) | (1L << (RTRIM - 960)) | (1L << (SEC_TO_TIME - 960)) | (1L << (SESSION_USER - 960)) | (1L << (SHA - 960)) | (1L << (SHA1 - 960)) | (1L << (SHA2 - 960)) | (1L << (SIGN - 960)) | (1L << (SIN - 960)) | (1L << (SLEEP - 960)) | (1L << (SOUNDEX - 960)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 960)) | (1L << (SQRT - 960)) | (1L << (SRID - 960)) | (1L << (STARTPOINT - 960)) | (1L << (STRCMP - 960)) | (1L << (STR_TO_DATE - 960)) | (1L << (ST_AREA - 960)) | (1L << (ST_ASBINARY - 960)) | (1L << (ST_ASTEXT - 960)) | (1L << (ST_ASWKB - 960)) | (1L << (ST_ASWKT - 960)) | (1L << (ST_BUFFER - 960)) | (1L << (ST_CENTROID - 960)) | (1L << (ST_CONTAINS - 960)) | (1L << (ST_CROSSES - 960)) | (1L << (ST_DIFFERENCE - 960)) | (1L << (ST_DIMENSION - 960)) | (1L << (ST_DISJOINT - 960)) | (1L << (ST_DISTANCE - 960)) | (1L << (ST_ENDPOINT - 960)) | (1L << (ST_ENVELOPE - 960)) | (1L << (ST_EQUALS - 960)) | (1L << (ST_EXTERIORRING - 960)) | (1L << (ST_GEOMCOLLFROMTEXT - 960)) | (1L << (ST_GEOMCOLLFROMTXT - 960)) | (1L << (ST_GEOMCOLLFROMWKB - 960)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 960)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 960)) | (1L << (ST_GEOMETRYFROMTEXT - 960)) | (1L << (ST_GEOMETRYFROMWKB - 960)) | (1L << (ST_GEOMETRYN - 960)) | (1L << (ST_GEOMETRYTYPE - 960)) | (1L << (ST_GEOMFROMTEXT - 960)) | (1L << (ST_GEOMFROMWKB - 960)) | (1L << (ST_INTERIORRINGN - 960)) | (1L << (ST_INTERSECTION - 960)) | (1L << (ST_INTERSECTS - 960)) | (1L << (ST_ISCLOSED - 960)) | (1L << (ST_ISEMPTY - 960)) | (1L << (ST_ISSIMPLE - 960)) | (1L << (ST_LINEFROMTEXT - 960)) | (1L << (ST_LINEFROMWKB - 960)) | (1L << (ST_LINESTRINGFROMTEXT - 960)) | (1L << (ST_LINESTRINGFROMWKB - 960)) | (1L << (ST_NUMGEOMETRIES - 960)) | (1L << (ST_NUMINTERIORRING - 960)) | (1L << (ST_NUMINTERIORRINGS - 960)) | (1L << (ST_NUMPOINTS - 960)) | (1L << (ST_OVERLAPS - 960)) | (1L << (ST_POINTFROMTEXT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ST_POINTFROMWKB - 1024)) | (1L << (ST_POINTN - 1024)) | (1L << (ST_POLYFROMTEXT - 1024)) | (1L << (ST_POLYFROMWKB - 1024)) | (1L << (ST_POLYGONFROMTEXT - 1024)) | (1L << (ST_POLYGONFROMWKB - 1024)) | (1L << (ST_SRID - 1024)) | (1L << (ST_STARTPOINT - 1024)) | (1L << (ST_SYMDIFFERENCE - 1024)) | (1L << (ST_TOUCHES - 1024)) | (1L << (ST_UNION - 1024)) | (1L << (ST_WITHIN - 1024)) | (1L << (ST_X - 1024)) | (1L << (ST_Y - 1024)) | (1L << (SUBDATE - 1024)) | (1L << (SUBSTRING_INDEX - 1024)) | (1L << (SUBTIME - 1024)) | (1L << (SYSTEM_USER - 1024)) | (1L << (TAN - 1024)) | (1L << (TIMEDIFF - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (TIMESTAMPDIFF - 1024)) | (1L << (TIME_FORMAT - 1024)) | (1L << (TIME_TO_SEC - 1024)) | (1L << (TOUCHES - 1024)) | (1L << (TO_BASE64 - 1024)) | (1L << (TO_DAYS - 1024)) | (1L << (TO_SECONDS - 1024)) | (1L << (UCASE - 1024)) | (1L << (UNCOMPRESS - 1024)) | (1L << (UNCOMPRESSED_LENGTH - 1024)) | (1L << (UNHEX - 1024)) | (1L << (UNIX_TIMESTAMP - 1024)) | (1L << (UPDATEXML - 1024)) | (1L << (UPPER - 1024)) | (1L << (UUID - 1024)) | (1L << (UUID_SHORT - 1024)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1024)) | (1L << (VERSION - 1024)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1024)) | (1L << (WEEKDAY - 1024)) | (1L << (WEEKOFYEAR - 1024)) | (1L << (WEIGHT_STRING - 1024)) | (1L << (WITHIN - 1024)) | (1L << (YEARWEEK - 1024)) | (1L << (Y_FUNCTION - 1024)) | (1L << (X_FUNCTION - 1024)) | (1L << (LASTVAL - 1024)) | (1L << (NEXTVAL - 1024)) | (1L << (SETVAL - 1024)))) != 0) || _la==MOD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 156:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 157:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 158:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0474\u0f14\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0001\u0000\u0003\u0000\u015a\b\u0000\u0001"+
		"\u0000\u0001\u0000\u0003\u0000\u015e\b\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u0165\b\u0001\u0001\u0001\u0003"+
		"\u0001\u0168\b\u0001\u0001\u0001\u0005\u0001\u016b\b\u0001\n\u0001\f\u0001"+
		"\u016e\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u0173\b"+
		"\u0001\u0001\u0001\u0003\u0001\u0176\b\u0001\u0001\u0001\u0003\u0001\u0179"+
		"\b\u0001\u0001\u0002\u0001\u0002\u0003\u0002\u017d\b\u0002\u0001\u0003"+
		"\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0003\u0004\u0188\b\u0004\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u018f\b\u0005\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u019b\b\u0006\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0003\u0007\u01a0\b\u0007\u0001\u0007\u0003\u0007"+
		"\u01a3\b\u0007\u0001\u0007\u0003\u0007\u01a6\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01ac\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0003\u0007\u01b0\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01b8\b\u0007\u0001\u0007\u0005"+
		"\u0007\u01bb\b\u0007\n\u0007\f\u0007\u01be\t\u0007\u0001\u0007\u0001\u0007"+
		"\u0003\u0007\u01c2\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u01c7\b\u0007\u0001\u0007\u0005\u0007\u01ca\b\u0007\n\u0007\f\u0007\u01cd"+
		"\t\u0007\u0001\b\u0001\b\u0001\b\u0003\b\u01d2\b\b\u0001\b\u0003\b\u01d5"+
		"\b\b\u0001\b\u0001\b\u0003\b\u01d9\b\b\u0001\b\u0001\b\u0001\b\u0001\b"+
		"\u0003\b\u01df\b\b\u0001\b\u0005\b\u01e2\b\b\n\b\f\b\u01e5\t\b\u0003\b"+
		"\u01e7\b\b\u0001\b\u0003\b\u01ea\b\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0005\t\u01f1\b\t\n\t\f\t\u01f4\t\t\u0001\t\u0001\t\u0003\t\u01f8\b"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u0200\b\t\u0001"+
		"\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0003\f\u020b\b\f\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u021a\b\r\u0001"+
		"\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0003\u000f\u0221"+
		"\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u022d"+
		"\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0232\b\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0003\u000f\u023b\b\u000f\u0003\u000f\u023d\b\u000f\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0005\u0010\u0243\b\u0010\n"+
		"\u0010\f\u0010\u0246\t\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u024f\b\u0011\u0001"+
		"\u0012\u0001\u0012\u0005\u0012\u0253\b\u0012\n\u0012\f\u0012\u0256\t\u0012"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u0261\b\u0013\u0001\u0013"+
		"\u0003\u0013\u0264\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013"+
		"\u0269\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u0276\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0003\u0013\u027d\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0003\u0013\u0284\b\u0013\u0003\u0013\u0286\b"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003"+
		"\u0013\u028d\b\u0013\u0001\u0014\u0001\u0014\u0003\u0014\u0291\b\u0014"+
		"\u0003\u0014\u0293\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014"+
		"\u0298\b\u0014\u0001\u0014\u0003\u0014\u029b\b\u0014\u0001\u0014\u0001"+
		"\u0014\u0005\u0014\u029f\b\u0014\n\u0014\f\u0014\u02a2\t\u0014\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u02a6\b\u0014\u0003\u0014\u02a8\b\u0014\u0001"+
		"\u0014\u0001\u0014\u0003\u0014\u02ac\b\u0014\u0001\u0014\u0003\u0014\u02af"+
		"\b\u0014\u0001\u0014\u0003\u0014\u02b2\b\u0014\u0001\u0014\u0001\u0014"+
		"\u0005\u0014\u02b6\b\u0014\n\u0014\f\u0014\u02b9\t\u0014\u0001\u0014\u0001"+
		"\u0014\u0003\u0014\u02bd\b\u0014\u0003\u0014\u02bf\b\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0003\u0014\u02c4\b\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u02cb\b\u0014\u0003\u0014"+
		"\u02cd\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0003\u0014\u02d4\b\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015"+
		"\u02d9\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015\u02dd\b\u0015\u0001"+
		"\u0015\u0003\u0015\u02e0\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u02e8\b\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u02f0"+
		"\b\u0016\u0003\u0016\u02f2\b\u0016\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u02fa\b\u0017\u0001\u0018"+
		"\u0001\u0018\u0003\u0018\u02fe\b\u0018\u0001\u0018\u0003\u0018\u0301\b"+
		"\u0018\u0001\u0018\u0001\u0018\u0005\u0018\u0305\b\u0018\n\u0018\f\u0018"+
		"\u0308\t\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u030c\b\u0018\u0001"+
		"\u0018\u0003\u0018\u030f\b\u0018\u0001\u0018\u0001\u0018\u0005\u0018\u0313"+
		"\b\u0018\n\u0018\f\u0018\u0316\t\u0018\u0003\u0018\u0318\b\u0018\u0001"+
		"\u0019\u0001\u0019\u0003\u0019\u031c\b\u0019\u0001\u0019\u0003\u0019\u031f"+
		"\b\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0323\b\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0003\u0019\u0328\b\u0019\u0001\u0019\u0001\u0019"+
		"\u0003\u0019\u032c\b\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0330\b"+
		"\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0334\b\u0019\u0001\u0019\u0001"+
		"\u0019\u0003\u0019\u0338\b\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u033c"+
		"\b\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0340\b\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0003\u0019\u0345\b\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0003\u0019\u034a\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0003\u0019\u034f\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0003\u0019\u0355\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019"+
		"\u035a\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u035f\b"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0365"+
		"\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u036a\b\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u036f\b\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0003\u0019\u0374\b\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0003\u0019\u0379\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0003\u0019\u037e\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019"+
		"\u0383\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0388\b"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u038d\b\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0392\b\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0003\u0019\u0397\b\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0003\u0019\u039d\b\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u03a5\b\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u03ab\b\u0019\u0001"+
		"\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u03b7\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u03be"+
		"\b\u001c\u0003\u001c\u03c0\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0005\u001c\u03c6\b\u001c\n\u001c\f\u001c\u03c9\t\u001c\u0001"+
		"\u001c\u0001\u001c\u0003\u001c\u03cd\b\u001c\u0001\u001d\u0003\u001d\u03d0"+
		"\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0003\u001d\u03d8\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0003\u001d\u03de\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u03ee"+
		"\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u03fa"+
		"\b\u001d\u0003\u001d\u03fc\b\u001d\u0001\u001e\u0003\u001e\u03ff\b\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0003\u001e\u0407\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0003\u001e\u040d\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0003\u001e\u0413\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0005\u001f"+
		"\u041e\b\u001f\n\u001f\f\u001f\u0421\t\u001f\u0001\u001f\u0001\u001f\u0005"+
		"\u001f\u0425\b\u001f\n\u001f\f\u001f\u0428\t\u001f\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0005\u001f\u042e\b\u001f\n\u001f\f\u001f\u0431"+
		"\t\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u0435\b\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0005\u001f\u043e\b\u001f\n\u001f\f\u001f\u0441\t\u001f\u0001\u001f\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u0447\b\u001f\n\u001f\f\u001f"+
		"\u044a\t\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u044e\b\u001f\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0001\u001f\u0005\u001f\u0458\b\u001f\n\u001f\f\u001f\u045b\t\u001f"+
		"\u0001\u001f\u0001\u001f\u0005\u001f\u045f\b\u001f\n\u001f\f\u001f\u0462"+
		"\t\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u0468"+
		"\b\u001f\n\u001f\f\u001f\u046b\t\u001f\u0001\u001f\u0001\u001f\u0003\u001f"+
		"\u046f\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u0479\b\u001f\n\u001f"+
		"\f\u001f\u047c\t\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u0480\b\u001f"+
		"\n\u001f\f\u001f\u0483\t\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0005\u001f\u0489\b\u001f\n\u001f\f\u001f\u048c\t\u001f\u0001\u001f"+
		"\u0001\u001f\u0003\u001f\u0490\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0005\u001f\u0495\b\u001f\n\u001f\f\u001f\u0498\t\u001f\u0001\u001f\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u049e\b\u001f\n\u001f\f\u001f"+
		"\u04a1\t\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u04a5\b\u001f\u0003"+
		"\u001f\u04a7\b\u001f\u0001 \u0001 \u0001 \u0003 \u04ac\b \u0001!\u0001"+
		"!\u0001!\u0001!\u0004!\u04b2\b!\u000b!\f!\u04b3\u0001!\u0001!\u0001\""+
		"\u0001\"\u0001\"\u0005\"\u04bb\b\"\n\"\f\"\u04be\t\"\u0001#\u0003#\u04c1"+
		"\b#\u0001#\u0003#\u04c4\b#\u0001#\u0001#\u0003#\u04c8\b#\u0001#\u0001"+
		"#\u0001#\u0003#\u04cd\b#\u0001#\u0001#\u0001#\u0001#\u0003#\u04d3\b#\u0001"+
		"#\u0001#\u0001#\u0001#\u0003#\u04d9\b#\u0001#\u0001#\u0001#\u0003#\u04de"+
		"\b#\u0001#\u0001#\u0001#\u0003#\u04e3\b#\u0001#\u0001#\u0001#\u0003#\u04e8"+
		"\b#\u0001#\u0001#\u0001#\u0003#\u04ed\b#\u0001#\u0003#\u04f0\b#\u0001"+
		"$\u0001$\u0003$\u04f4\b$\u0001$\u0003$\u04f7\b$\u0001$\u0001$\u0001$\u0001"+
		"$\u0001$\u0005$\u04fe\b$\n$\f$\u0501\t$\u0003$\u0503\b$\u0001$\u0003$"+
		"\u0506\b$\u0001%\u0001%\u0003%\u050a\b%\u0001%\u0005%\u050d\b%\n%\f%\u0510"+
		"\t%\u0001%\u0001%\u0003%\u0514\b%\u0001%\u0003%\u0517\b%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0003%\u051e\b%\u0001%\u0001%\u0003%\u0522\b%\u0001"+
		"%\u0003%\u0525\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0005"+
		"%\u052e\b%\n%\f%\u0531\t%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u0538"+
		"\b%\u0001%\u0003%\u053b\b%\u0001%\u0003%\u053e\b%\u0001%\u0001%\u0005"+
		"%\u0542\b%\n%\f%\u0545\t%\u0001%\u0001%\u0001%\u0003%\u054a\b%\u0003%"+
		"\u054c\b%\u0001%\u0001%\u0001%\u0003%\u0551\b%\u0001%\u0003%\u0554\b%"+
		"\u0001%\u0001%\u0005%\u0558\b%\n%\f%\u055b\t%\u0001%\u0001%\u0001%\u0003"+
		"%\u0560\b%\u0003%\u0562\b%\u0001%\u0001%\u0003%\u0566\b%\u0001%\u0003"+
		"%\u0569\b%\u0001%\u0003%\u056c\b%\u0001%\u0001%\u0005%\u0570\b%\n%\f%"+
		"\u0573\t%\u0001%\u0001%\u0001%\u0003%\u0578\b%\u0001%\u0003%\u057b\b%"+
		"\u0001%\u0001%\u0005%\u057f\b%\n%\f%\u0582\t%\u0001%\u0001%\u0001%\u0003"+
		"%\u0587\b%\u0003%\u0589\b%\u0001%\u0001%\u0001%\u0003%\u058e\b%\u0001"+
		"%\u0003%\u0591\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u0599"+
		"\b%\u0003%\u059b\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003"+
		"%\u05a4\b%\u0001%\u0001%\u0001%\u0003%\u05a9\b%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0003%\u05b1\b%\u0001%\u0001%\u0003%\u05b5\b%\u0001%\u0003"+
		"%\u05b8\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u05c0\b%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u05ca\b%\u0001"+
		"%\u0001%\u0001%\u0003%\u05cf\b%\u0001%\u0003%\u05d2\b%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0003%\u05d9\b%\u0001%\u0001%\u0003%\u05dd\b%\u0001%\u0003"+
		"%\u05e0\b%\u0001%\u0001%\u0003%\u05e4\b%\u0001%\u0001%\u0001%\u0003%\u05e9"+
		"\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u05fd"+
		"\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u0604\b%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0003%\u060d\b%\u0001%\u0001%\u0003%\u0611"+
		"\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0003%\u061d\b%\u0001%\u0003%\u0620\b%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0003%\u0629\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0003%\u0635\b%\u0001%\u0001%\u0001%\u0001"+
		"%\u0005%\u063b\b%\n%\f%\u063e\t%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003"+
		"%\u0645\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u064c\b%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0003%\u0653\b%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0003%\u065a\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0005%\u0667\b%\n%\f%\u066a\t%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u0676\b%\u0001"+
		"%\u0001%\u0001%\u0001%\u0003%\u067c\b%\u0001%\u0001%\u0001%\u0001%\u0003"+
		"%\u0682\b%\u0001%\u0001%\u0001%\u0001%\u0003%\u0688\b%\u0001%\u0001%\u0001"+
		"%\u0001%\u0003%\u068e\b%\u0001%\u0001%\u0001%\u0001%\u0003%\u0694\b%\u0001"+
		"%\u0001%\u0001%\u0001%\u0003%\u069a\b%\u0001&\u0001&\u0001&\u0003&\u069f"+
		"\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u06a6\b&\u0001&\u0001&\u0001"+
		"&\u0003&\u06ab\b&\u0001&\u0005&\u06ae\b&\n&\f&\u06b1\t&\u0001\'\u0001"+
		"\'\u0003\'\u06b5\b\'\u0001\'\u0001\'\u0003\'\u06b9\b\'\u0001\'\u0001\'"+
		"\u0003\'\u06bd\b\'\u0001(\u0001(\u0001(\u0001(\u0001(\u0005(\u06c4\b("+
		"\n(\f(\u06c7\t(\u0001)\u0001)\u0001)\u0001)\u0001*\u0001*\u0003*\u06cf"+
		"\b*\u0001*\u0001*\u0001+\u0001+\u0003+\u06d5\b+\u0001,\u0001,\u0003,\u06d9"+
		"\b,\u0001,\u0003,\u06dc\b,\u0001,\u0003,\u06df\b,\u0001,\u0001,\u0001"+
		",\u0001,\u0003,\u06e5\b,\u0001,\u0003,\u06e8\b,\u0001,\u0001,\u0001,\u0001"+
		",\u0003,\u06ee\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0005,\u06f5\b,\n"+
		",\f,\u06f8\t,\u0003,\u06fa\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001"+
		",\u0001,\u0005,\u0703\b,\n,\f,\u0706\t,\u0003,\u0708\b,\u0001-\u0001-"+
		"\u0003-\u070c\b-\u0001-\u0003-\u070f\b-\u0001-\u0001-\u0001-\u0001-\u0001"+
		"-\u0001-\u0003-\u0717\b-\u0001-\u0001-\u0001-\u0001-\u0003-\u071d\b-\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0005-\u0724\b-\n-\f-\u0727\t-\u0003-\u0729"+
		"\b-\u0001.\u0001.\u0003.\u072d\b.\u0001.\u0001.\u0003.\u0731\b.\u0001"+
		".\u0001.\u0004.\u0735\b.\u000b.\f.\u0736\u0001.\u0001.\u0003.\u073b\b"+
		".\u0001.\u0001.\u0003.\u073f\b.\u0003.\u0741\b.\u0001.\u0003.\u0744\b"+
		".\u0001.\u0003.\u0747\b.\u0001.\u0003.\u074a\b.\u0001.\u0001.\u0004.\u074e"+
		"\b.\u000b.\f.\u074f\u0001.\u0001.\u0003.\u0754\b.\u0001.\u0003.\u0757"+
		"\b.\u0001.\u0003.\u075a\b.\u0001.\u0003.\u075d\b.\u0001.\u0003.\u0760"+
		"\b.\u0003.\u0762\b.\u0001/\u0001/\u0003/\u0766\b/\u00010\u00010\u0001"+
		"0\u00010\u00030\u076c\b0\u00010\u00010\u00010\u00010\u00030\u0772\b0\u0001"+
		"0\u00050\u0775\b0\n0\f0\u0778\t0\u00030\u077a\b0\u00011\u00011\u00011"+
		"\u00011\u00031\u0780\b1\u00012\u00012\u00032\u0784\b2\u00013\u00013\u0001"+
		"3\u00013\u00013\u00013\u00033\u078c\b3\u00014\u00014\u00034\u0790\b4\u0001"+
		"4\u00034\u0793\b4\u00014\u00034\u0796\b4\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00034\u079f\b4\u00014\u00014\u00034\u07a3\b4\u00014\u0003"+
		"4\u07a6\b4\u00014\u00014\u00034\u07aa\b4\u00015\u00015\u00035\u07ae\b"+
		"5\u00015\u00035\u07b1\b5\u00015\u00035\u07b4\b5\u00015\u00015\u00015\u0003"+
		"5\u07b9\b5\u00015\u00015\u00015\u00015\u00035\u07bf\b5\u00055\u07c1\b"+
		"5\n5\f5\u07c4\t5\u00015\u00015\u00015\u00015\u00015\u00015\u00015\u0003"+
		"5\u07cd\b5\u00015\u00015\u00015\u00015\u00035\u07d3\b5\u00055\u07d5\b"+
		"5\n5\f5\u07d8\t5\u00015\u00015\u00015\u00035\u07dd\b5\u00015\u00015\u0003"+
		"5\u07e1\b5\u00016\u00016\u00036\u07e5\b6\u00016\u00036\u07e8\b6\u0001"+
		"6\u00016\u00036\u07ec\b6\u00016\u00036\u07ef\b6\u00016\u00016\u00016\u0001"+
		"6\u00056\u07f5\b6\n6\f6\u07f8\t6\u00016\u00016\u00036\u07fc\b6\u00016"+
		"\u00036\u07ff\b6\u00016\u00036\u0802\b6\u00017\u00017\u00037\u0806\b7"+
		"\u00017\u00037\u0809\b7\u00017\u00017\u00017\u00017\u00017\u00057\u0810"+
		"\b7\n7\f7\u0813\t7\u00017\u00017\u00037\u0817\b7\u00018\u00018\u00018"+
		"\u00018\u00018\u00058\u081e\b8\n8\f8\u0821\t8\u00019\u00019\u00039\u0825"+
		"\b9\u0001:\u0001:\u0001:\u0005:\u082a\b:\n:\f:\u082d\t:\u0001;\u0001;"+
		"\u0005;\u0831\b;\n;\f;\u0834\t;\u0001;\u0001;\u0001;\u0005;\u0839\b;\n"+
		";\f;\u083c\t;\u0001;\u0001;\u0003;\u0840\b;\u0001<\u0001<\u0001<\u0001"+
		"<\u0001<\u0001<\u0003<\u0848\b<\u0001<\u0003<\u084b\b<\u0001<\u0003<\u084e"+
		"\b<\u0001<\u0001<\u0001<\u0005<\u0853\b<\n<\f<\u0856\t<\u0003<\u0858\b"+
		"<\u0001<\u0001<\u0001<\u0001<\u0001<\u0003<\u085f\b<\u0001<\u0003<\u0862"+
		"\b<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0003<\u086a\b<\u0001=\u0001"+
		"=\u0001=\u0001=\u0003=\u0870\b=\u0001=\u0001=\u0001=\u0001=\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0003>\u087b\b>\u0001?\u0003?\u087e\b?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u0889\b?\u0001"+
		"?\u0001?\u0001?\u0001?\u0003?\u088f\b?\u0001?\u0001?\u0003?\u0893\b?\u0001"+
		"?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u089e"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u08a3\b?\u0003?\u08a5\b?\u0001?\u0001"+
		"?\u0003?\u08a9\b?\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001"+
		"@\u0003@\u08b3\b@\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001"+
		"A\u0003A\u08bd\bA\u0001B\u0001B\u0005B\u08c1\bB\nB\fB\u08c4\tB\u0001B"+
		"\u0001B\u0003B\u08c8\bB\u0001B\u0003B\u08cb\bB\u0001B\u0003B\u08ce\bB"+
		"\u0001B\u0003B\u08d1\bB\u0001B\u0003B\u08d4\bB\u0001B\u0003B\u08d7\bB"+
		"\u0001B\u0003B\u08da\bB\u0001B\u0001B\u0005B\u08de\bB\nB\fB\u08e1\tB\u0001"+
		"B\u0001B\u0003B\u08e5\bB\u0001B\u0003B\u08e8\bB\u0001B\u0003B\u08eb\b"+
		"B\u0001B\u0003B\u08ee\bB\u0001B\u0003B\u08f1\bB\u0001B\u0003B\u08f4\b"+
		"B\u0001B\u0003B\u08f7\bB\u0003B\u08f9\bB\u0001C\u0001C\u0005C\u08fd\b"+
		"C\nC\fC\u0900\tC\u0001C\u0001C\u0003C\u0904\bC\u0001C\u0003C\u0907\bC"+
		"\u0001C\u0003C\u090a\bC\u0001C\u0003C\u090d\bC\u0001C\u0003C\u0910\bC"+
		"\u0001C\u0003C\u0913\bC\u0001D\u0001D\u0003D\u0917\bD\u0001D\u0001D\u0001"+
		"E\u0001E\u0003E\u091d\bE\u0001E\u0001E\u0003E\u0921\bE\u0001F\u0001F\u0001"+
		"F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u092b\bF\u0001G\u0001G\u0003"+
		"G\u092f\bG\u0001G\u0001G\u0005G\u0933\bG\nG\fG\u0936\tG\u0001H\u0001H"+
		"\u0001H\u0001H\u0001H\u0001H\u0003H\u093e\bH\u0001H\u0003H\u0941\bH\u0001"+
		"H\u0001H\u0003H\u0945\bH\u0001H\u0003H\u0948\bH\u0001H\u0001H\u0003H\u094c"+
		"\bH\u0001H\u0001H\u0003H\u0950\bH\u0001H\u0003H\u0953\bH\u0003H\u0955"+
		"\bH\u0001I\u0001I\u0001I\u0001I\u0005I\u095b\bI\nI\fI\u095e\tI\u0001I"+
		"\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0969"+
		"\bI\u0001I\u0001I\u0004I\u096d\bI\u000bI\fI\u096e\u0003I\u0971\bI\u0001"+
		"I\u0001I\u0004I\u0975\bI\u000bI\fI\u0976\u0003I\u0979\bI\u0003I\u097b"+
		"\bI\u0001J\u0001J\u0001J\u0001J\u0003J\u0981\bJ\u0001J\u0001J\u0001J\u0001"+
		"J\u0001J\u0001J\u0003J\u0989\bJ\u0001K\u0001K\u0001K\u0001K\u0001K\u0001"+
		"K\u0003K\u0991\bK\u0001L\u0001L\u0003L\u0995\bL\u0001L\u0001L\u0003L\u0999"+
		"\bL\u0001M\u0001M\u0001M\u0001M\u0001M\u0005M\u09a0\bM\nM\fM\u09a3\tM"+
		"\u0001M\u0001M\u0003M\u09a7\bM\u0001N\u0001N\u0001N\u0001O\u0001O\u0001"+
		"O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001"+
		"O\u0005O\u09b9\bO\nO\fO\u09bc\tO\u0001P\u0001P\u0003P\u09c0\bP\u0001Q"+
		"\u0001Q\u0001Q\u0001Q\u0003Q\u09c6\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0003Q\u09cd\bQ\u0001R\u0001R\u0001R\u0003R\u09d2\bR\u0001S\u0001S\u0003"+
		"S\u09d6\bS\u0001T\u0001T\u0001T\u0003T\u09db\bT\u0001T\u0001T\u0001T\u0001"+
		"T\u0005T\u09e1\bT\nT\fT\u09e4\tT\u0001T\u0001T\u0001T\u0005T\u09e9\bT"+
		"\nT\fT\u09ec\tT\u0001T\u0001T\u0001T\u0005T\u09f1\bT\nT\fT\u09f4\tT\u0001"+
		"T\u0001T\u0001T\u0005T\u09f9\bT\nT\fT\u09fc\tT\u0001T\u0005T\u09ff\bT"+
		"\nT\fT\u0a02\tT\u0003T\u0a04\bT\u0001T\u0001T\u0003T\u0a08\bT\u0001U\u0001"+
		"U\u0001U\u0003U\u0a0d\bU\u0001U\u0004U\u0a10\bU\u000bU\fU\u0a11\u0001"+
		"U\u0001U\u0004U\u0a16\bU\u000bU\fU\u0a17\u0003U\u0a1a\bU\u0001U\u0001"+
		"U\u0001U\u0001V\u0001V\u0001V\u0001V\u0004V\u0a23\bV\u000bV\fV\u0a24\u0001"+
		"V\u0005V\u0a28\bV\nV\fV\u0a2b\tV\u0001V\u0001V\u0004V\u0a2f\bV\u000bV"+
		"\fV\u0a30\u0003V\u0a33\bV\u0001V\u0001V\u0001V\u0001W\u0001W\u0001W\u0001"+
		"X\u0001X\u0001X\u0001Y\u0001Y\u0001Y\u0003Y\u0a41\bY\u0001Y\u0001Y\u0004"+
		"Y\u0a45\bY\u000bY\fY\u0a46\u0001Y\u0001Y\u0001Y\u0003Y\u0a4c\bY\u0001"+
		"Z\u0001Z\u0001Z\u0003Z\u0a51\bZ\u0001Z\u0001Z\u0004Z\u0a55\bZ\u000bZ\f"+
		"Z\u0a56\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0a5e\bZ\u0001[\u0001"+
		"[\u0001[\u0001\\\u0001\\\u0001\\\u0003\\\u0a66\b\\\u0001\\\u0001\\\u0001"+
		"\\\u0001\\\u0004\\\u0a6c\b\\\u000b\\\f\\\u0a6d\u0001\\\u0001\\\u0001\\"+
		"\u0003\\\u0a73\b\\\u0001]\u0001]\u0001]\u0001]\u0003]\u0a79\b]\u0001]"+
		"\u0003]\u0a7c\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u0a84"+
		"\b]\u0001^\u0001^\u0001^\u0001^\u0001^\u0003^\u0a8b\b^\u0001_\u0001_\u0001"+
		"_\u0001_\u0001_\u0001_\u0001_\u0003_\u0a94\b_\u0001_\u0003_\u0a97\b_\u0001"+
		"`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0005a\u0aa6\ba\na\fa\u0aa9\ta\u0001a\u0001a\u0001b\u0001"+
		"b\u0001b\u0003b\u0ab0\bb\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0003"+
		"b\u0ab8\bb\u0001c\u0001c\u0003c\u0abc\bc\u0001c\u0001c\u0001d\u0001d\u0001"+
		"d\u0003d\u0ac3\bd\u0001d\u0001d\u0004d\u0ac7\bd\u000bd\fd\u0ac8\u0001"+
		"e\u0001e\u0001e\u0001e\u0004e\u0acf\be\u000be\fe\u0ad0\u0001f\u0001f\u0001"+
		"f\u0001f\u0003f\u0ad7\bf\u0001g\u0001g\u0001h\u0001h\u0001h\u0003h\u0ade"+
		"\bh\u0003h\u0ae0\bh\u0001h\u0001h\u0001h\u0003h\u0ae5\bh\u0003h\u0ae7"+
		"\bh\u0001i\u0001i\u0003i\u0aeb\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0af1"+
		"\bi\u0001i\u0003i\u0af4\bi\u0001i\u0003i\u0af7\bi\u0001j\u0001j\u0001"+
		"k\u0001k\u0001k\u0001k\u0003k\u0aff\bk\u0001l\u0001l\u0003l\u0b03\bl\u0001"+
		"m\u0001m\u0001n\u0001n\u0001n\u0003n\u0b0a\bn\u0001o\u0001o\u0001o\u0001"+
		"o\u0001o\u0001o\u0001o\u0001o\u0001o\u0003o\u0b15\bo\u0001p\u0001p\u0001"+
		"p\u0003p\u0b1a\bp\u0001q\u0001q\u0001r\u0001r\u0003r\u0b20\br\u0001s\u0003"+
		"s\u0b23\bs\u0001s\u0001s\u0003s\u0b27\bs\u0001s\u0004s\u0b2a\bs\u000b"+
		"s\fs\u0b2b\u0001s\u0003s\u0b2f\bs\u0001s\u0001s\u0003s\u0b33\bs\u0001"+
		"s\u0001s\u0003s\u0b37\bs\u0003s\u0b39\bs\u0001t\u0001t\u0001u\u0003u\u0b3e"+
		"\bu\u0001u\u0001u\u0001v\u0003v\u0b43\bv\u0001v\u0001v\u0001w\u0001w\u0001"+
		"w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0003w\u0b50\bw\u0001w\u0003"+
		"w\u0b53\bw\u0001x\u0001x\u0003x\u0b57\bx\u0001x\u0003x\u0b5a\bx\u0001"+
		"x\u0003x\u0b5d\bx\u0001x\u0001x\u0001x\u0003x\u0b62\bx\u0001x\u0001x\u0001"+
		"x\u0003x\u0b67\bx\u0001x\u0001x\u0001x\u0003x\u0b6c\bx\u0001x\u0003x\u0b6f"+
		"\bx\u0001x\u0001x\u0001x\u0003x\u0b74\bx\u0001x\u0003x\u0b77\bx\u0001"+
		"x\u0001x\u0001x\u0001x\u0003x\u0b7d\bx\u0001x\u0003x\u0b80\bx\u0001x\u0001"+
		"x\u0003x\u0b84\bx\u0001x\u0005x\u0b87\bx\nx\fx\u0b8a\tx\u0001x\u0001x"+
		"\u0003x\u0b8e\bx\u0001x\u0005x\u0b91\bx\nx\fx\u0b94\tx\u0001x\u0001x\u0003"+
		"x\u0b98\bx\u0001x\u0003x\u0b9b\bx\u0001x\u0005x\u0b9e\bx\nx\fx\u0ba1\t"+
		"x\u0001x\u0001x\u0003x\u0ba5\bx\u0001x\u0005x\u0ba8\bx\nx\fx\u0bab\tx"+
		"\u0001x\u0001x\u0001x\u0003x\u0bb0\bx\u0001x\u0001x\u0001x\u0003x\u0bb5"+
		"\bx\u0001x\u0001x\u0001x\u0003x\u0bba\bx\u0001x\u0001x\u0001x\u0003x\u0bbf"+
		"\bx\u0001x\u0003x\u0bc2\bx\u0001x\u0001x\u0001x\u0003x\u0bc7\bx\u0001"+
		"x\u0001x\u0003x\u0bcb\bx\u0001x\u0001x\u0003x\u0bcf\bx\u0001y\u0001y\u0001"+
		"y\u0001y\u0005y\u0bd5\by\ny\fy\u0bd8\ty\u0001y\u0001y\u0001z\u0001z\u0003"+
		"z\u0bde\bz\u0001z\u0001z\u0003z\u0be2\bz\u0001z\u0001z\u0001z\u0003z\u0be7"+
		"\bz\u0001z\u0001z\u0001z\u0003z\u0bec\bz\u0001z\u0001z\u0003z\u0bf0\b"+
		"z\u0003z\u0bf2\bz\u0001z\u0003z\u0bf5\bz\u0001{\u0001{\u0001{\u0001{\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001}\u0001}\u0001}\u0001}\u0003"+
		"}\u0c05\b}\u0001}\u0001}\u0001~\u0001~\u0001~\u0005~\u0c0c\b~\n~\f~\u0c0f"+
		"\t~\u0001\u007f\u0001\u007f\u0001\u007f\u0005\u007f\u0c14\b\u007f\n\u007f"+
		"\f\u007f\u0c17\t\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080"+
		"\u0005\u0080\u0c1d\b\u0080\n\u0080\f\u0080\u0c20\t\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0005\u0081\u0c27\b\u0081\n"+
		"\u0081\f\u0081\u0c2a\t\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0005"+
		"\u0082\u0c2f\b\u0082\n\u0082\f\u0082\u0c32\t\u0082\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0003\u0083\u0c3d\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0003\u0083\u0c44\b\u0083\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u0c57\b\u0083\u0001\u0084"+
		"\u0001\u0084\u0001\u0084\u0003\u0084\u0c5c\b\u0084\u0001\u0084\u0003\u0084"+
		"\u0c5f\b\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u0c64\b"+
		"\u0084\u0001\u0084\u0003\u0084\u0c67\b\u0084\u0001\u0085\u0001\u0085\u0003"+
		"\u0085\u0c6b\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0c7a\b\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0c81\b\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0c86\b\u0088\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0003\u0089\u0c8b\b\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0004\u0089\u0caa\b\u0089\u000b\u0089\f"+
		"\u0089\u0cab\u0001\u0089\u0001\u0089\u0003\u0089\u0cb0\b\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0004\u0089\u0cb6\b\u0089\u000b\u0089"+
		"\f\u0089\u0cb7\u0001\u0089\u0001\u0089\u0003\u0089\u0cbc\b\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0003\u0089\u0cc5\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0ccd\b\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0003\u0089\u0cd2\b\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0cda\b\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0cdf\b\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0003\u0089\u0ce4\b\u0089\u0003\u0089\u0ce6\b\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0003\u0089\u0cef\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0003\u0089\u0cf4\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0003\u0089\u0cfc\b\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0003\u0089\u0d01\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d09\b\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u0d11\b\u0089\u0001\u0089\u0003\u0089\u0d14\b\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0003\u0089\u0d1e\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0003\u0089\u0d30\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0003\u0089\u0d36\b\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d3a"+
		"\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d40"+
		"\b\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d44\b\u0089\u0001\u0089"+
		"\u0001\u0089\u0003\u0089\u0d48\b\u0089\u0001\u008a\u0001\u008a\u0001\u008a"+
		"\u0001\u008a\u0001\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0005\u008b\u0d53\b\u008b\n\u008b\f\u008b\u0d56\t\u008b\u0001\u008b\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0d5d\b\u008b\u0001"+
		"\u008c\u0001\u008c\u0003\u008c\u0d61\b\u008c\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0003\u008d\u0d66\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003"+
		"\u008d\u0d6b\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003"+
		"\u008d\u0d71\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0d76"+
		"\b\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0d7a\b\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0003\u008d\u0d7f\b\u008d\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0003\u008d\u0d84\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d"+
		"\u0003\u008d\u0d89\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0005\u008d\u0d91\b\u008d\n\u008d\f\u008d\u0d94"+
		"\t\u008d\u0003\u008d\u0d96\b\u008d\u0001\u008d\u0001\u008d\u0003\u008d"+
		"\u0d9a\b\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0d9e\b\u008d\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0da5"+
		"\b\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0da9\b\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0003\u008e\u0dc6\b\u008e\u0001\u008f\u0001\u008f"+
		"\u0001\u008f\u0003\u008f\u0dcb\b\u008f\u0001\u008f\u0001\u008f\u0003\u008f"+
		"\u0dcf\b\u008f\u0001\u0090\u0003\u0090\u0dd2\b\u0090\u0001\u0090\u0003"+
		"\u0090\u0dd5\b\u0090\u0001\u0090\u0003\u0090\u0dd8\b\u0090\u0001\u0090"+
		"\u0003\u0090\u0ddb\b\u0090\u0001\u0091\u0001\u0091\u0001\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0003\u0094"+
		"\u0de6\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096"+
		"\u0001\u0096\u0003\u0096\u0df4\b\u0096\u0001\u0097\u0001\u0097\u0001\u0097"+
		"\u0001\u0097\u0001\u0097\u0005\u0097\u0dfb\b\u0097\n\u0097\f\u0097\u0dfe"+
		"\t\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003"+
		"\u0098\u0e17\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u0e22"+
		"\b\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0003"+
		"\u009a\u0e29\b\u009a\u0005\u009a\u0e2b\b\u009a\n\u009a\f\u009a\u0e2e\t"+
		"\u009a\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u0e34"+
		"\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0003\u009c\u0e3c\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0003"+
		"\u009c\u0e41\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0005"+
		"\u009c\u0e47\b\u009c\n\u009c\f\u009c\u0e4a\t\u009c\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0003\u009d\u0e4f\b\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d"+
		"\u0e59\b\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0003\u009d\u0e66\b\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0003\u009d\u0e6c\b\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0003\u009d\u0e72\b\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u0e82\b\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u0e88\b\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0005\u009d\u0e91\b\u009d\n\u009d\f\u009d\u0e94\t\u009d\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0005\u009e\u0ea4\b\u009e\n\u009e\f\u009e\u0ea7\t\u009e"+
		"\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e"+
		"\u0001\u009e\u0004\u009e\u0eb0\b\u009e\u000b\u009e\f\u009e\u0eb1\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0ec3\b\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0005\u009e\u0ed4\b\u009e\n\u009e\f\u009e\u0ed7\t\u009e"+
		"\u0001\u009f\u0001\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u0ee9\b\u00a0"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0003\u00a1\u0ef2\b\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2\u0efb\b\u00a2"+
		"\u0001\u00a3\u0001\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0003\u00a4\u0f04\b\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0000\u0003\u0138\u013a\u013c\u00ac\u0000\u0002\u0004\u0006\b\n\f\u000e"+
		"\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDF"+
		"HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0000W\u0002\u0000\u01fd\u01fd\u0203\u0203"+
		"\u0003\u0000BB\u0097\u0097\u00ac\u00ac\u0005\u0000((\u0174\u0174\u01b4"+
		"\u01b4\u01b8\u01b8\u01f8\u01f8\u0004\u0000((\u0194\u0194\u01fb\u01fb\u0247"+
		"\u0247\u0003\u0000\u0152\u0152\u01ab\u01ab\u0240\u0240\u0002\u0000\u01b9"+
		"\u01b9\u0285\u0285\u0002\u0000\u01f7\u01f7\u028f\u028f\u0003\u0000((\u0185"+
		"\u0185\u019f\u019f\u0003\u0000((\u0181\u0181\u02f5\u02f5\u0002\u0000\u0261"+
		"\u0261\u0284\u0284\u0002\u0000NNXX\u0003\u0000\u01a4\u01a4\u020c\u020c"+
		"\u0249\u0249\u0002\u0000BB\u0097\u0097\u0001\u0000\u0158\u0159\u0001\u0000"+
		"\u0459\u045a\u0002\u0000\u0463\u0463\u046b\u046b\u0003\u0000\u019e\u019e"+
		"\u01c3\u01c3\u01f7\u01f7\u0002\u0000((\u0459\u045a\u0007\u0000((\u0166"+
		"\u0166\u0168\u0168\u0185\u0185\u019f\u019f\u0224\u0224\u046b\u046b\u0002"+
		"\u0000\u01f0\u01f0\u01fc\u01fc\u0001\u0000\u045a\u045b\u0004\u0000((\u0174"+
		"\u0174\u01b4\u01b4\u01b8\u01b8\u0002\u0000\u0019\u0019\u001d\u001d\u0002"+
		"\u0000\f\f\u00a6\u00a6\u0002\u0000\u00b7\u00b7\u0289\u0289\u0003\u0000"+
		"((\u0174\u0174\u01b4\u01b4\u0002\u0000\u0014\u0014\u008a\u008a\u0003\u0000"+
		"))HHee\u0002\u0000))ee\u0002\u0000\u0006\u0006//\u0002\u0000\u00b3\u00b3"+
		"\u0281\u0281\u0002\u0000\r\r++\u0003\u0000??KK\u00b1\u00b1\u0002\u0000"+
		"!!PP\u0002\u0000]]\u008e\u008e\u0002\u0000\u0006\u0006/0\u0001\u0000\u0256"+
		"\u0257\u0002\u0000\u0161\u0161\u019b\u019b\u0003\u0000\u001e\u001e::\u00aa"+
		"\u00aa\u0001\u0000\u0470\u0471\u0004\u0000\u016b\u016b\u02f0\u02fb\u0463"+
		"\u0463\u046b\u046c\u0003\u0000\u0459\u045b\u0464\u0464\u0466\u0466\u0002"+
		"\u0000<<\u00a9\u00a9\u0002\u0000nn\u0467\u0467\u0005\u0000\u0018\u0018"+
		"\u00d5\u00d7\u00de\u00de\u00e0\u00e3\u01f4\u01f4\u0002\u0000\u0018\u0018"+
		"\u00d6\u00d6\u0002\u0000\u0018\u0018\u00d5\u00d5\u0001\u0000\u00bb\u00c6"+
		"\u0003\u0000\u00ae\u00ae\u00ba\u00ba\u0248\u0248\u0002\u0000\u00ca\u00cf"+
		"\u019f\u019f\u0006\u0000\u00d0\u00d0\u00db\u00db\u00dd\u00dd\u00df\u00df"+
		"\u00e6\u00e6\u0150\u0151\u0004\u0000\u00d1\u00d4\u00d9\u00da\u00dc\u00dc"+
		"\u014e\u014e\u0002\u0000\u0093\u0093\u00e4\u00e4\u0002\u0000\u01c0\u01c0"+
		"\u0300\u0308\u0002\u0000\u00d9\u00d9\u01f4\u01f4\u0005\u0000\u00bf\u00bf"+
		"\u00c5\u00c5\u00d0\u00d1\u00d3\u00d3\u01c0\u01c0\u0002\u0000\u00ae\u00ae"+
		"\u0248\u0248\u0001\u0000\u0430\u0431\u0002\u0000\u01f6\u01f6\u0433\u0433"+
		"\u0002\u0000\u012f\u0132\u0136\u0136\u0002\u0000##\u012d\u0130\u0001\u0000"+
		"\u0139\u013a\u0003\u0000\u0010\u0010[[\u00a7\u00a7\u0002\u0000\u00d5\u00d5"+
		"\u00d9\u00d9\u0002\u0000\u00d0\u00d1\u00d3\u00d3\u0003\u0000\r\r++\u03be"+
		"\u03be\u0003\u0000\u0112\u0112\u011e\u011f\u0129\u0129\u0003\u0000\u0113"+
		"\u0115\u0125\u0128\u012a\u012c\u0002\u0000\u011b\u011b\u011d\u011d\u0002"+
		"\u0000\u0119\u0119\u011c\u011c\u0002\u0000\u0117\u0118\u0122\u0124\u0002"+
		"\u0000\u007f\u007f\u023e\u023e\u0002\u0000\u01a1\u01a1\u0216\u0216\u0002"+
		"\u0000\u0201\u0201\u020f\u020f\u0002\u0000ll\u044e\u044e\u0003\u0000<"+
		"<\u00a9\u00a9\u027a\u027a\u0002\u0000\u0083\u0083\u008f\u008f\u0003\u0000"+
		"\u0006\u0006\u0145\u0145\u024e\u024e\u0003\u0000ll\u0447\u0448\u044e\u044f"+
		"\u0001\u0000\u0444\u044a\u0002\u0000\u00d9\u00d9\u02c7\u02ef\u0001\u0000"+
		"\u02fc\u02ff\u0001\u0000\u029d\u02a5\u0001\u0000\u0295\u029c\u0003\u0000"+
		"\u00d0\u00d4\u00e1\u00e1\u00e4\u00e4$\u0000\"\"..88FFLLoossvv\u00a0\u00a0"+
		"\u00e6\u00e6\u0112\u0116\u011a\u011a\u011e\u011f\u0125\u012c\u0140\u01a0"+
		"\u01a2\u01b8\u01ba\u0215\u0217\u0236\u0238\u0260\u0262\u026b\u026d\u0274"+
		"\u0276\u0283\u0286\u0287\u0289\u028e\u0290\u0294\u02a7\u02af\u02b4\u02b6"+
		"\u02b8\u02be\u02c0\u02c6\u02f5\u02f5\u0321\u0321\u0348\u0348\u03c4\u03c4"+
		"\u03c9\u03c9\u042f\u043a\u0473\u0474\u0017\u0000%%]]\u008e\u008e\u0090"+
		"\u0090\u00d0\u00d2\u00d4\u00d4\u00f2\u0111\u0116\u0119\u011b\u011d\u0120"+
		"\u0124\u0138\u0138\u01b9\u01b9\u0285\u0285\u0295\u029c\u02c0\u02c0\u0300"+
		"\u0300\u0303\u0320\u0322\u0347\u0349\u03c3\u03c5\u03c8\u03ca\u042e\u0430"+
		"\u0432\u044a\u044a\u11d9\u0000\u0159\u0001\u0000\u0000\u0000\u0002\u016c"+
		"\u0001\u0000\u0000\u0000\u0004\u017c\u0001\u0000\u0000\u0000\u0006\u017e"+
		"\u0001\u0000\u0000\u0000\b\u0187\u0001\u0000\u0000\u0000\n\u018e\u0001"+
		"\u0000\u0000\u0000\f\u019a\u0001\u0000\u0000\u0000\u000e\u019c\u0001\u0000"+
		"\u0000\u0000\u0010\u01ce\u0001\u0000\u0000\u0000\u0012\u01eb\u0001\u0000"+
		"\u0000\u0000\u0014\u0201\u0001\u0000\u0000\u0000\u0016\u0203\u0001\u0000"+
		"\u0000\u0000\u0018\u020a\u0001\u0000\u0000\u0000\u001a\u0219\u0001\u0000"+
		"\u0000\u0000\u001c\u021b\u0001\u0000\u0000\u0000\u001e\u023c\u0001\u0000"+
		"\u0000\u0000 \u023e\u0001\u0000\u0000\u0000\"\u024e\u0001\u0000\u0000"+
		"\u0000$\u0250\u0001\u0000\u0000\u0000&\u028c\u0001\u0000\u0000\u0000("+
		"\u02d3\u0001\u0000\u0000\u0000*\u02d5\u0001\u0000\u0000\u0000,\u02f1\u0001"+
		"\u0000\u0000\u0000.\u02f9\u0001\u0000\u0000\u00000\u0317\u0001\u0000\u0000"+
		"\u00002\u03aa\u0001\u0000\u0000\u00004\u03ac\u0001\u0000\u0000\u00006"+
		"\u03ae\u0001\u0000\u0000\u00008\u03b1\u0001\u0000\u0000\u0000:\u03fb\u0001"+
		"\u0000\u0000\u0000<\u0412\u0001\u0000\u0000\u0000>\u04a6\u0001\u0000\u0000"+
		"\u0000@\u04ab\u0001\u0000\u0000\u0000B\u04ad\u0001\u0000\u0000\u0000D"+
		"\u04b7\u0001\u0000\u0000\u0000F\u04ef\u0001\u0000\u0000\u0000H\u04f1\u0001"+
		"\u0000\u0000\u0000J\u0699\u0001\u0000\u0000\u0000L\u069b\u0001\u0000\u0000"+
		"\u0000N\u06b2\u0001\u0000\u0000\u0000P\u06be\u0001\u0000\u0000\u0000R"+
		"\u06c8\u0001\u0000\u0000\u0000T\u06cc\u0001\u0000\u0000\u0000V\u06d4\u0001"+
		"\u0000\u0000\u0000X\u06d6\u0001\u0000\u0000\u0000Z\u0709\u0001\u0000\u0000"+
		"\u0000\\\u0761\u0001\u0000\u0000\u0000^\u0765\u0001\u0000\u0000\u0000"+
		"`\u0779\u0001\u0000\u0000\u0000b\u077b\u0001\u0000\u0000\u0000d\u0783"+
		"\u0001\u0000\u0000\u0000f\u078b\u0001\u0000\u0000\u0000h\u078d\u0001\u0000"+
		"\u0000\u0000j\u07ab\u0001\u0000\u0000\u0000l\u07e2\u0001\u0000\u0000\u0000"+
		"n\u0803\u0001\u0000\u0000\u0000p\u0818\u0001\u0000\u0000\u0000r\u0822"+
		"\u0001\u0000\u0000\u0000t\u0826\u0001\u0000\u0000\u0000v\u083f\u0001\u0000"+
		"\u0000\u0000x\u0869\u0001\u0000\u0000\u0000z\u086b\u0001\u0000\u0000\u0000"+
		"|\u087a\u0001\u0000\u0000\u0000~\u08a8\u0001\u0000\u0000\u0000\u0080\u08b2"+
		"\u0001\u0000\u0000\u0000\u0082\u08bc\u0001\u0000\u0000\u0000\u0084\u08f8"+
		"\u0001\u0000\u0000\u0000\u0086\u08fa\u0001\u0000\u0000\u0000\u0088\u0914"+
		"\u0001\u0000\u0000\u0000\u008a\u091a\u0001\u0000\u0000\u0000\u008c\u092a"+
		"\u0001\u0000\u0000\u0000\u008e\u092e\u0001\u0000\u0000\u0000\u0090\u0954"+
		"\u0001\u0000\u0000\u0000\u0092\u097a\u0001\u0000\u0000\u0000\u0094\u0988"+
		"\u0001\u0000\u0000\u0000\u0096\u0990\u0001\u0000\u0000\u0000\u0098\u0994"+
		"\u0001\u0000\u0000\u0000\u009a\u099a\u0001\u0000\u0000\u0000\u009c\u09a8"+
		"\u0001\u0000\u0000\u0000\u009e\u09ab\u0001\u0000\u0000\u0000\u00a0\u09bd"+
		"\u0001\u0000\u0000\u0000\u00a2\u09c1\u0001\u0000\u0000\u0000\u00a4\u09d1"+
		"\u0001\u0000\u0000\u0000\u00a6\u09d5\u0001\u0000\u0000\u0000\u00a8\u09da"+
		"\u0001\u0000\u0000\u0000\u00aa\u0a09\u0001\u0000\u0000\u0000\u00ac\u0a1e"+
		"\u0001\u0000\u0000\u0000\u00ae\u0a37\u0001\u0000\u0000\u0000\u00b0\u0a3a"+
		"\u0001\u0000\u0000\u0000\u00b2\u0a40\u0001\u0000\u0000\u0000\u00b4\u0a50"+
		"\u0001\u0000\u0000\u0000\u00b6\u0a5f\u0001\u0000\u0000\u0000\u00b8\u0a65"+
		"\u0001\u0000\u0000\u0000\u00ba\u0a83\u0001\u0000\u0000\u0000\u00bc\u0a85"+
		"\u0001\u0000\u0000\u0000\u00be\u0a8c\u0001\u0000\u0000\u0000\u00c0\u0a98"+
		"\u0001\u0000\u0000\u0000\u00c2\u0a9e\u0001\u0000\u0000\u0000\u00c4\u0ab7"+
		"\u0001\u0000\u0000\u0000\u00c6\u0abb\u0001\u0000\u0000\u0000\u00c8\u0abf"+
		"\u0001\u0000\u0000\u0000\u00ca\u0aca\u0001\u0000\u0000\u0000\u00cc\u0ad2"+
		"\u0001\u0000\u0000\u0000\u00ce\u0ad8\u0001\u0000\u0000\u0000\u00d0\u0ae6"+
		"\u0001\u0000\u0000\u0000\u00d2\u0af3\u0001\u0000\u0000\u0000\u00d4\u0af8"+
		"\u0001\u0000\u0000\u0000\u00d6\u0afe\u0001\u0000\u0000\u0000\u00d8\u0b02"+
		"\u0001\u0000\u0000\u0000\u00da\u0b04\u0001\u0000\u0000\u0000\u00dc\u0b09"+
		"\u0001\u0000\u0000\u0000\u00de\u0b14\u0001\u0000\u0000\u0000\u00e0\u0b19"+
		"\u0001\u0000\u0000\u0000\u00e2\u0b1b\u0001\u0000\u0000\u0000\u00e4\u0b1f"+
		"\u0001\u0000\u0000\u0000\u00e6\u0b38\u0001\u0000\u0000\u0000\u00e8\u0b3a"+
		"\u0001\u0000\u0000\u0000\u00ea\u0b3d\u0001\u0000\u0000\u0000\u00ec\u0b42"+
		"\u0001\u0000\u0000\u0000\u00ee\u0b52\u0001\u0000\u0000\u0000\u00f0\u0bce"+
		"\u0001\u0000\u0000\u0000\u00f2\u0bd0\u0001\u0000\u0000\u0000\u00f4\u0bf1"+
		"\u0001\u0000\u0000\u0000\u00f6\u0bf6\u0001\u0000\u0000\u0000\u00f8\u0bfa"+
		"\u0001\u0000\u0000\u0000\u00fa\u0c00\u0001\u0000\u0000\u0000\u00fc\u0c08"+
		"\u0001\u0000\u0000\u0000\u00fe\u0c10\u0001\u0000\u0000\u0000\u0100\u0c18"+
		"\u0001\u0000\u0000\u0000\u0102\u0c23\u0001\u0000\u0000\u0000\u0104\u0c2b"+
		"\u0001\u0000\u0000\u0000\u0106\u0c56\u0001\u0000\u0000\u0000\u0108\u0c66"+
		"\u0001\u0000\u0000\u0000\u010a\u0c6a\u0001\u0000\u0000\u0000\u010c\u0c6c"+
		"\u0001\u0000\u0000\u0000\u010e\u0c6f\u0001\u0000\u0000\u0000\u0110\u0c85"+
		"\u0001\u0000\u0000\u0000\u0112\u0d47\u0001\u0000\u0000\u0000\u0114\u0d49"+
		"\u0001\u0000\u0000\u0000\u0116\u0d5c\u0001\u0000\u0000\u0000\u0118\u0d5e"+
		"\u0001\u0000\u0000\u0000\u011a\u0d9d\u0001\u0000\u0000\u0000\u011c\u0dc5"+
		"\u0001\u0000\u0000\u0000\u011e\u0dc7\u0001\u0000\u0000\u0000\u0120\u0dd1"+
		"\u0001\u0000\u0000\u0000\u0122\u0ddc\u0001\u0000\u0000\u0000\u0124\u0dde"+
		"\u0001\u0000\u0000\u0000\u0126\u0de1\u0001\u0000\u0000\u0000\u0128\u0de5"+
		"\u0001\u0000\u0000\u0000\u012a\u0de7\u0001\u0000\u0000\u0000\u012c\u0df3"+
		"\u0001\u0000\u0000\u0000\u012e\u0df5\u0001\u0000\u0000\u0000\u0130\u0e16"+
		"\u0001\u0000\u0000\u0000\u0132\u0e18\u0001\u0000\u0000\u0000\u0134\u0e21"+
		"\u0001\u0000\u0000\u0000\u0136\u0e33\u0001\u0000\u0000\u0000\u0138\u0e40"+
		"\u0001\u0000\u0000\u0000\u013a\u0e4b\u0001\u0000\u0000\u0000\u013c\u0ec2"+
		"\u0001\u0000\u0000\u0000\u013e\u0ed8\u0001\u0000\u0000\u0000\u0140\u0ee8"+
		"\u0001\u0000\u0000\u0000\u0142\u0ef1\u0001\u0000\u0000\u0000\u0144\u0efa"+
		"\u0001\u0000\u0000\u0000\u0146\u0efc\u0001\u0000\u0000\u0000\u0148\u0f03"+
		"\u0001\u0000\u0000\u0000\u014a\u0f05\u0001\u0000\u0000\u0000\u014c\u0f07"+
		"\u0001\u0000\u0000\u0000\u014e\u0f09\u0001\u0000\u0000\u0000\u0150\u0f0b"+
		"\u0001\u0000\u0000\u0000\u0152\u0f0d\u0001\u0000\u0000\u0000\u0154\u0f0f"+
		"\u0001\u0000\u0000\u0000\u0156\u0f11\u0001\u0000\u0000\u0000\u0158\u015a"+
		"\u0003\u0002\u0001\u0000\u0159\u0158\u0001\u0000\u0000\u0000\u0159\u015a"+
		"\u0001\u0000\u0000\u0000\u015a\u015d\u0001\u0000\u0000\u0000\u015b\u015c"+
		"\u0005\u0448\u0000\u0000\u015c\u015e\u0005\u0448\u0000\u0000\u015d\u015b"+
		"\u0001\u0000\u0000\u0000\u015d\u015e\u0001\u0000\u0000\u0000\u015e\u015f"+
		"\u0001\u0000\u0000\u0000\u015f\u0160\u0005\u0000\u0000\u0001\u0160\u0001"+
		"\u0001\u0000\u0000\u0000\u0161\u0164\u0003\u0004\u0002\u0000\u0162\u0163"+
		"\u0005\u0448\u0000\u0000\u0163\u0165\u0005\u0448\u0000\u0000\u0164\u0162"+
		"\u0001\u0000\u0000\u0000\u0164\u0165\u0001\u0000\u0000\u0000\u0165\u0167"+
		"\u0001\u0000\u0000\u0000\u0166\u0168\u0005\u0457\u0000\u0000\u0167\u0166"+
		"\u0001\u0000\u0000\u0000\u0167\u0168\u0001\u0000\u0000\u0000\u0168\u016b"+
		"\u0001\u0000\u0000\u0000\u0169\u016b\u0003\u0006\u0003\u0000\u016a\u0161"+
		"\u0001\u0000\u0000\u0000\u016a\u0169\u0001\u0000\u0000\u0000\u016b\u016e"+
		"\u0001\u0000\u0000\u0000\u016c\u016a\u0001\u0000\u0000\u0000\u016c\u016d"+
		"\u0001\u0000\u0000\u0000\u016d\u0178\u0001\u0000\u0000\u0000\u016e\u016c"+
		"\u0001\u0000\u0000\u0000\u016f\u0175\u0003\u0004\u0002\u0000\u0170\u0171"+
		"\u0005\u0448\u0000\u0000\u0171\u0173\u0005\u0448\u0000\u0000\u0172\u0170"+
		"\u0001\u0000\u0000\u0000\u0172\u0173\u0001\u0000\u0000\u0000\u0173\u0174"+
		"\u0001\u0000\u0000\u0000\u0174\u0176\u0005\u0457\u0000\u0000\u0175\u0172"+
		"\u0001\u0000\u0000\u0000\u0175\u0176\u0001\u0000\u0000\u0000\u0176\u0179"+
		"\u0001\u0000\u0000\u0000\u0177\u0179\u0003\u0006\u0003\u0000\u0178\u016f"+
		"\u0001\u0000\u0000\u0000\u0178\u0177\u0001\u0000\u0000\u0000\u0179\u0003"+
		"\u0001\u0000\u0000\u0000\u017a\u017d\u0003\b\u0004\u0000\u017b\u017d\u0003"+
		"\n\u0005\u0000\u017c\u017a\u0001\u0000\u0000\u0000\u017c\u017b\u0001\u0000"+
		"\u0000\u0000\u017d\u0005\u0001\u0000\u0000\u0000\u017e\u017f\u0005\u0457"+
		"\u0000\u0000\u017f\u0007\u0001\u0000\u0000\u0000\u0180\u0188\u0003\u000e"+
		"\u0007\u0000\u0181\u0188\u0003\u0010\b\u0000\u0182\u0188\u0003H$\u0000"+
		"\u0183\u0188\u0003L&\u0000\u0184\u0188\u0003N\'\u0000\u0185\u0188\u0003"+
		"P(\u0000\u0186\u0188\u0003T*\u0000\u0187\u0180\u0001\u0000\u0000\u0000"+
		"\u0187\u0181\u0001\u0000\u0000\u0000\u0187\u0182\u0001\u0000\u0000\u0000"+
		"\u0187\u0183\u0001\u0000\u0000\u0000\u0187\u0184\u0001\u0000\u0000\u0000"+
		"\u0187\u0185\u0001\u0000\u0000\u0000\u0187\u0186\u0001\u0000\u0000\u0000"+
		"\u0188\t\u0001\u0000\u0000\u0000\u0189\u018f\u0003\\.\u0000\u018a\u018f"+
		"\u0003X,\u0000\u018b\u018f\u0003^/\u0000\u018c\u018f\u0003V+\u0000\u018d"+
		"\u018f\u0003Z-\u0000\u018e\u0189\u0001\u0000\u0000\u0000\u018e\u018a\u0001"+
		"\u0000\u0000\u0000\u018e\u018b\u0001\u0000\u0000\u0000\u018e\u018c\u0001"+
		"\u0000\u0000\u0000\u018e\u018d\u0001\u0000\u0000\u0000\u018f\u000b\u0001"+
		"\u0000\u0000\u0000\u0190\u019b\u0003\u00a8T\u0000\u0191\u019b\u0003\u00aa"+
		"U\u0000\u0192\u019b\u0003\u00acV\u0000\u0193\u019b\u0003\u00b0X\u0000"+
		"\u0194\u019b\u0003\u00b2Y\u0000\u0195\u019b\u0003\u00b4Z\u0000\u0196\u019b"+
		"\u0003\u00b8\\\u0000\u0197\u019b\u0003\u00aeW\u0000\u0198\u019b\u0003"+
		"\u00b6[\u0000\u0199\u019b\u0003\u00ba]\u0000\u019a\u0190\u0001\u0000\u0000"+
		"\u0000\u019a\u0191\u0001\u0000\u0000\u0000\u019a\u0192\u0001\u0000\u0000"+
		"\u0000\u019a\u0193\u0001\u0000\u0000\u0000\u019a\u0194\u0001\u0000\u0000"+
		"\u0000\u019a\u0195\u0001\u0000\u0000\u0000\u019a\u0196\u0001\u0000\u0000"+
		"\u0000\u019a\u0197\u0001\u0000\u0000\u0000\u019a\u0198\u0001\u0000\u0000"+
		"\u0000\u019a\u0199\u0001\u0000\u0000\u0000\u019b\r\u0001\u0000\u0000\u0000"+
		"\u019c\u019f\u0005 \u0000\u0000\u019d\u019e\u0005u\u0000\u0000\u019e\u01a0"+
		"\u0005\u0087\u0000\u0000\u019f\u019d\u0001\u0000\u0000\u0000\u019f\u01a0"+
		"\u0001\u0000\u0000\u0000\u01a0\u01a2\u0001\u0000\u0000\u0000\u01a1\u01a3"+
		"\u0007\u0000\u0000\u0000\u01a2\u01a1\u0001\u0000\u0000\u0000\u01a2\u01a3"+
		"\u0001\u0000\u0000\u0000\u01a3\u01a5\u0001\u0000\u0000\u0000\u01a4\u01a6"+
		"\u0007\u0001\u0000\u0000\u01a5\u01a4\u0001\u0000\u0000\u0000\u01a5\u01a6"+
		"\u0001\u0000\u0000\u0000\u01a6\u01a7\u0001\u0000\u0000\u0000\u01a7\u01ab"+
		"\u0005N\u0000\u0000\u01a8\u01a9\u0005J\u0000\u0000\u01a9\u01aa\u0005l"+
		"\u0000\u0000\u01aa\u01ac\u00059\u0000\u0000\u01ab\u01a8\u0001\u0000\u0000"+
		"\u0000\u01ab\u01ac\u0001\u0000\u0000\u0000\u01ac\u01ad\u0001\u0000\u0000"+
		"\u0000\u01ad\u01af\u0003\u00dcn\u0000\u01ae\u01b0\u0003\u001c\u000e\u0000"+
		"\u01af\u01ae\u0001\u0000\u0000\u0000\u01af\u01b0\u0001\u0000\u0000\u0000"+
		"\u01b0\u01b1\u0001\u0000\u0000\u0000\u01b1\u01b2\u0005p\u0000\u0000\u01b2"+
		"\u01b3\u0003\u00ceg\u0000\u01b3\u01b7\u0003\u0100\u0080\u0000\u01b4\u01b5"+
		"\u0005\u0286\u0000\u0000\u01b5\u01b8\u0003\u00e2q\u0000\u01b6\u01b8\u0005"+
		"\u01f9\u0000\u0000\u01b7\u01b4\u0001\u0000\u0000\u0000\u01b7\u01b6\u0001"+
		"\u0000\u0000\u0000\u01b7\u01b8\u0001\u0000\u0000\u0000\u01b8\u01bc\u0001"+
		"\u0000\u0000\u0000\u01b9\u01bb\u0003\u001e\u000f\u0000\u01ba\u01b9\u0001"+
		"\u0000\u0000\u0000\u01bb\u01be\u0001\u0000\u0000\u0000\u01bc\u01ba\u0001"+
		"\u0000\u0000\u0000\u01bc\u01bd\u0001\u0000\u0000\u0000\u01bd\u01cb\u0001"+
		"\u0000\u0000\u0000\u01be\u01bc\u0001\u0000\u0000\u0000\u01bf\u01c1\u0005"+
		"\u0144\u0000\u0000\u01c0\u01c2\u0005\u044b\u0000\u0000\u01c1\u01c0\u0001"+
		"\u0000\u0000\u0000\u01c1\u01c2\u0001\u0000\u0000\u0000\u01c2\u01c3\u0001"+
		"\u0000\u0000\u0000\u01c3\u01ca\u0007\u0002\u0000\u0000\u01c4\u01c6\u0005"+
		"c\u0000\u0000\u01c5\u01c7\u0005\u044b\u0000\u0000\u01c6\u01c5\u0001\u0000"+
		"\u0000\u0000\u01c6\u01c7\u0001\u0000\u0000\u0000\u01c7\u01c8\u0001\u0000"+
		"\u0000\u0000\u01c8\u01ca\u0007\u0003\u0000\u0000\u01c9\u01bf\u0001\u0000"+
		"\u0000\u0000\u01c9\u01c4\u0001\u0000\u0000\u0000\u01ca\u01cd\u0001\u0000"+
		"\u0000\u0000\u01cb\u01c9\u0001\u0000\u0000\u0000\u01cb\u01cc\u0001\u0000"+
		"\u0000\u0000\u01cc\u000f\u0001\u0000\u0000\u0000\u01cd\u01cb\u0001\u0000"+
		"\u0000\u0000\u01ce\u01d1\u0005 \u0000\u0000\u01cf\u01d0\u0005u\u0000\u0000"+
		"\u01d0\u01d2\u0005\u0087\u0000\u0000\u01d1\u01cf\u0001\u0000\u0000\u0000"+
		"\u01d1\u01d2\u0001\u0000\u0000\u0000\u01d2\u01d4\u0001\u0000\u0000\u0000"+
		"\u01d3\u01d5\u0005\u026d\u0000\u0000\u01d4\u01d3\u0001\u0000\u0000\u0000"+
		"\u01d4\u01d5\u0001\u0000\u0000\u0000\u01d5\u01d6\u0001\u0000\u0000\u0000"+
		"\u01d6\u01d8\u0005\u00a3\u0000\u0000\u01d7\u01d9\u0003\u010e\u0087\u0000"+
		"\u01d8\u01d7\u0001\u0000\u0000\u0000\u01d8\u01d9\u0001\u0000\u0000\u0000"+
		"\u01d9\u01da\u0001\u0000\u0000\u0000\u01da\u01db\u0003\u00ceg\u0000\u01db"+
		"\u01e6\u0003 \u0010\u0000\u01dc\u01e3\u00032\u0019\u0000\u01dd\u01df\u0005"+
		"\u0456\u0000\u0000\u01de\u01dd\u0001\u0000\u0000\u0000\u01de\u01df\u0001"+
		"\u0000\u0000\u0000\u01df\u01e0\u0001\u0000\u0000\u0000\u01e0\u01e2\u0003"+
		"2\u0019\u0000\u01e1\u01de\u0001\u0000\u0000\u0000\u01e2\u01e5\u0001\u0000"+
		"\u0000\u0000\u01e3\u01e1\u0001\u0000\u0000\u0000\u01e3\u01e4\u0001\u0000"+
		"\u0000\u0000\u01e4\u01e7\u0001\u0000\u0000\u0000\u01e5\u01e3\u0001\u0000"+
		"\u0000\u0000\u01e6\u01dc\u0001\u0000\u0000\u0000\u01e6\u01e7\u0001\u0000"+
		"\u0000\u0000\u01e7\u01e9\u0001\u0000\u0000\u0000\u01e8\u01ea\u00038\u001c"+
		"\u0000\u01e9\u01e8\u0001\u0000\u0000\u0000\u01e9\u01ea\u0001\u0000\u0000"+
		"\u0000\u01ea\u0011\u0001\u0000\u0000\u0000\u01eb\u01f7\u0003\u0014\n\u0000"+
		"\u01ec\u01ed\u0005\u0454\u0000\u0000\u01ed\u01f2\u0003\u0016\u000b\u0000"+
		"\u01ee\u01ef\u0005\u0456\u0000\u0000\u01ef\u01f1\u0003\u0016\u000b\u0000"+
		"\u01f0\u01ee\u0001\u0000\u0000\u0000\u01f1\u01f4\u0001\u0000\u0000\u0000"+
		"\u01f2\u01f0\u0001\u0000\u0000\u0000\u01f2\u01f3\u0001\u0000\u0000\u0000"+
		"\u01f3\u01f5\u0001\u0000\u0000\u0000\u01f4\u01f2\u0001\u0000\u0000\u0000"+
		"\u01f5\u01f6\u0005\u0455\u0000\u0000\u01f6\u01f8\u0001\u0000\u0000\u0000"+
		"\u01f7\u01ec\u0001\u0000\u0000\u0000\u01f7\u01f8\u0001\u0000\u0000\u0000"+
		"\u01f8\u01f9\u0001\u0000\u0000\u0000\u01f9\u01fa\u0005\f\u0000\u0000\u01fa"+
		"\u01fb\u0005\u0454\u0000\u0000\u01fb\u01fc\u0003\n\u0005\u0000\u01fc\u01ff"+
		"\u0005\u0455\u0000\u0000\u01fd\u01fe\u0005\u0456\u0000\u0000\u01fe\u0200"+
		"\u0003\u0012\t\u0000\u01ff\u01fd\u0001\u0000\u0000\u0000\u01ff\u0200\u0001"+
		"\u0000\u0000\u0000\u0200\u0013\u0001\u0000\u0000\u0000\u0201\u0202\u0003"+
		"\u00dcn\u0000\u0202\u0015\u0001\u0000\u0000\u0000\u0203\u0204\u0003\u00dc"+
		"n\u0000\u0204\u0017\u0001\u0000\u0000\u0000\u0205\u0206\u0005\u0018\u0000"+
		"\u0000\u0206\u020b\u0005\u0093\u0000\u0000\u0207\u020b\u0005\u0326\u0000"+
		"\u0000\u0208\u0209\u0005\u00d5\u0000\u0000\u0209\u020b\u0005\u0093\u0000"+
		"\u0000\u020a\u0205\u0001\u0000\u0000\u0000\u020a\u0207\u0001\u0000\u0000"+
		"\u0000\u020a\u0208\u0001\u0000\u0000\u0000\u020b\u0019\u0001\u0000\u0000"+
		"\u0000\u020c\u021a\u0003\u0150\u00a8\u0000\u020d\u021a\u0005\u00d4\u0000"+
		"\u0000\u020e\u021a\u0005\u00e7\u0000\u0000\u020f\u021a\u0005\u00e8\u0000"+
		"\u0000\u0210\u021a\u0005\u00e9\u0000\u0000\u0211\u021a\u0005\u00ea\u0000"+
		"\u0000\u0212\u021a\u0005\u00eb\u0000\u0000\u0213\u021a\u0005\u00ec\u0000"+
		"\u0000\u0214\u021a\u0005\u00ed\u0000\u0000\u0215\u021a\u0005\u00ee\u0000"+
		"\u0000\u0216\u021a\u0005\u00ef\u0000\u0000\u0217\u021a\u0005\u00f0\u0000"+
		"\u0000\u0218\u021a\u0005\u00f1\u0000\u0000\u0219\u020c\u0001\u0000\u0000"+
		"\u0000\u0219\u020d\u0001\u0000\u0000\u0000\u0219\u020e\u0001\u0000\u0000"+
		"\u0000\u0219\u020f\u0001\u0000\u0000\u0000\u0219\u0210\u0001\u0000\u0000"+
		"\u0000\u0219\u0211\u0001\u0000\u0000\u0000\u0219\u0212\u0001\u0000\u0000"+
		"\u0000\u0219\u0213\u0001\u0000\u0000\u0000\u0219\u0214\u0001\u0000\u0000"+
		"\u0000\u0219\u0215\u0001\u0000\u0000\u0000\u0219\u0216\u0001\u0000\u0000"+
		"\u0000\u0219\u0217\u0001\u0000\u0000\u0000\u0219\u0218\u0001\u0000\u0000"+
		"\u0000\u021a\u001b\u0001\u0000\u0000\u0000\u021b\u021c\u0005\u00b2\u0000"+
		"\u0000\u021c\u021d\u0007\u0004\u0000\u0000\u021d\u001d\u0001\u0000\u0000"+
		"\u0000\u021e\u0220\u0005\u01c1\u0000\u0000\u021f\u0221\u0005\u044b\u0000"+
		"\u0000\u0220\u021f\u0001\u0000\u0000\u0000\u0220\u0221\u0001\u0000\u0000"+
		"\u0000\u0221\u0222\u0001\u0000\u0000\u0000\u0222\u023d\u0003\u00e4r\u0000"+
		"\u0223\u023d\u0003\u001c\u000e\u0000\u0224\u0225\u0005\u00b7\u0000\u0000"+
		"\u0225\u0226\u0005\u020b\u0000\u0000\u0226\u023d\u0003\u00dcn\u0000\u0227"+
		"\u0228\u0005\u0164\u0000\u0000\u0228\u023d\u0005\u0463\u0000\u0000\u0229"+
		"\u023d\u0007\u0005\u0000\u0000\u022a\u022c\u0005\u0348\u0000\u0000\u022b"+
		"\u022d\u0005\u044b\u0000\u0000\u022c\u022b\u0001\u0000\u0000\u0000\u022c"+
		"\u022d\u0001\u0000\u0000\u0000\u022d\u022e\u0001\u0000\u0000\u0000\u022e"+
		"\u023d\u0005\u0463\u0000\u0000\u022f\u0231\u0005\u03c4\u0000\u0000\u0230"+
		"\u0232\u0005\u044b\u0000\u0000\u0231\u0230\u0001\u0000\u0000\u0000\u0231"+
		"\u0232\u0001\u0000\u0000\u0000\u0232\u0233\u0001\u0000\u0000\u0000\u0233"+
		"\u023d\u0005\u0463\u0000\u0000\u0234\u0235\u0005\u015e\u0000\u0000\u0235"+
		"\u0236\u0005\u044b\u0000\u0000\u0236\u023d\u0007\u0006\u0000\u0000\u0237"+
		"\u023b\u0005L\u0000\u0000\u0238\u0239\u0005l\u0000\u0000\u0239\u023b\u0005"+
		"L\u0000\u0000\u023a\u0237\u0001\u0000\u0000\u0000\u023a\u0238\u0001\u0000"+
		"\u0000\u0000\u023b\u023d\u0001\u0000\u0000\u0000\u023c\u021e\u0001\u0000"+
		"\u0000\u0000\u023c\u0223\u0001\u0000\u0000\u0000\u023c\u0224\u0001\u0000"+
		"\u0000\u0000\u023c\u0227\u0001\u0000\u0000\u0000\u023c\u0229\u0001\u0000"+
		"\u0000\u0000\u023c\u022a\u0001\u0000\u0000\u0000\u023c\u022f\u0001\u0000"+
		"\u0000\u0000\u023c\u0234\u0001\u0000\u0000\u0000\u023c\u023a\u0001\u0000"+
		"\u0000\u0000\u023d\u001f\u0001\u0000\u0000\u0000\u023e\u023f\u0005\u0454"+
		"\u0000\u0000\u023f\u0244\u0003\"\u0011\u0000\u0240\u0241\u0005\u0456\u0000"+
		"\u0000\u0241\u0243\u0003\"\u0011\u0000\u0242\u0240\u0001\u0000\u0000\u0000"+
		"\u0243\u0246\u0001\u0000\u0000\u0000\u0244\u0242\u0001\u0000\u0000\u0000"+
		"\u0244\u0245\u0001\u0000\u0000\u0000\u0245\u0247\u0001\u0000\u0000\u0000"+
		"\u0246\u0244\u0001\u0000\u0000\u0000\u0247\u0248\u0005\u0455\u0000\u0000"+
		"\u0248!\u0001\u0000\u0000\u0000\u0249\u024a\u0003\u00dcn\u0000\u024a\u024b"+
		"\u0003$\u0012\u0000\u024b\u024f\u0001\u0000\u0000\u0000\u024c\u024f\u0003"+
		"(\u0014\u0000\u024d\u024f\u00030\u0018\u0000\u024e\u0249\u0001\u0000\u0000"+
		"\u0000\u024e\u024c\u0001\u0000\u0000\u0000\u024e\u024d\u0001\u0000\u0000"+
		"\u0000\u024f#\u0001\u0000\u0000\u0000\u0250\u0254\u0003\u00f0x\u0000\u0251"+
		"\u0253\u0003&\u0013\u0000\u0252\u0251\u0001\u0000\u0000\u0000\u0253\u0256"+
		"\u0001\u0000\u0000\u0000\u0254\u0252\u0001\u0000\u0000\u0000\u0254\u0255"+
		"\u0001\u0000\u0000\u0000\u0255%\u0001\u0000\u0000\u0000\u0256\u0254\u0001"+
		"\u0000\u0000\u0000\u0257\u028d\u0003\u00ecv\u0000\u0258\u0259\u0005(\u0000"+
		"\u0000\u0259\u028d\u0003\u0106\u0083\u0000\u025a\u028d\u0005\u0285\u0000"+
		"\u0000\u025b\u028d\u0005\u01b9\u0000\u0000\u025c\u0261\u0005\u014a\u0000"+
		"\u0000\u025d\u025e\u0005p\u0000\u0000\u025e\u025f\u0005\u00af\u0000\u0000"+
		"\u025f\u0261\u0003\u0108\u0084\u0000\u0260\u025c\u0001\u0000\u0000\u0000"+
		"\u0260\u025d\u0001\u0000\u0000\u0000\u0261\u028d\u0001\u0000\u0000\u0000"+
		"\u0262\u0264\u0005|\u0000\u0000\u0263\u0262\u0001\u0000\u0000\u0000\u0263"+
		"\u0264\u0001\u0000\u0000\u0000\u0264\u0265\u0001\u0000\u0000\u0000\u0265"+
		"\u028d\u0005X\u0000\u0000\u0266\u0268\u0005\u00ac\u0000\u0000\u0267\u0269"+
		"\u0005X\u0000\u0000\u0268\u0267\u0001\u0000\u0000\u0000\u0268\u0269\u0001"+
		"\u0000\u0000\u0000\u0269\u028d\u0001\u0000\u0000\u0000\u026a\u026b\u0005"+
		"\u0164\u0000\u0000\u026b\u028d\u0005\u0463\u0000\u0000\u026c\u026d\u0005"+
		"\u0162\u0000\u0000\u026d\u028d\u0007\u0007\u0000\u0000\u026e\u026f\u0005"+
		"\u0260\u0000\u0000\u026f\u028d\u0007\b\u0000\u0000\u0270\u028d\u0003*"+
		"\u0015\u0000\u0271\u0272\u0005\u001a\u0000\u0000\u0272\u028d\u0003\u00d8"+
		"l\u0000\u0273\u0274\u0005C\u0000\u0000\u0274\u0276\u0005\b\u0000\u0000"+
		"\u0275\u0273\u0001\u0000\u0000\u0000\u0275\u0276\u0001\u0000\u0000\u0000"+
		"\u0276\u0277\u0001\u0000\u0000\u0000\u0277\u0278\u0005\f\u0000\u0000\u0278"+
		"\u0279\u0005\u0454\u0000\u0000\u0279\u027a\u0003\u0138\u009c\u0000\u027a"+
		"\u027c\u0005\u0455\u0000\u0000\u027b\u027d\u0007\t\u0000\u0000\u027c\u027b"+
		"\u0001\u0000\u0000\u0000\u027c\u027d\u0001\u0000\u0000\u0000\u027d\u028d"+
		"\u0001\u0000\u0000\u0000\u027e\u027f\u0005\u00e6\u0000\u0000\u027f\u0280"+
		"\u0005(\u0000\u0000\u0280\u028d\u0005\u0281\u0000\u0000\u0281\u0283\u0005"+
		"\u001d\u0000\u0000\u0282\u0284\u0003\u00dcn\u0000\u0283\u0282\u0001\u0000"+
		"\u0000\u0000\u0283\u0284\u0001\u0000\u0000\u0000\u0284\u0286\u0001\u0000"+
		"\u0000\u0000\u0285\u0281\u0001\u0000\u0000\u0000\u0285\u0286\u0001\u0000"+
		"\u0000\u0000\u0286\u0287\u0001\u0000\u0000\u0000\u0287\u0288\u0005\u0019"+
		"\u0000\u0000\u0288\u0289\u0005\u0454\u0000\u0000\u0289\u028a\u0003\u0138"+
		"\u009c\u0000\u028a\u028b\u0005\u0455\u0000\u0000\u028b\u028d\u0001\u0000"+
		"\u0000\u0000\u028c\u0257\u0001\u0000\u0000\u0000\u028c\u0258\u0001\u0000"+
		"\u0000\u0000\u028c\u025a\u0001\u0000\u0000\u0000\u028c\u025b\u0001\u0000"+
		"\u0000\u0000\u028c\u0260\u0001\u0000\u0000\u0000\u028c\u0263\u0001\u0000"+
		"\u0000\u0000\u028c\u0266\u0001\u0000\u0000\u0000\u028c\u026a\u0001\u0000"+
		"\u0000\u0000\u028c\u026c\u0001\u0000\u0000\u0000\u028c\u026e\u0001\u0000"+
		"\u0000\u0000\u028c\u0270\u0001\u0000\u0000\u0000\u028c\u0271\u0001\u0000"+
		"\u0000\u0000\u028c\u0275\u0001\u0000\u0000\u0000\u028c\u027e\u0001\u0000"+
		"\u0000\u0000\u028c\u0285\u0001\u0000\u0000\u0000\u028d\'\u0001\u0000\u0000"+
		"\u0000\u028e\u0290\u0005\u001d\u0000\u0000\u028f\u0291\u0003\u00dcn\u0000"+
		"\u0290\u028f\u0001\u0000\u0000\u0000\u0290\u0291\u0001\u0000\u0000\u0000"+
		"\u0291\u0293\u0001\u0000\u0000\u0000\u0292\u028e\u0001\u0000\u0000\u0000"+
		"\u0292\u0293\u0001\u0000\u0000\u0000\u0293\u0294\u0001\u0000\u0000\u0000"+
		"\u0294\u0295\u0005|\u0000\u0000\u0295\u0297\u0005X\u0000\u0000\u0296\u0298"+
		"\u0003\u00dcn\u0000\u0297\u0296\u0001\u0000\u0000\u0000\u0297\u0298\u0001"+
		"\u0000\u0000\u0000\u0298\u029a\u0001\u0000\u0000\u0000\u0299\u029b\u0003"+
		"\u001c\u000e\u0000\u029a\u0299\u0001\u0000\u0000\u0000\u029a\u029b\u0001"+
		"\u0000\u0000\u0000\u029b\u029c\u0001\u0000\u0000\u0000\u029c\u02a0\u0003"+
		"\u0100\u0080\u0000\u029d\u029f\u0003\u001e\u000f\u0000\u029e\u029d\u0001"+
		"\u0000\u0000\u0000\u029f\u02a2\u0001\u0000\u0000\u0000\u02a0\u029e\u0001"+
		"\u0000\u0000\u0000\u02a0\u02a1\u0001\u0000\u0000\u0000\u02a1\u02d4\u0001"+
		"\u0000\u0000\u0000\u02a2\u02a0\u0001\u0000\u0000\u0000\u02a3\u02a5\u0005"+
		"\u001d\u0000\u0000\u02a4\u02a6\u0003\u00dcn\u0000\u02a5\u02a4\u0001\u0000"+
		"\u0000\u0000\u02a5\u02a6\u0001\u0000\u0000\u0000\u02a6\u02a8\u0001\u0000"+
		"\u0000\u0000\u02a7\u02a3\u0001\u0000\u0000\u0000\u02a7\u02a8\u0001\u0000"+
		"\u0000\u0000\u02a8\u02a9\u0001\u0000\u0000\u0000\u02a9\u02ab\u0005\u00ac"+
		"\u0000\u0000\u02aa\u02ac\u0007\n\u0000\u0000\u02ab\u02aa\u0001\u0000\u0000"+
		"\u0000\u02ab\u02ac\u0001\u0000\u0000\u0000\u02ac\u02ae\u0001\u0000\u0000"+
		"\u0000\u02ad\u02af\u0003\u00dcn\u0000\u02ae\u02ad\u0001\u0000\u0000\u0000"+
		"\u02ae\u02af\u0001\u0000\u0000\u0000\u02af\u02b1\u0001\u0000\u0000\u0000"+
		"\u02b0\u02b2\u0003\u001c\u000e\u0000\u02b1\u02b0\u0001\u0000\u0000\u0000"+
		"\u02b1\u02b2\u0001\u0000\u0000\u0000\u02b2\u02b3\u0001\u0000\u0000\u0000"+
		"\u02b3\u02b7\u0003\u0100\u0080\u0000\u02b4\u02b6\u0003\u001e\u000f\u0000"+
		"\u02b5\u02b4\u0001\u0000\u0000\u0000\u02b6\u02b9\u0001\u0000\u0000\u0000"+
		"\u02b7\u02b5\u0001\u0000\u0000\u0000\u02b7\u02b8\u0001\u0000\u0000\u0000"+
		"\u02b8\u02d4\u0001\u0000\u0000\u0000\u02b9\u02b7\u0001\u0000\u0000\u0000"+
		"\u02ba\u02bc\u0005\u001d\u0000\u0000\u02bb\u02bd\u0003\u00dcn\u0000\u02bc"+
		"\u02bb\u0001\u0000\u0000\u0000\u02bc\u02bd\u0001\u0000\u0000\u0000\u02bd"+
		"\u02bf\u0001\u0000\u0000\u0000\u02be\u02ba\u0001\u0000\u0000\u0000\u02be"+
		"\u02bf\u0001\u0000\u0000\u0000\u02bf\u02c0\u0001\u0000\u0000\u0000\u02c0"+
		"\u02c1\u0005@\u0000\u0000\u02c1\u02c3\u0005X\u0000\u0000\u02c2\u02c4\u0003"+
		"\u00dcn\u0000\u02c3\u02c2\u0001\u0000\u0000\u0000\u02c3\u02c4\u0001\u0000"+
		"\u0000\u0000\u02c4\u02c5\u0001\u0000\u0000\u0000\u02c5\u02c6\u0003\u0100"+
		"\u0080\u0000\u02c6\u02c7\u0003*\u0015\u0000\u02c7\u02d4\u0001\u0000\u0000"+
		"\u0000\u02c8\u02ca\u0005\u001d\u0000\u0000\u02c9\u02cb\u0003\u00dcn\u0000"+
		"\u02ca\u02c9\u0001\u0000\u0000\u0000\u02ca\u02cb\u0001\u0000\u0000\u0000"+
		"\u02cb\u02cd\u0001\u0000\u0000\u0000\u02cc\u02c8\u0001\u0000\u0000\u0000"+
		"\u02cc\u02cd\u0001\u0000\u0000\u0000\u02cd\u02ce\u0001\u0000\u0000\u0000"+
		"\u02ce\u02cf\u0005\u0019\u0000\u0000\u02cf\u02d0\u0005\u0454\u0000\u0000"+
		"\u02d0\u02d1\u0003\u0138\u009c\u0000\u02d1\u02d2\u0005\u0455\u0000\u0000"+
		"\u02d2\u02d4\u0001\u0000\u0000\u0000\u02d3\u0292\u0001\u0000\u0000\u0000"+
		"\u02d3\u02a7\u0001\u0000\u0000\u0000\u02d3\u02be\u0001\u0000\u0000\u0000"+
		"\u02d3\u02cc\u0001\u0000\u0000\u0000\u02d4)\u0001\u0000\u0000\u0000\u02d5"+
		"\u02d6\u0005\u0082\u0000\u0000\u02d6\u02d8\u0003\u00ceg\u0000\u02d7\u02d9"+
		"\u0003\u0100\u0080\u0000\u02d8\u02d7\u0001\u0000\u0000\u0000\u02d8\u02d9"+
		"\u0001\u0000\u0000\u0000\u02d9\u02dc\u0001\u0000\u0000\u0000\u02da\u02db"+
		"\u0005h\u0000\u0000\u02db\u02dd\u0007\u000b\u0000\u0000\u02dc\u02da\u0001"+
		"\u0000\u0000\u0000\u02dc\u02dd\u0001\u0000\u0000\u0000\u02dd\u02df\u0001"+
		"\u0000\u0000\u0000\u02de\u02e0\u0003,\u0016\u0000\u02df\u02de\u0001\u0000"+
		"\u0000\u0000\u02df\u02e0\u0001\u0000\u0000\u0000\u02e0+\u0001\u0000\u0000"+
		"\u0000\u02e1\u02e2\u0005p\u0000\u0000\u02e2\u02e3\u0005*\u0000\u0000\u02e3"+
		"\u02e7\u0003.\u0017\u0000\u02e4\u02e5\u0005p\u0000\u0000\u02e5\u02e6\u0005"+
		"\u00af\u0000\u0000\u02e6\u02e8\u0003.\u0017\u0000\u02e7\u02e4\u0001\u0000"+
		"\u0000\u0000\u02e7\u02e8\u0001\u0000\u0000\u0000\u02e8\u02f2\u0001\u0000"+
		"\u0000\u0000\u02e9\u02ea\u0005p\u0000\u0000\u02ea\u02eb\u0005\u00af\u0000"+
		"\u0000\u02eb\u02ef\u0003.\u0017\u0000\u02ec\u02ed\u0005p\u0000\u0000\u02ed"+
		"\u02ee\u0005*\u0000\u0000\u02ee\u02f0\u0003.\u0017\u0000\u02ef\u02ec\u0001"+
		"\u0000\u0000\u0000\u02ef\u02f0\u0001\u0000\u0000\u0000\u02f0\u02f2\u0001"+
		"\u0000\u0000\u0000\u02f1\u02e1\u0001\u0000\u0000\u0000\u02f1\u02e9\u0001"+
		"\u0000\u0000\u0000\u02f2-\u0001\u0000\u0000\u0000\u02f3\u02fa\u0005\u008a"+
		"\u0000\u0000\u02f4\u02fa\u0005\u0014\u0000\u0000\u02f5\u02f6\u0005\u0093"+
		"\u0000\u0000\u02f6\u02fa\u0005n\u0000\u0000\u02f7\u02f8\u0005\u01f7\u0000"+
		"\u0000\u02f8\u02fa\u0005\u0141\u0000\u0000\u02f9\u02f3\u0001\u0000\u0000"+
		"\u0000\u02f9\u02f4\u0001\u0000\u0000\u0000\u02f9\u02f5\u0001\u0000\u0000"+
		"\u0000\u02f9\u02f7\u0001\u0000\u0000\u0000\u02fa/\u0001\u0000\u0000\u0000"+
		"\u02fb\u02fd\u0007\n\u0000\u0000\u02fc\u02fe\u0003\u00dcn\u0000\u02fd"+
		"\u02fc\u0001\u0000\u0000\u0000\u02fd\u02fe\u0001\u0000\u0000\u0000\u02fe"+
		"\u0300\u0001\u0000\u0000\u0000\u02ff\u0301\u0003\u001c\u000e\u0000\u0300"+
		"\u02ff\u0001\u0000\u0000\u0000\u0300\u0301\u0001\u0000\u0000\u0000\u0301"+
		"\u0302\u0001\u0000\u0000\u0000\u0302\u0306\u0003\u0100\u0080\u0000\u0303"+
		"\u0305\u0003\u001e\u000f\u0000\u0304\u0303\u0001\u0000\u0000\u0000\u0305"+
		"\u0308\u0001\u0000\u0000\u0000\u0306\u0304\u0001\u0000\u0000\u0000\u0306"+
		"\u0307\u0001\u0000\u0000\u0000\u0307\u0318\u0001\u0000\u0000\u0000\u0308"+
		"\u0306\u0001\u0000\u0000\u0000\u0309\u030b\u0007\f\u0000\u0000\u030a\u030c"+
		"\u0007\n\u0000\u0000\u030b\u030a\u0001\u0000\u0000\u0000\u030b\u030c\u0001"+
		"\u0000\u0000\u0000\u030c\u030e\u0001\u0000\u0000\u0000\u030d\u030f\u0003"+
		"\u00dcn\u0000\u030e\u030d\u0001\u0000\u0000\u0000\u030e\u030f\u0001\u0000"+
		"\u0000\u0000\u030f\u0310\u0001\u0000\u0000\u0000\u0310\u0314\u0003\u0100"+
		"\u0080\u0000\u0311\u0313\u0003\u001e\u000f\u0000\u0312\u0311\u0001\u0000"+
		"\u0000\u0000\u0313\u0316\u0001\u0000\u0000\u0000\u0314\u0312\u0001\u0000"+
		"\u0000\u0000\u0314\u0315\u0001\u0000\u0000\u0000\u0315\u0318\u0001\u0000"+
		"\u0000\u0000\u0316\u0314\u0001\u0000\u0000\u0000\u0317\u02fb\u0001\u0000"+
		"\u0000\u0000\u0317\u0309\u0001\u0000\u0000\u0000\u03181\u0001\u0000\u0000"+
		"\u0000\u0319\u031b\u0005\u018a\u0000\u0000\u031a\u031c\u0005\u044b\u0000"+
		"\u0000\u031b\u031a\u0001\u0000\u0000\u0000\u031b\u031c\u0001\u0000\u0000"+
		"\u0000\u031c\u031e\u0001\u0000\u0000\u0000\u031d\u031f\u0003\u00dam\u0000"+
		"\u031e\u031d\u0001\u0000\u0000\u0000\u031e\u031f\u0001\u0000\u0000\u0000"+
		"\u031f\u03ab\u0001\u0000\u0000\u0000\u0320\u0322\u0005\u014a\u0000\u0000"+
		"\u0321\u0323\u0005\u044b\u0000\u0000\u0322\u0321\u0001\u0000\u0000\u0000"+
		"\u0322\u0323\u0001\u0000\u0000\u0000\u0323\u0324\u0001\u0000\u0000\u0000"+
		"\u0324\u03ab\u0003\u00e2q\u0000\u0325\u0327\u0005\u014b\u0000\u0000\u0326"+
		"\u0328\u0005\u044b\u0000\u0000\u0327\u0326\u0001\u0000\u0000\u0000\u0327"+
		"\u0328\u0001\u0000\u0000\u0000\u0328\u0329\u0001\u0000\u0000\u0000\u0329"+
		"\u03ab\u0003\u00e2q\u0000\u032a\u032c\u0005(\u0000\u0000\u032b\u032a\u0001"+
		"\u0000\u0000\u0000\u032b\u032c\u0001\u0000\u0000\u0000\u032c\u032d\u0001"+
		"\u0000\u0000\u0000\u032d\u032f\u0003\u0018\f\u0000\u032e\u0330\u0005\u044b"+
		"\u0000\u0000\u032f\u032e\u0001\u0000\u0000\u0000\u032f\u0330\u0001\u0000"+
		"\u0000\u0000\u0330\u0333\u0001\u0000\u0000\u0000\u0331\u0334\u0003\u00d6"+
		"k\u0000\u0332\u0334\u0005(\u0000\u0000\u0333\u0331\u0001\u0000\u0000\u0000"+
		"\u0333\u0332\u0001\u0000\u0000\u0000\u0334\u03ab\u0001\u0000\u0000\u0000"+
		"\u0335\u0337\u0007\r\u0000\u0000\u0336\u0338\u0005\u044b\u0000\u0000\u0337"+
		"\u0336\u0001\u0000\u0000\u0000\u0337\u0338\u0001\u0000\u0000\u0000\u0338"+
		"\u0339\u0001\u0000\u0000\u0000\u0339\u03ab\u0007\u000e\u0000\u0000\u033a"+
		"\u033c\u0005(\u0000\u0000\u033b\u033a\u0001\u0000\u0000\u0000\u033b\u033c"+
		"\u0001\u0000\u0000\u0000\u033c\u033d\u0001\u0000\u0000\u0000\u033d\u033f"+
		"\u0005\u001a\u0000\u0000\u033e\u0340\u0005\u044b\u0000\u0000\u033f\u033e"+
		"\u0001\u0000\u0000\u0000\u033f\u0340\u0001\u0000\u0000\u0000\u0340\u0341"+
		"\u0001\u0000\u0000\u0000\u0341\u03ab\u0003\u00d8l\u0000\u0342\u0344\u0005"+
		"\u0164\u0000\u0000\u0343\u0345\u0005\u044b\u0000\u0000\u0344\u0343\u0001"+
		"\u0000\u0000\u0000\u0344\u0345\u0001\u0000\u0000\u0000\u0345\u0346\u0001"+
		"\u0000\u0000\u0000\u0346\u03ab\u0005\u0463\u0000\u0000\u0347\u0349\u0005"+
		"\u0169\u0000\u0000\u0348\u034a\u0005\u044b\u0000\u0000\u0349\u0348\u0001"+
		"\u0000\u0000\u0000\u0349\u034a\u0001\u0000\u0000\u0000\u034a\u034b\u0001"+
		"\u0000\u0000\u0000\u034b\u03ab\u0007\u000f\u0000\u0000\u034c\u034e\u0005"+
		"\u016c\u0000\u0000\u034d\u034f\u0005\u044b\u0000\u0000\u034e\u034d\u0001"+
		"\u0000\u0000\u0000\u034e\u034f\u0001\u0000\u0000\u0000\u034f\u0350\u0001"+
		"\u0000\u0000\u0000\u0350\u03ab\u0005\u0463\u0000\u0000\u0351\u0352\u0005"+
		"\u0177\u0000\u0000\u0352\u0354\u0005\u017e\u0000\u0000\u0353\u0355\u0005"+
		"\u044b\u0000\u0000\u0354\u0353\u0001\u0000\u0000\u0000\u0354\u0355\u0001"+
		"\u0000\u0000\u0000\u0355\u0356\u0001\u0000\u0000\u0000\u0356\u03ab\u0005"+
		"\u0463\u0000\u0000\u0357\u0359\u0005\u017c\u0000\u0000\u0358\u035a\u0005"+
		"\u044b\u0000\u0000\u0359\u0358\u0001\u0000\u0000\u0000\u0359\u035a\u0001"+
		"\u0000\u0000\u0000\u035a\u035b\u0001\u0000\u0000\u0000\u035b\u03ab\u0007"+
		"\u000e\u0000\u0000\u035c\u035e\u0005\u0187\u0000\u0000\u035d\u035f\u0005"+
		"\u044b\u0000\u0000\u035e\u035d\u0001\u0000\u0000\u0000\u035e\u035f\u0001"+
		"\u0000\u0000\u0000\u035f\u0360\u0001\u0000\u0000\u0000\u0360\u03ab\u0005"+
		"\u0463\u0000\u0000\u0361\u0362\u0005N\u0000\u0000\u0362\u0364\u0005\u017e"+
		"\u0000\u0000\u0363\u0365\u0005\u044b\u0000\u0000\u0364\u0363\u0001\u0000"+
		"\u0000\u0000\u0364\u0365\u0001\u0000\u0000\u0000\u0365\u0366\u0001\u0000"+
		"\u0000\u0000\u0366\u03ab\u0005\u0463\u0000\u0000\u0367\u0369\u0005\u01b5"+
		"\u0000\u0000\u0368\u036a\u0005\u044b\u0000\u0000\u0369\u0368\u0001\u0000"+
		"\u0000\u0000\u0369\u036a\u0001\u0000\u0000\u0000\u036a\u036b\u0001\u0000"+
		"\u0000\u0000\u036b\u03ab\u0007\u0010\u0000\u0000\u036c\u036e\u0005\u01c1"+
		"\u0000\u0000\u036d\u036f\u0005\u044b\u0000\u0000\u036e\u036d\u0001\u0000"+
		"\u0000\u0000\u036e\u036f\u0001\u0000\u0000\u0000\u036f\u0370\u0001\u0000"+
		"\u0000\u0000\u0370\u03ab\u0003\u00e4r\u0000\u0371\u0373\u0005\u01e2\u0000"+
		"\u0000\u0372\u0374\u0005\u044b\u0000\u0000\u0373\u0372\u0001\u0000\u0000"+
		"\u0000\u0373\u0374\u0001\u0000\u0000\u0000\u0374\u0375\u0001\u0000\u0000"+
		"\u0000\u0375\u03ab\u0003\u00e2q\u0000\u0376\u0378\u0005\u01ec\u0000\u0000"+
		"\u0377\u0379\u0005\u044b\u0000\u0000\u0378\u0377\u0001\u0000\u0000\u0000"+
		"\u0378\u0379\u0001\u0000\u0000\u0000\u0379\u037a\u0001\u0000\u0000\u0000"+
		"\u037a\u03ab\u0003\u00e2q\u0000\u037b\u037d\u0005\u0209\u0000\u0000\u037c"+
		"\u037e\u0005\u044b\u0000\u0000\u037d\u037c\u0001\u0000\u0000\u0000\u037d"+
		"\u037e\u0001\u0000\u0000\u0000\u037e\u037f\u0001\u0000\u0000\u0000\u037f"+
		"\u03ab\u0007\u0011\u0000\u0000\u0380\u0382\u0005\u020f\u0000\u0000\u0381"+
		"\u0383\u0005\u044b\u0000\u0000\u0382\u0381\u0001\u0000\u0000\u0000\u0382"+
		"\u0383\u0001\u0000\u0000\u0000\u0383\u0384\u0001\u0000\u0000\u0000\u0384"+
		"\u03ab\u0005\u0463\u0000\u0000\u0385\u0387\u0005\u023f\u0000\u0000\u0386"+
		"\u0388\u0005\u044b\u0000\u0000\u0387\u0386\u0001\u0000\u0000\u0000\u0387"+
		"\u0388\u0001\u0000\u0000\u0000\u0388\u0389\u0001\u0000\u0000\u0000\u0389"+
		"\u03ab\u0007\u0012\u0000\u0000\u038a\u038c\u0005\u025b\u0000\u0000\u038b"+
		"\u038d\u0005\u044b\u0000\u0000\u038c\u038b\u0001\u0000\u0000\u0000\u038c"+
		"\u038d\u0001\u0000\u0000\u0000\u038d\u038e\u0001\u0000\u0000\u0000\u038e"+
		"\u03ab\u0007\u0011\u0000\u0000\u038f\u0391\u0005\u025c\u0000\u0000\u0390"+
		"\u0392\u0005\u044b\u0000\u0000\u0391\u0390\u0001\u0000\u0000\u0000\u0391"+
		"\u0392\u0001\u0000\u0000\u0000\u0392\u0393\u0001\u0000\u0000\u0000\u0393"+
		"\u03ab\u0007\u0011\u0000\u0000\u0394\u0396\u0005\u025d\u0000\u0000\u0395"+
		"\u0397\u0005\u044b\u0000\u0000\u0396\u0395\u0001\u0000\u0000\u0000\u0396"+
		"\u0397\u0001\u0000\u0000\u0000\u0397\u0398\u0001\u0000\u0000\u0000\u0398"+
		"\u03ab\u0003\u00e2q\u0000\u0399\u039a\u0005\u026b\u0000\u0000\u039a\u039c"+
		"\u0003\u00dcn\u0000\u039b\u039d\u00036\u001b\u0000\u039c\u039b\u0001\u0000"+
		"\u0000\u0000\u039c\u039d\u0001\u0000\u0000\u0000\u039d\u03ab\u0001\u0000"+
		"\u0000\u0000\u039e\u039f\u0005\u026c\u0000\u0000\u039f\u03a0\u0005\u044b"+
		"\u0000\u0000\u03a0\u03ab\u00034\u001a\u0000\u03a1\u03ab\u00036\u001b\u0000"+
		"\u03a2\u03a4\u0005\u00ab\u0000\u0000\u03a3\u03a5\u0005\u044b\u0000\u0000"+
		"\u03a4\u03a3\u0001\u0000\u0000\u0000\u03a4\u03a5\u0001\u0000\u0000\u0000"+
		"\u03a5\u03a6\u0001\u0000\u0000\u0000\u03a6\u03a7\u0005\u0454\u0000\u0000"+
		"\u03a7\u03a8\u0003\u00fe\u007f\u0000\u03a8\u03a9\u0005\u0455\u0000\u0000"+
		"\u03a9\u03ab\u0001\u0000\u0000\u0000\u03aa\u0319\u0001\u0000\u0000\u0000"+
		"\u03aa\u0320\u0001\u0000\u0000\u0000\u03aa\u0325\u0001\u0000\u0000\u0000"+
		"\u03aa\u032b\u0001\u0000\u0000\u0000\u03aa\u0335\u0001\u0000\u0000\u0000"+
		"\u03aa\u033b\u0001\u0000\u0000\u0000\u03aa\u0342\u0001\u0000\u0000\u0000"+
		"\u03aa\u0347\u0001\u0000\u0000\u0000\u03aa\u034c\u0001\u0000\u0000\u0000"+
		"\u03aa\u0351\u0001\u0000\u0000\u0000\u03aa\u0357\u0001\u0000\u0000\u0000"+
		"\u03aa\u035c\u0001\u0000\u0000\u0000\u03aa\u0361\u0001\u0000\u0000\u0000"+
		"\u03aa\u0367\u0001\u0000\u0000\u0000\u03aa\u036c\u0001\u0000\u0000\u0000"+
		"\u03aa\u0371\u0001\u0000\u0000\u0000\u03aa\u0376\u0001\u0000\u0000\u0000"+
		"\u03aa\u037b\u0001\u0000\u0000\u0000\u03aa\u0380\u0001\u0000\u0000\u0000"+
		"\u03aa\u0385\u0001\u0000\u0000\u0000\u03aa\u038a\u0001\u0000\u0000\u0000"+
		"\u03aa\u038f\u0001\u0000\u0000\u0000\u03aa\u0394\u0001\u0000\u0000\u0000"+
		"\u03aa\u0399\u0001\u0000\u0000\u0000\u03aa\u039e\u0001\u0000\u0000\u0000"+
		"\u03aa\u03a1\u0001\u0000\u0000\u0000\u03aa\u03a2\u0001\u0000\u0000\u0000"+
		"\u03ab3\u0001\u0000\u0000\u0000\u03ac\u03ad\u0007\u0013\u0000\u0000\u03ad"+
		"5\u0001\u0000\u0000\u0000\u03ae\u03af\u0005\u0260\u0000\u0000\u03af\u03b0"+
		"\u0007\b\u0000\u0000\u03b07\u0001\u0000\u0000\u0000\u03b1\u03b2\u0005"+
		"{\u0000\u0000\u03b2\u03b3\u0005\u0012\u0000\u0000\u03b3\u03b6\u0003:\u001d"+
		"\u0000\u03b4\u03b5\u0005\u020e\u0000\u0000\u03b5\u03b7\u0003\u00e2q\u0000"+
		"\u03b6\u03b4\u0001\u0000\u0000\u0000\u03b6\u03b7\u0001\u0000\u0000\u0000"+
		"\u03b7\u03bf\u0001\u0000\u0000\u0000\u03b8\u03b9\u0005\u0265\u0000\u0000"+
		"\u03b9\u03ba\u0005\u0012\u0000\u0000\u03ba\u03bd\u0003<\u001e\u0000\u03bb"+
		"\u03bc\u0005\u0266\u0000\u0000\u03bc\u03be\u0003\u00e2q\u0000\u03bd\u03bb"+
		"\u0001\u0000\u0000\u0000\u03bd\u03be\u0001\u0000\u0000\u0000\u03be\u03c0"+
		"\u0001\u0000\u0000\u0000\u03bf\u03b8\u0001\u0000\u0000\u0000\u03bf\u03c0"+
		"\u0001\u0000\u0000\u0000\u03c0\u03cc\u0001\u0000\u0000\u0000\u03c1\u03c2"+
		"\u0005\u0454\u0000\u0000\u03c2\u03c7\u0003>\u001f\u0000\u03c3\u03c4\u0005"+
		"\u0456\u0000\u0000\u03c4\u03c6\u0003>\u001f\u0000\u03c5\u03c3\u0001\u0000"+
		"\u0000\u0000\u03c6\u03c9\u0001\u0000\u0000\u0000\u03c7\u03c5\u0001\u0000"+
		"\u0000\u0000\u03c7\u03c8\u0001\u0000\u0000\u0000\u03c8\u03ca\u0001\u0000"+
		"\u0000\u0000\u03c9\u03c7\u0001\u0000\u0000\u0000\u03ca\u03cb\u0005\u0455"+
		"\u0000\u0000\u03cb\u03cd\u0001\u0000\u0000\u0000\u03cc\u03c1\u0001\u0000"+
		"\u0000\u0000\u03cc\u03cd\u0001\u0000\u0000\u0000\u03cd9\u0001\u0000\u0000"+
		"\u0000\u03ce\u03d0\u0005`\u0000\u0000\u03cf\u03ce\u0001\u0000\u0000\u0000"+
		"\u03cf\u03d0\u0001\u0000\u0000\u0000\u03d0\u03d1\u0001\u0000\u0000\u0000"+
		"\u03d1\u03d2\u0005\u01ab\u0000\u0000\u03d2\u03d3\u0005\u0454\u0000\u0000"+
		"\u03d3\u03d4\u0003\u0138\u009c\u0000\u03d4\u03d5\u0005\u0455\u0000\u0000"+
		"\u03d5\u03fc\u0001\u0000\u0000\u0000\u03d6\u03d8\u0005`\u0000\u0000\u03d7"+
		"\u03d6\u0001\u0000\u0000\u0000\u03d7\u03d8\u0001\u0000\u0000\u0000\u03d8"+
		"\u03d9\u0001\u0000\u0000\u0000\u03d9\u03dd\u0005X\u0000\u0000\u03da\u03db"+
		"\u0005\u0144\u0000\u0000\u03db\u03dc\u0005\u044b\u0000\u0000\u03dc\u03de"+
		"\u0007\u0014\u0000\u0000\u03dd\u03da\u0001\u0000\u0000\u0000\u03dd\u03de"+
		"\u0001\u0000\u0000\u0000\u03de\u03df\u0001\u0000\u0000\u0000\u03df\u03e0"+
		"\u0005\u0454\u0000\u0000\u03e0\u03e1\u0003\u00fc~\u0000\u03e1\u03e2\u0005"+
		"\u0455\u0000\u0000\u03e2\u03fc\u0001\u0000\u0000\u0000\u03e3\u03ed\u0005"+
		"\u007f\u0000\u0000\u03e4\u03e5\u0005\u0454\u0000\u0000\u03e5\u03e6\u0003"+
		"\u0138\u009c\u0000\u03e6\u03e7\u0005\u0455\u0000\u0000\u03e7\u03ee\u0001"+
		"\u0000\u0000\u0000\u03e8\u03e9\u0005\u0161\u0000\u0000\u03e9\u03ea\u0005"+
		"\u0454\u0000\u0000\u03ea\u03eb\u0003\u00fc~\u0000\u03eb\u03ec\u0005\u0455"+
		"\u0000\u0000\u03ec\u03ee\u0001\u0000\u0000\u0000\u03ed\u03e4\u0001\u0000"+
		"\u0000\u0000\u03ed\u03e8\u0001\u0000\u0000\u0000\u03ee\u03fc\u0001\u0000"+
		"\u0000\u0000\u03ef\u03f9\u0005\u01c7\u0000\u0000\u03f0\u03f1\u0005\u0454"+
		"\u0000\u0000\u03f1\u03f2\u0003\u0138\u009c\u0000\u03f2\u03f3\u0005\u0455"+
		"\u0000\u0000\u03f3\u03fa\u0001\u0000\u0000\u0000\u03f4\u03f5\u0005\u0161"+
		"\u0000\u0000\u03f5\u03f6\u0005\u0454\u0000\u0000\u03f6\u03f7\u0003\u00fc"+
		"~\u0000\u03f7\u03f8\u0005\u0455\u0000\u0000\u03f8\u03fa\u0001\u0000\u0000"+
		"\u0000\u03f9\u03f0\u0001\u0000\u0000\u0000\u03f9\u03f4\u0001\u0000\u0000"+
		"\u0000\u03fa\u03fc\u0001\u0000\u0000\u0000\u03fb\u03cf\u0001\u0000\u0000"+
		"\u0000\u03fb\u03d7\u0001\u0000\u0000\u0000\u03fb\u03e3\u0001\u0000\u0000"+
		"\u0000\u03fb\u03ef\u0001\u0000\u0000\u0000\u03fc;\u0001\u0000\u0000\u0000"+
		"\u03fd\u03ff\u0005`\u0000\u0000\u03fe\u03fd\u0001\u0000\u0000\u0000\u03fe"+
		"\u03ff\u0001\u0000\u0000\u0000\u03ff\u0400\u0001\u0000\u0000\u0000\u0400"+
		"\u0401\u0005\u01ab\u0000\u0000\u0401\u0402\u0005\u0454\u0000\u0000\u0402"+
		"\u0403\u0003\u0138\u009c\u0000\u0403\u0404\u0005\u0455\u0000\u0000\u0404"+
		"\u0413\u0001\u0000\u0000\u0000\u0405\u0407\u0005`\u0000\u0000\u0406\u0405"+
		"\u0001\u0000\u0000\u0000\u0406\u0407\u0001\u0000\u0000\u0000\u0407\u0408"+
		"\u0001\u0000\u0000\u0000\u0408\u040c\u0005X\u0000\u0000\u0409\u040a\u0005"+
		"\u0144\u0000\u0000\u040a\u040b\u0005\u044b\u0000\u0000\u040b\u040d\u0007"+
		"\u0014\u0000\u0000\u040c\u0409\u0001\u0000\u0000\u0000\u040c\u040d\u0001"+
		"\u0000\u0000\u0000\u040d\u040e\u0001\u0000\u0000\u0000\u040e\u040f\u0005"+
		"\u0454\u0000\u0000\u040f\u0410\u0003\u00fc~\u0000\u0410\u0411\u0005\u0455"+
		"\u0000\u0000\u0411\u0413\u0001\u0000\u0000\u0000\u0412\u03fe\u0001\u0000"+
		"\u0000\u0000\u0412\u0406\u0001\u0000\u0000\u0000\u0413=\u0001\u0000\u0000"+
		"\u0000\u0414\u0415\u0005{\u0000\u0000\u0415\u0416\u0003\u00dcn\u0000\u0416"+
		"\u0417\u0005\u00b3\u0000\u0000\u0417\u0418\u0005\u01c5\u0000\u0000\u0418"+
		"\u0419\u0005\u026f\u0000\u0000\u0419\u041a\u0005\u0454\u0000\u0000\u041a"+
		"\u041f\u0003@ \u0000\u041b\u041c\u0005\u0456\u0000\u0000\u041c\u041e\u0003"+
		"@ \u0000\u041d\u041b\u0001\u0000\u0000\u0000\u041e\u0421\u0001\u0000\u0000"+
		"\u0000\u041f\u041d\u0001\u0000\u0000\u0000\u041f\u0420\u0001\u0000\u0000"+
		"\u0000\u0420\u0422\u0001\u0000\u0000\u0000\u0421\u041f\u0001\u0000\u0000"+
		"\u0000\u0422\u0426\u0005\u0455\u0000\u0000\u0423\u0425\u0003F#\u0000\u0424"+
		"\u0423\u0001\u0000\u0000\u0000\u0425\u0428\u0001\u0000\u0000\u0000\u0426"+
		"\u0424\u0001\u0000\u0000\u0000\u0426\u0427\u0001\u0000\u0000\u0000\u0427"+
		"\u0434\u0001\u0000\u0000\u0000\u0428\u0426\u0001\u0000\u0000\u0000\u0429"+
		"\u042a\u0005\u0454\u0000\u0000\u042a\u042f\u0003D\"\u0000\u042b\u042c"+
		"\u0005\u0456\u0000\u0000\u042c\u042e\u0003D\"\u0000\u042d\u042b\u0001"+
		"\u0000\u0000\u0000\u042e\u0431\u0001\u0000\u0000\u0000\u042f\u042d\u0001"+
		"\u0000\u0000\u0000\u042f\u0430\u0001\u0000\u0000\u0000\u0430\u0432\u0001"+
		"\u0000\u0000\u0000\u0431\u042f\u0001\u0000\u0000\u0000\u0432\u0433\u0005"+
		"\u0455\u0000\u0000\u0433\u0435\u0001\u0000\u0000\u0000\u0434\u0429\u0001"+
		"\u0000\u0000\u0000\u0434\u0435\u0001\u0000\u0000\u0000\u0435\u04a7\u0001"+
		"\u0000\u0000\u0000\u0436\u0437\u0005{\u0000\u0000\u0437\u0438\u0003\u00dc"+
		"n\u0000\u0438\u0439\u0005\u00b3\u0000\u0000\u0439\u043a\u0005\u01c5\u0000"+
		"\u0000\u043a\u043b\u0005\u026f\u0000\u0000\u043b\u043f\u0003@ \u0000\u043c"+
		"\u043e\u0003F#\u0000\u043d\u043c\u0001\u0000\u0000\u0000\u043e\u0441\u0001"+
		"\u0000\u0000\u0000\u043f\u043d\u0001\u0000\u0000\u0000\u043f\u0440\u0001"+
		"\u0000\u0000\u0000\u0440\u044d\u0001\u0000\u0000\u0000\u0441\u043f\u0001"+
		"\u0000\u0000\u0000\u0442\u0443\u0005\u0454\u0000\u0000\u0443\u0448\u0003"+
		"D\"\u0000\u0444\u0445\u0005\u0456\u0000\u0000\u0445\u0447\u0003D\"\u0000"+
		"\u0446\u0444\u0001\u0000\u0000\u0000\u0447\u044a\u0001\u0000\u0000\u0000"+
		"\u0448\u0446\u0001\u0000\u0000\u0000\u0448\u0449\u0001\u0000\u0000\u0000"+
		"\u0449\u044b\u0001\u0000\u0000\u0000\u044a\u0448\u0001\u0000\u0000\u0000"+
		"\u044b\u044c\u0005\u0455\u0000\u0000\u044c\u044e\u0001\u0000\u0000\u0000"+
		"\u044d\u0442\u0001\u0000\u0000\u0000\u044d\u044e\u0001\u0000\u0000\u0000"+
		"\u044e\u04a7\u0001\u0000\u0000\u0000\u044f\u0450\u0005{\u0000\u0000\u0450"+
		"\u0451\u0003\u00dcn\u0000\u0451\u0452\u0005\u00b3\u0000\u0000\u0452\u0453"+
		"\u0005M\u0000\u0000\u0453\u0454\u0005\u0454\u0000\u0000\u0454\u0459\u0003"+
		"@ \u0000\u0455\u0456\u0005\u0456\u0000\u0000\u0456\u0458\u0003@ \u0000"+
		"\u0457\u0455\u0001\u0000\u0000\u0000\u0458\u045b\u0001\u0000\u0000\u0000"+
		"\u0459\u0457\u0001\u0000\u0000\u0000\u0459\u045a\u0001\u0000\u0000\u0000"+
		"\u045a\u045c\u0001\u0000\u0000\u0000\u045b\u0459\u0001\u0000\u0000\u0000"+
		"\u045c\u0460\u0005\u0455\u0000\u0000\u045d\u045f\u0003F#\u0000\u045e\u045d"+
		"\u0001\u0000\u0000\u0000\u045f\u0462\u0001\u0000\u0000\u0000\u0460\u045e"+
		"\u0001\u0000\u0000\u0000\u0460\u0461\u0001\u0000\u0000\u0000\u0461\u046e"+
		"\u0001\u0000\u0000\u0000\u0462\u0460\u0001\u0000\u0000\u0000\u0463\u0464"+
		"\u0005\u0454\u0000\u0000\u0464\u0469\u0003D\"\u0000\u0465\u0466\u0005"+
		"\u0456\u0000\u0000\u0466\u0468\u0003D\"\u0000\u0467\u0465\u0001\u0000"+
		"\u0000\u0000\u0468\u046b\u0001\u0000\u0000\u0000\u0469\u0467\u0001\u0000"+
		"\u0000\u0000\u0469\u046a\u0001\u0000\u0000\u0000\u046a\u046c\u0001\u0000"+
		"\u0000\u0000\u046b\u0469\u0001\u0000\u0000\u0000\u046c\u046d\u0005\u0455"+
		"\u0000\u0000\u046d\u046f\u0001\u0000\u0000\u0000\u046e\u0463\u0001\u0000"+
		"\u0000\u0000\u046e\u046f\u0001\u0000\u0000\u0000\u046f\u04a7\u0001\u0000"+
		"\u0000\u0000\u0470\u0471\u0005{\u0000\u0000\u0471\u0472\u0003\u00dcn\u0000"+
		"\u0472\u0473\u0005\u00b3\u0000\u0000\u0473\u0474\u0005M\u0000\u0000\u0474"+
		"\u0475\u0005\u0454\u0000\u0000\u0475\u047a\u0003B!\u0000\u0476\u0477\u0005"+
		"\u0456\u0000\u0000\u0477\u0479\u0003B!\u0000\u0478\u0476\u0001\u0000\u0000"+
		"\u0000\u0479\u047c\u0001\u0000\u0000\u0000\u047a\u0478\u0001\u0000\u0000"+
		"\u0000\u047a\u047b\u0001\u0000\u0000\u0000\u047b\u047d\u0001\u0000\u0000"+
		"\u0000\u047c\u047a\u0001\u0000\u0000\u0000\u047d\u0481\u0005\u0455\u0000"+
		"\u0000\u047e\u0480\u0003F#\u0000\u047f\u047e\u0001\u0000\u0000\u0000\u0480"+
		"\u0483\u0001\u0000\u0000\u0000\u0481\u047f\u0001\u0000\u0000\u0000\u0481"+
		"\u0482\u0001\u0000\u0000\u0000\u0482\u048f\u0001\u0000\u0000\u0000\u0483"+
		"\u0481\u0001\u0000\u0000\u0000\u0484\u0485\u0005\u0454\u0000\u0000\u0485"+
		"\u048a\u0003D\"\u0000\u0486\u0487\u0005\u0456\u0000\u0000\u0487\u0489"+
		"\u0003D\"\u0000\u0488\u0486\u0001\u0000\u0000\u0000\u0489\u048c\u0001"+
		"\u0000\u0000\u0000\u048a\u0488\u0001\u0000\u0000\u0000\u048a\u048b\u0001"+
		"\u0000\u0000\u0000\u048b\u048d\u0001\u0000\u0000\u0000\u048c\u048a\u0001"+
		"\u0000\u0000\u0000\u048d\u048e\u0005\u0455\u0000\u0000\u048e\u0490\u0001"+
		"\u0000\u0000\u0000\u048f\u0484\u0001\u0000\u0000\u0000\u048f\u0490\u0001"+
		"\u0000\u0000\u0000\u0490\u04a7\u0001\u0000\u0000\u0000\u0491\u0492\u0005"+
		"{\u0000\u0000\u0492\u0496\u0003\u00dcn\u0000\u0493\u0495\u0003F#\u0000"+
		"\u0494\u0493\u0001\u0000\u0000\u0000\u0495\u0498\u0001\u0000\u0000\u0000"+
		"\u0496\u0494\u0001\u0000\u0000\u0000\u0496\u0497\u0001\u0000\u0000\u0000"+
		"\u0497\u04a4\u0001\u0000\u0000\u0000\u0498\u0496\u0001\u0000\u0000\u0000"+
		"\u0499\u049a\u0005\u0454\u0000\u0000\u049a\u049f\u0003D\"\u0000\u049b"+
		"\u049c\u0005\u0456\u0000\u0000\u049c\u049e\u0003D\"\u0000\u049d\u049b"+
		"\u0001\u0000\u0000\u0000\u049e\u04a1\u0001\u0000\u0000\u0000\u049f\u049d"+
		"\u0001\u0000\u0000\u0000\u049f\u04a0\u0001\u0000\u0000\u0000\u04a0\u04a2"+
		"\u0001\u0000\u0000\u0000\u04a1\u049f\u0001\u0000\u0000\u0000\u04a2\u04a3"+
		"\u0005\u0455\u0000\u0000\u04a3\u04a5\u0001\u0000\u0000\u0000\u04a4\u0499"+
		"\u0001\u0000\u0000\u0000\u04a4\u04a5\u0001\u0000\u0000\u0000\u04a5\u04a7"+
		"\u0001\u0000\u0000\u0000\u04a6\u0414\u0001\u0000\u0000\u0000\u04a6\u0436"+
		"\u0001\u0000\u0000\u0000\u04a6\u044f\u0001\u0000\u0000\u0000\u04a6\u0470"+
		"\u0001\u0000\u0000\u0000\u04a6\u0491\u0001\u0000\u0000\u0000\u04a7?\u0001"+
		"\u0000\u0000\u0000\u04a8\u04ac\u0003\u00eew\u0000\u04a9\u04ac\u0003\u0138"+
		"\u009c\u0000\u04aa\u04ac\u0005i\u0000\u0000\u04ab\u04a8\u0001\u0000\u0000"+
		"\u0000\u04ab\u04a9\u0001\u0000\u0000\u0000\u04ab\u04aa\u0001\u0000\u0000"+
		"\u0000\u04acA\u0001\u0000\u0000\u0000\u04ad\u04ae\u0005\u0454\u0000\u0000"+
		"\u04ae\u04b1\u0003@ \u0000\u04af\u04b0\u0005\u0456\u0000\u0000\u04b0\u04b2"+
		"\u0003@ \u0000\u04b1\u04af\u0001\u0000\u0000\u0000\u04b2\u04b3\u0001\u0000"+
		"\u0000\u0000\u04b3\u04b1\u0001\u0000\u0000\u0000\u04b3\u04b4\u0001\u0000"+
		"\u0000\u0000\u04b4\u04b5\u0001\u0000\u0000\u0000\u04b5\u04b6\u0005\u0455"+
		"\u0000\u0000\u04b6C\u0001\u0000\u0000\u0000\u04b7\u04b8\u0005\u0265\u0000"+
		"\u0000\u04b8\u04bc\u0003\u00dcn\u0000\u04b9\u04bb\u0003F#\u0000\u04ba"+
		"\u04b9\u0001\u0000\u0000\u0000\u04bb\u04be\u0001\u0000\u0000\u0000\u04bc"+
		"\u04ba\u0001\u0000\u0000\u0000\u04bc\u04bd\u0001\u0000\u0000\u0000\u04bd"+
		"E\u0001\u0000\u0000\u0000\u04be\u04bc\u0001\u0000\u0000\u0000\u04bf\u04c1"+
		"\u0005(\u0000\u0000\u04c0\u04bf\u0001\u0000\u0000\u0000\u04c0\u04c1\u0001"+
		"\u0000\u0000\u0000\u04c1\u04c3\u0001\u0000\u0000\u0000\u04c2\u04c4\u0005"+
		"\u0260\u0000\u0000\u04c3\u04c2\u0001\u0000\u0000\u0000\u04c3\u04c4\u0001"+
		"\u0000\u0000\u0000\u04c4\u04c5\u0001\u0000\u0000\u0000\u04c5\u04c7\u0005"+
		"\u018a\u0000\u0000\u04c6\u04c8\u0005\u044b\u0000\u0000\u04c7\u04c6\u0001"+
		"\u0000\u0000\u0000\u04c7\u04c8\u0001\u0000\u0000\u0000\u04c8\u04c9\u0001"+
		"\u0000\u0000\u0000\u04c9\u04f0\u0003\u00dam\u0000\u04ca\u04cc\u0005\u0164"+
		"\u0000\u0000\u04cb\u04cd\u0005\u044b\u0000\u0000\u04cc\u04cb\u0001\u0000"+
		"\u0000\u0000\u04cc\u04cd\u0001\u0000\u0000\u0000\u04cd\u04ce\u0001\u0000"+
		"\u0000\u0000\u04ce\u04f0\u0005\u0463\u0000\u0000\u04cf\u04d0\u0005\u0177"+
		"\u0000\u0000\u04d0\u04d2\u0005\u017e\u0000\u0000\u04d1\u04d3\u0005\u044b"+
		"\u0000\u0000\u04d2\u04d1\u0001\u0000\u0000\u0000\u04d2\u04d3\u0001\u0000"+
		"\u0000\u0000\u04d3\u04d4\u0001\u0000\u0000\u0000\u04d4\u04f0\u0005\u0463"+
		"\u0000\u0000\u04d5\u04d6\u0005N\u0000\u0000\u04d6\u04d8\u0005\u017e\u0000"+
		"\u0000\u04d7\u04d9\u0005\u044b\u0000\u0000\u04d8\u04d7\u0001\u0000\u0000"+
		"\u0000\u04d8\u04d9\u0001\u0000\u0000\u0000\u04d9\u04da\u0001\u0000\u0000"+
		"\u0000\u04da\u04f0\u0005\u0463\u0000\u0000\u04db\u04dd\u0005\u01e2\u0000"+
		"\u0000\u04dc\u04de\u0005\u044b\u0000\u0000\u04dd\u04dc\u0001\u0000\u0000"+
		"\u0000\u04dd\u04de\u0001\u0000\u0000\u0000\u04de\u04df\u0001\u0000\u0000"+
		"\u0000\u04df\u04f0\u0003\u00e2q\u0000\u04e0\u04e2\u0005\u01ec\u0000\u0000"+
		"\u04e1\u04e3\u0005\u044b\u0000\u0000\u04e2\u04e1\u0001\u0000\u0000\u0000"+
		"\u04e2\u04e3\u0001\u0000\u0000\u0000\u04e3\u04e4\u0001\u0000\u0000\u0000"+
		"\u04e4\u04f0\u0003\u00e2q\u0000\u04e5\u04e7\u0005\u026b\u0000\u0000\u04e6"+
		"\u04e8\u0005\u044b\u0000\u0000\u04e7\u04e6\u0001\u0000\u0000\u0000\u04e7"+
		"\u04e8\u0001\u0000\u0000\u0000\u04e8\u04e9\u0001\u0000\u0000\u0000\u04e9"+
		"\u04f0\u0003\u00dcn\u0000\u04ea\u04ec\u0005\u01fa\u0000\u0000\u04eb\u04ed"+
		"\u0005\u044b\u0000\u0000\u04ec\u04eb\u0001\u0000\u0000\u0000\u04ec\u04ed"+
		"\u0001\u0000\u0000\u0000\u04ed\u04ee\u0001\u0000\u0000\u0000\u04ee\u04f0"+
		"\u0003\u00dcn\u0000\u04ef\u04c0\u0001\u0000\u0000\u0000\u04ef\u04ca\u0001"+
		"\u0000\u0000\u0000\u04ef\u04cf\u0001\u0000\u0000\u0000\u04ef\u04d5\u0001"+
		"\u0000\u0000\u0000\u04ef\u04db\u0001\u0000\u0000\u0000\u04ef\u04e0\u0001"+
		"\u0000\u0000\u0000\u04ef\u04e5\u0001\u0000\u0000\u0000\u04ef\u04ea\u0001"+
		"\u0000\u0000\u0000\u04f0G\u0001\u0000\u0000\u0000\u04f1\u04f3\u0005\u0007"+
		"\u0000\u0000\u04f2\u04f4\u0007\u0000\u0000\u0000\u04f3\u04f2\u0001\u0000"+
		"\u0000\u0000\u04f3\u04f4\u0001\u0000\u0000\u0000\u04f4\u04f6\u0001\u0000"+
		"\u0000\u0000\u04f5\u04f7\u0005K\u0000\u0000\u04f6\u04f5\u0001\u0000\u0000"+
		"\u0000\u04f6\u04f7\u0001\u0000\u0000\u0000\u04f7\u04f8\u0001\u0000\u0000"+
		"\u0000\u04f8\u04f9\u0005\u00a3\u0000\u0000\u04f9\u0502\u0003\u00ceg\u0000"+
		"\u04fa\u04ff\u0003J%\u0000\u04fb\u04fc\u0005\u0456\u0000\u0000\u04fc\u04fe"+
		"\u0003J%\u0000\u04fd\u04fb\u0001\u0000\u0000\u0000\u04fe\u0501\u0001\u0000"+
		"\u0000\u0000\u04ff\u04fd\u0001\u0000\u0000\u0000\u04ff\u0500\u0001\u0000"+
		"\u0000\u0000\u0500\u0503\u0001\u0000\u0000\u0000\u0501\u04ff\u0001\u0000"+
		"\u0000\u0000\u0502\u04fa\u0001\u0000\u0000\u0000\u0502\u0503\u0001\u0000"+
		"\u0000\u0000\u0503\u0505\u0001\u0000\u0000\u0000\u0504\u0506\u00038\u001c"+
		"\u0000\u0505\u0504\u0001\u0000\u0000\u0000\u0505\u0506\u0001\u0000\u0000"+
		"\u0000\u0506I\u0001\u0000\u0000\u0000\u0507\u050e\u00032\u0019\u0000\u0508"+
		"\u050a\u0005\u0456\u0000\u0000\u0509\u0508\u0001\u0000\u0000\u0000\u0509"+
		"\u050a\u0001\u0000\u0000\u0000\u050a\u050b\u0001\u0000\u0000\u0000\u050b"+
		"\u050d\u00032\u0019\u0000\u050c\u0509\u0001\u0000\u0000\u0000\u050d\u0510"+
		"\u0001\u0000\u0000\u0000\u050e\u050c\u0001\u0000\u0000\u0000\u050e\u050f"+
		"\u0001\u0000\u0000\u0000\u050f\u069a\u0001\u0000\u0000\u0000\u0510\u050e"+
		"\u0001\u0000\u0000\u0000\u0511\u0513\u0005\u0005\u0000\u0000\u0512\u0514"+
		"\u0005\u001b\u0000\u0000\u0513\u0512\u0001\u0000\u0000\u0000\u0513\u0514"+
		"\u0001\u0000\u0000\u0000\u0514\u0516\u0001\u0000\u0000\u0000\u0515\u0517"+
		"\u0003\u010e\u0087\u0000\u0516\u0515\u0001\u0000\u0000\u0000\u0516\u0517"+
		"\u0001\u0000\u0000\u0000\u0517\u0518\u0001\u0000\u0000\u0000\u0518\u0519"+
		"\u0003\u00dcn\u0000\u0519\u051d\u0003$\u0012\u0000\u051a\u051e\u0005\u019e"+
		"\u0000\u0000\u051b\u051c\u0005\u0142\u0000\u0000\u051c\u051e\u0003\u00dc"+
		"n\u0000\u051d\u051a\u0001\u0000\u0000\u0000\u051d\u051b\u0001\u0000\u0000"+
		"\u0000\u051d\u051e\u0001\u0000\u0000\u0000\u051e\u069a\u0001\u0000\u0000"+
		"\u0000\u051f\u0521\u0005\u0005\u0000\u0000\u0520\u0522\u0005\u001b\u0000"+
		"\u0000\u0521\u0520\u0001\u0000\u0000\u0000\u0521\u0522\u0001\u0000\u0000"+
		"\u0000\u0522\u0524\u0001\u0000\u0000\u0000\u0523\u0525\u0003\u010e\u0087"+
		"\u0000\u0524\u0523\u0001\u0000\u0000\u0000\u0524\u0525\u0001\u0000\u0000"+
		"\u0000\u0525\u0526\u0001\u0000\u0000\u0000\u0526\u0527\u0005\u0454\u0000"+
		"\u0000\u0527\u0528\u0003\u00dcn\u0000\u0528\u052f\u0003$\u0012\u0000\u0529"+
		"\u052a\u0005\u0456\u0000\u0000\u052a\u052b\u0003\u00dcn\u0000\u052b\u052c"+
		"\u0003$\u0012\u0000\u052c\u052e\u0001\u0000\u0000\u0000\u052d\u0529\u0001"+
		"\u0000\u0000\u0000\u052e\u0531\u0001\u0000\u0000\u0000\u052f\u052d\u0001"+
		"\u0000\u0000\u0000\u052f\u0530\u0001\u0000\u0000\u0000\u0530\u0532\u0001"+
		"\u0000\u0000\u0000\u0531\u052f\u0001\u0000\u0000\u0000\u0532\u0533\u0005"+
		"\u0455\u0000\u0000\u0533\u069a\u0001\u0000\u0000\u0000\u0534\u0535\u0005"+
		"\u0005\u0000\u0000\u0535\u0537\u0007\n\u0000\u0000\u0536\u0538\u0003\u010e"+
		"\u0087\u0000\u0537\u0536\u0001\u0000\u0000\u0000\u0537\u0538\u0001\u0000"+
		"\u0000\u0000\u0538\u053a\u0001\u0000\u0000\u0000\u0539\u053b\u0003\u00dc"+
		"n\u0000\u053a\u0539\u0001\u0000\u0000\u0000\u053a\u053b\u0001\u0000\u0000"+
		"\u0000\u053b\u053d\u0001\u0000\u0000\u0000\u053c\u053e\u0003\u001c\u000e"+
		"\u0000\u053d\u053c\u0001\u0000\u0000\u0000\u053d\u053e\u0001\u0000\u0000"+
		"\u0000\u053e\u053f\u0001\u0000\u0000\u0000\u053f\u0543\u0003\u0100\u0080"+
		"\u0000\u0540\u0542\u0003\u001e\u000f\u0000\u0541\u0540\u0001\u0000\u0000"+
		"\u0000\u0542\u0545\u0001\u0000\u0000\u0000\u0543\u0541\u0001\u0000\u0000"+
		"\u0000\u0543\u0544\u0001\u0000\u0000\u0000\u0544\u069a\u0001\u0000\u0000"+
		"\u0000\u0545\u0543\u0001\u0000\u0000\u0000\u0546\u054b\u0005\u0005\u0000"+
		"\u0000\u0547\u0549\u0005\u001d\u0000\u0000\u0548\u054a\u0003\u00dcn\u0000"+
		"\u0549\u0548\u0001\u0000\u0000\u0000\u0549\u054a\u0001\u0000\u0000\u0000"+
		"\u054a\u054c\u0001\u0000\u0000\u0000\u054b\u0547\u0001\u0000\u0000\u0000"+
		"\u054b\u054c\u0001\u0000\u0000\u0000\u054c\u054d\u0001\u0000\u0000\u0000"+
		"\u054d\u054e\u0005|\u0000\u0000\u054e\u0550\u0005X\u0000\u0000\u054f\u0551"+
		"\u0003\u00dcn\u0000\u0550\u054f\u0001\u0000\u0000\u0000\u0550\u0551\u0001"+
		"\u0000\u0000\u0000\u0551\u0553\u0001\u0000\u0000\u0000\u0552\u0554\u0003"+
		"\u001c\u000e\u0000\u0553\u0552\u0001\u0000\u0000\u0000\u0553\u0554\u0001"+
		"\u0000\u0000\u0000\u0554\u0555\u0001\u0000\u0000\u0000\u0555\u0559\u0003"+
		"\u0100\u0080\u0000\u0556\u0558\u0003\u001e\u000f\u0000\u0557\u0556\u0001"+
		"\u0000\u0000\u0000\u0558\u055b\u0001\u0000\u0000\u0000\u0559\u0557\u0001"+
		"\u0000\u0000\u0000\u0559\u055a\u0001\u0000\u0000\u0000\u055a\u069a\u0001"+
		"\u0000\u0000\u0000\u055b\u0559\u0001\u0000\u0000\u0000\u055c\u0561\u0005"+
		"\u0005\u0000\u0000\u055d\u055f\u0005\u001d\u0000\u0000\u055e\u0560\u0003"+
		"\u00dcn\u0000\u055f\u055e\u0001\u0000\u0000\u0000\u055f\u0560\u0001\u0000"+
		"\u0000\u0000\u0560\u0562\u0001\u0000\u0000\u0000\u0561\u055d\u0001\u0000"+
		"\u0000\u0000\u0561\u0562\u0001\u0000\u0000\u0000\u0562\u0563\u0001\u0000"+
		"\u0000\u0000\u0563\u0565\u0005\u00ac\u0000\u0000\u0564\u0566\u0007\n\u0000"+
		"\u0000\u0565\u0564\u0001\u0000\u0000\u0000\u0565\u0566\u0001\u0000\u0000"+
		"\u0000\u0566\u0568\u0001\u0000\u0000\u0000\u0567\u0569\u0003\u00dcn\u0000"+
		"\u0568\u0567\u0001\u0000\u0000\u0000\u0568\u0569\u0001\u0000\u0000\u0000"+
		"\u0569\u056b\u0001\u0000\u0000\u0000\u056a\u056c\u0003\u001c\u000e\u0000"+
		"\u056b\u056a\u0001\u0000\u0000\u0000\u056b\u056c\u0001\u0000\u0000\u0000"+
		"\u056c\u056d\u0001\u0000\u0000\u0000\u056d\u0571\u0003\u0100\u0080\u0000"+
		"\u056e\u0570\u0003\u001e\u000f\u0000\u056f\u056e\u0001\u0000\u0000\u0000"+
		"\u0570\u0573\u0001\u0000\u0000\u0000\u0571\u056f\u0001\u0000\u0000\u0000"+
		"\u0571\u0572\u0001\u0000\u0000\u0000\u0572\u069a\u0001\u0000\u0000\u0000"+
		"\u0573\u0571\u0001\u0000\u0000\u0000\u0574\u0575\u0005\u0005\u0000\u0000"+
		"\u0575\u0577\u0007\f\u0000\u0000\u0576\u0578\u0007\n\u0000\u0000\u0577"+
		"\u0576\u0001\u0000\u0000\u0000\u0577\u0578\u0001\u0000\u0000\u0000\u0578"+
		"\u057a\u0001\u0000\u0000\u0000\u0579\u057b\u0003\u00dcn\u0000\u057a\u0579"+
		"\u0001\u0000\u0000\u0000\u057a\u057b\u0001\u0000\u0000\u0000\u057b\u057c"+
		"\u0001\u0000\u0000\u0000\u057c\u0580\u0003\u0100\u0080\u0000\u057d\u057f"+
		"\u0003\u001e\u000f\u0000\u057e\u057d\u0001\u0000\u0000\u0000\u057f\u0582"+
		"\u0001\u0000\u0000\u0000\u0580\u057e\u0001\u0000\u0000\u0000\u0580\u0581"+
		"\u0001\u0000\u0000\u0000\u0581\u069a\u0001\u0000\u0000\u0000\u0582\u0580"+
		"\u0001\u0000\u0000\u0000\u0583\u0588\u0005\u0005\u0000\u0000\u0584\u0586"+
		"\u0005\u001d\u0000\u0000\u0585\u0587\u0003\u00dcn\u0000\u0586\u0585\u0001"+
		"\u0000\u0000\u0000\u0586\u0587\u0001\u0000\u0000\u0000\u0587\u0589\u0001"+
		"\u0000\u0000\u0000\u0588\u0584\u0001\u0000\u0000\u0000\u0588\u0589\u0001"+
		"\u0000\u0000\u0000\u0589\u058a\u0001\u0000\u0000\u0000\u058a\u058b\u0005"+
		"@\u0000\u0000\u058b\u058d\u0005X\u0000\u0000\u058c\u058e\u0003\u010e\u0087"+
		"\u0000\u058d\u058c\u0001\u0000\u0000\u0000\u058d\u058e\u0001\u0000\u0000"+
		"\u0000\u058e\u0590\u0001\u0000\u0000\u0000\u058f\u0591\u0003\u00dcn\u0000"+
		"\u0590\u058f\u0001\u0000\u0000\u0000\u0590\u0591\u0001\u0000\u0000\u0000"+
		"\u0591\u0592\u0001\u0000\u0000\u0000\u0592\u0593\u0003\u0100\u0080\u0000"+
		"\u0593\u0594\u0003*\u0015\u0000\u0594\u069a\u0001\u0000\u0000\u0000\u0595"+
		"\u059a\u0005\u0005\u0000\u0000\u0596\u0598\u0005\u001d\u0000\u0000\u0597"+
		"\u0599\u0003\u00dcn\u0000\u0598\u0597\u0001\u0000\u0000\u0000\u0598\u0599"+
		"\u0001\u0000\u0000\u0000\u0599\u059b\u0001\u0000\u0000\u0000\u059a\u0596"+
		"\u0001\u0000\u0000\u0000\u059a\u059b\u0001\u0000\u0000\u0000\u059b\u059c"+
		"\u0001\u0000\u0000\u0000\u059c\u059d\u0005\u0019\u0000\u0000\u059d\u059e"+
		"\u0005\u0454\u0000\u0000\u059e\u059f\u0003\u0138\u009c\u0000\u059f\u05a0"+
		"\u0005\u0455\u0000\u0000\u05a0\u069a\u0001\u0000\u0000\u0000\u05a1\u05a3"+
		"\u0005\u0144\u0000\u0000\u05a2\u05a4\u0005\u044b\u0000\u0000\u05a3\u05a2"+
		"\u0001\u0000\u0000\u0000\u05a3\u05a4\u0001\u0000\u0000\u0000\u05a4\u05a5"+
		"\u0001\u0000\u0000\u0000\u05a5\u069a\u0007\u0015\u0000\u0000\u05a6\u05a8"+
		"\u0005\u0007\u0000\u0000\u05a7\u05a9\u0005\u001b\u0000\u0000\u05a8\u05a7"+
		"\u0001\u0000\u0000\u0000\u05a8\u05a9\u0001\u0000\u0000\u0000\u05a9\u05aa"+
		"\u0001\u0000\u0000\u0000\u05aa\u05b0\u0003\u00dcn\u0000\u05ab\u05ac\u0005"+
		"\u0093\u0000\u0000\u05ac\u05ad\u0005(\u0000\u0000\u05ad\u05b1\u0003\u0106"+
		"\u0083\u0000\u05ae\u05af\u00051\u0000\u0000\u05af\u05b1\u0005(\u0000\u0000"+
		"\u05b0\u05ab\u0001\u0000\u0000\u0000\u05b0\u05ae\u0001\u0000\u0000\u0000"+
		"\u05b1\u069a\u0001\u0000\u0000\u0000\u05b2\u05b4\u0005\u0017\u0000\u0000"+
		"\u05b3\u05b5\u0005\u001b\u0000\u0000\u05b4\u05b3\u0001\u0000\u0000\u0000"+
		"\u05b4\u05b5\u0001\u0000\u0000\u0000\u05b5\u05b7\u0001\u0000\u0000\u0000"+
		"\u05b6\u05b8\u0003\u010c\u0086\u0000\u05b7\u05b6\u0001\u0000\u0000\u0000"+
		"\u05b7\u05b8\u0001\u0000\u0000\u0000\u05b8\u05b9\u0001\u0000\u0000\u0000"+
		"\u05b9\u05ba\u0003\u00dcn\u0000\u05ba\u05bb\u0003\u00dcn\u0000\u05bb\u05bf"+
		"\u0003$\u0012\u0000\u05bc\u05c0\u0005\u019e\u0000\u0000\u05bd\u05be\u0005"+
		"\u0142\u0000\u0000\u05be\u05c0\u0003\u00dcn\u0000\u05bf\u05bc\u0001\u0000"+
		"\u0000\u0000\u05bf\u05bd\u0001\u0000\u0000\u0000\u05bf\u05c0\u0001\u0000"+
		"\u0000\u0000\u05c0\u069a\u0001\u0000\u0000\u0000\u05c1\u05c2\u0005\u0085"+
		"\u0000\u0000\u05c2\u05c3\u0005\u001b\u0000\u0000\u05c3\u05c4\u0003\u00dc"+
		"n\u0000\u05c4\u05c5\u0005\u00a6\u0000\u0000\u05c5\u05c6\u0003\u00dcn\u0000"+
		"\u05c6\u069a\u0001\u0000\u0000\u0000\u05c7\u05c9\u0005c\u0000\u0000\u05c8"+
		"\u05ca\u0005\u044b\u0000\u0000\u05c9\u05c8\u0001\u0000\u0000\u0000\u05c9"+
		"\u05ca\u0001\u0000\u0000\u0000\u05ca\u05cb\u0001\u0000\u0000\u0000\u05cb"+
		"\u069a\u0007\u0003\u0000\u0000\u05cc\u05ce\u0005\u01ee\u0000\u0000\u05cd"+
		"\u05cf\u0005\u001b\u0000\u0000\u05ce\u05cd\u0001\u0000\u0000\u0000\u05ce"+
		"\u05cf\u0001\u0000\u0000\u0000\u05cf\u05d1\u0001\u0000\u0000\u0000\u05d0"+
		"\u05d2\u0003\u010c\u0086\u0000\u05d1\u05d0\u0001\u0000\u0000\u0000\u05d1"+
		"\u05d2\u0001\u0000\u0000\u0000\u05d2\u05d3\u0001\u0000\u0000\u0000\u05d3"+
		"\u05d4\u0003\u00dcn\u0000\u05d4\u05d8\u0003$\u0012\u0000\u05d5\u05d9\u0005"+
		"\u019e\u0000\u0000\u05d6\u05d7\u0005\u0142\u0000\u0000\u05d7\u05d9\u0003"+
		"\u00dcn\u0000\u05d8\u05d5\u0001\u0000\u0000\u0000\u05d8\u05d6\u0001\u0000"+
		"\u0000\u0000\u05d8\u05d9\u0001\u0000\u0000\u0000\u05d9\u069a\u0001\u0000"+
		"\u0000\u0000\u05da\u05dc\u00051\u0000\u0000\u05db\u05dd\u0005\u001b\u0000"+
		"\u0000\u05dc\u05db\u0001\u0000\u0000\u0000\u05dc\u05dd\u0001\u0000\u0000"+
		"\u0000\u05dd\u05df\u0001\u0000\u0000\u0000\u05de\u05e0\u0003\u010c\u0086"+
		"\u0000\u05df\u05de\u0001\u0000\u0000\u0000\u05df\u05e0\u0001\u0000\u0000"+
		"\u0000\u05e0\u05e1\u0001\u0000\u0000\u0000\u05e1\u05e3\u0003\u00dcn\u0000"+
		"\u05e2\u05e4\u0005\u008a\u0000\u0000\u05e3\u05e2\u0001\u0000\u0000\u0000"+
		"\u05e3\u05e4\u0001\u0000\u0000\u0000\u05e4\u069a\u0001\u0000\u0000\u0000"+
		"\u05e5\u05e6\u00051\u0000\u0000\u05e6\u05e8\u0007\u0016\u0000\u0000\u05e7"+
		"\u05e9\u0003\u010c\u0086\u0000\u05e8\u05e7\u0001\u0000\u0000\u0000\u05e8"+
		"\u05e9\u0001\u0000\u0000\u0000\u05e9\u05ea\u0001\u0000\u0000\u0000\u05ea"+
		"\u069a\u0003\u00dcn\u0000\u05eb\u05ec\u00051\u0000\u0000\u05ec\u05ed\u0005"+
		"|\u0000\u0000\u05ed\u069a\u0005X\u0000\u0000\u05ee\u05ef\u0005\u0085\u0000"+
		"\u0000\u05ef\u05f0\u0007\n\u0000\u0000\u05f0\u05f1\u0003\u00dcn\u0000"+
		"\u05f1\u05f2\u0005\u00a6\u0000\u0000\u05f2\u05f3\u0003\u00dcn\u0000\u05f3"+
		"\u069a\u0001\u0000\u0000\u0000\u05f4\u05f5\u0005\u0007\u0000\u0000\u05f5"+
		"\u05f6\u0005N\u0000\u0000\u05f6\u05f7\u0003\u00dcn\u0000\u05f7\u05f8\u0007"+
		"\u0005\u0000\u0000\u05f8\u069a\u0001\u0000\u0000\u0000\u05f9\u05fa\u0005"+
		"1\u0000\u0000\u05fa\u05fc\u0007\n\u0000\u0000\u05fb\u05fd\u0003\u010c"+
		"\u0086\u0000\u05fc\u05fb\u0001\u0000\u0000\u0000\u05fc\u05fd\u0001\u0000"+
		"\u0000\u0000\u05fd\u05fe\u0001\u0000\u0000\u0000\u05fe\u069a\u0003\u00dc"+
		"n\u0000\u05ff\u0600\u00051\u0000\u0000\u0600\u0601\u0005@\u0000\u0000"+
		"\u0601\u0603\u0005X\u0000\u0000\u0602\u0604\u0003\u010c\u0086\u0000\u0603"+
		"\u0602\u0001\u0000\u0000\u0000\u0603\u0604\u0001\u0000\u0000\u0000\u0604"+
		"\u0605\u0001\u0000\u0000\u0000\u0605\u069a\u0003\u00dcn\u0000\u0606\u0607"+
		"\u0005\u017f\u0000\u0000\u0607\u069a\u0005Y\u0000\u0000\u0608\u0609\u0005"+
		"\u0186\u0000\u0000\u0609\u069a\u0005Y\u0000\u0000\u060a\u060c\u0005\u0085"+
		"\u0000\u0000\u060b\u060d\u0007\u0017\u0000\u0000\u060c\u060b\u0001\u0000"+
		"\u0000\u0000\u060c\u060d\u0001\u0000\u0000\u0000\u060d\u0610\u0001\u0000"+
		"\u0000\u0000\u060e\u0611\u0003\u00dcn\u0000\u060f\u0611\u0003\u00ccf\u0000"+
		"\u0610\u060e\u0001\u0000\u0000\u0000\u0610\u060f\u0001\u0000\u0000\u0000"+
		"\u0611\u069a\u0001\u0000\u0000\u0000\u0612\u0613\u0005v\u0000\u0000\u0613"+
		"\u0614\u0005\u0012\u0000\u0000\u0614\u069a\u0003\u00fc~\u0000\u0615\u0616"+
		"\u0005\u001f\u0000\u0000\u0616\u0617\u0005\u00a6\u0000\u0000\u0617\u0618"+
		"\u0005\u0018\u0000\u0000\u0618\u0619\u0005\u0093\u0000\u0000\u0619\u061c"+
		"\u0003\u00d6k\u0000\u061a\u061b\u0005\u001a\u0000\u0000\u061b\u061d\u0003"+
		"\u00d8l\u0000\u061c\u061a\u0001\u0000\u0000\u0000\u061c\u061d\u0001\u0000"+
		"\u0000\u0000\u061d\u069a\u0001\u0000\u0000\u0000\u061e\u0620\u0005(\u0000"+
		"\u0000\u061f\u061e\u0001\u0000\u0000\u0000\u061f\u0620\u0001\u0000\u0000"+
		"\u0000\u0620\u0621\u0001\u0000\u0000\u0000\u0621\u0622\u0005\u0018\u0000"+
		"\u0000\u0622\u0623\u0005\u0093\u0000\u0000\u0623\u0624\u0005\u044b\u0000"+
		"\u0000\u0624\u0628\u0003\u00d6k\u0000\u0625\u0626\u0005\u001a\u0000\u0000"+
		"\u0626\u0627\u0005\u044b\u0000\u0000\u0627\u0629\u0003\u00d8l\u0000\u0628"+
		"\u0625\u0001\u0000\u0000\u0000\u0628\u0629\u0001\u0000\u0000\u0000\u0629"+
		"\u069a\u0001\u0000\u0000\u0000\u062a\u062b\u0005\u0180\u0000\u0000\u062b"+
		"\u069a\u0005\u026b\u0000\u0000\u062c\u062d\u0005\u01b1\u0000\u0000\u062d"+
		"\u069a\u0005\u026b\u0000\u0000\u062e\u069a\u0005?\u0000\u0000\u062f\u0630"+
		"\u0007\u0018\u0000\u0000\u0630\u069a\u0005\u0280\u0000\u0000\u0631\u0632"+
		"\u0005\u0005\u0000\u0000\u0632\u0634\u0005{\u0000\u0000\u0633\u0635\u0003"+
		"\u010e\u0087\u0000\u0634\u0633\u0001\u0000\u0000\u0000\u0634\u0635\u0001"+
		"\u0000\u0000\u0000\u0635\u0636\u0001\u0000\u0000\u0000\u0636\u0637\u0005"+
		"\u0454\u0000\u0000\u0637\u063c\u0003>\u001f\u0000\u0638\u0639\u0005\u0456"+
		"\u0000\u0000\u0639\u063b\u0003>\u001f\u0000\u063a\u0638\u0001\u0000\u0000"+
		"\u0000\u063b\u063e\u0001\u0000\u0000\u0000\u063c\u063a\u0001\u0000\u0000"+
		"\u0000\u063c\u063d\u0001\u0000\u0000\u0000\u063d\u063f\u0001\u0000\u0000"+
		"\u0000\u063e\u063c\u0001\u0000\u0000\u0000\u063f\u0640\u0005\u0455\u0000"+
		"\u0000\u0640\u069a\u0001\u0000\u0000\u0000\u0641\u0642\u00051\u0000\u0000"+
		"\u0642\u0644\u0005{\u0000\u0000\u0643\u0645\u0003\u010c\u0086\u0000\u0644"+
		"\u0643\u0001\u0000\u0000\u0000\u0644\u0645\u0001\u0000\u0000\u0000\u0645"+
		"\u0646\u0001\u0000\u0000\u0000\u0646\u069a\u0003\u00fc~\u0000\u0647\u0648"+
		"\u0005\u0180\u0000\u0000\u0648\u064b\u0005{\u0000\u0000\u0649\u064c\u0003"+
		"\u00fc~\u0000\u064a\u064c\u0005\u0006\u0000\u0000\u064b\u0649\u0001\u0000"+
		"\u0000\u0000\u064b\u064a\u0001\u0000\u0000\u0000\u064c\u064d\u0001\u0000"+
		"\u0000\u0000\u064d\u069a\u0005\u026b\u0000\u0000\u064e\u064f\u0005\u01b1"+
		"\u0000\u0000\u064f\u0652\u0005{\u0000\u0000\u0650\u0653\u0003\u00fc~\u0000"+
		"\u0651\u0653\u0005\u0006\u0000\u0000\u0652\u0650\u0001\u0000\u0000\u0000"+
		"\u0652\u0651\u0001\u0000\u0000\u0000\u0653\u0654\u0001\u0000\u0000\u0000"+
		"\u0654\u069a\u0005\u026b\u0000\u0000\u0655\u0656\u0005\u0274\u0000\u0000"+
		"\u0656\u0659\u0005{\u0000\u0000\u0657\u065a\u0003\u00fc~\u0000\u0658\u065a"+
		"\u0005\u0006\u0000\u0000\u0659\u0657\u0001\u0000\u0000\u0000\u0659\u0658"+
		"\u0001\u0000\u0000\u0000\u065a\u069a\u0001\u0000\u0000\u0000\u065b\u065c"+
		"\u0005\u015f\u0000\u0000\u065c\u065d\u0005{\u0000\u0000\u065d\u069a\u0003"+
		"\u00e2q\u0000\u065e\u065f\u0005\u022a\u0000\u0000\u065f\u0660\u0005{\u0000"+
		"\u0000\u0660\u0661\u0003\u00fc~\u0000\u0661\u0662\u0005T\u0000\u0000\u0662"+
		"\u0663\u0005\u0454\u0000\u0000\u0663\u0668\u0003>\u001f\u0000\u0664\u0665"+
		"\u0005\u0456\u0000\u0000\u0665\u0667\u0003>\u001f\u0000\u0666\u0664\u0001"+
		"\u0000\u0000\u0000\u0667\u066a\u0001\u0000\u0000\u0000\u0668\u0666\u0001"+
		"\u0000\u0000\u0000\u0668\u0669\u0001\u0000\u0000\u0000\u0669\u066b\u0001"+
		"\u0000\u0000\u0000\u066a\u0668\u0001\u0000\u0000\u0000\u066b\u066c\u0005"+
		"\u0455\u0000\u0000\u066c\u069a\u0001\u0000\u0000\u0000\u066d\u066e\u0005"+
		"\u0193\u0000\u0000\u066e\u066f\u0005{\u0000\u0000\u066f\u0670\u0003\u00dc"+
		"n\u0000\u0670\u0671\u0005\u00b7\u0000\u0000\u0671\u0672\u0005\u00a3\u0000"+
		"\u0000\u0672\u0675\u0003\u00ceg\u0000\u0673\u0674\u0007\u0018\u0000\u0000"+
		"\u0674\u0676\u0005\u0280\u0000\u0000\u0675\u0673\u0001\u0000\u0000\u0000"+
		"\u0675\u0676\u0001\u0000\u0000\u0000\u0676\u069a\u0001\u0000\u0000\u0000"+
		"\u0677\u0678\u0005\t\u0000\u0000\u0678\u067b\u0005{\u0000\u0000\u0679"+
		"\u067c\u0003\u00fc~\u0000\u067a\u067c\u0005\u0006\u0000\u0000\u067b\u0679"+
		"\u0001\u0000\u0000\u0000\u067b\u067a\u0001\u0000\u0000\u0000\u067c\u069a"+
		"\u0001\u0000\u0000\u0000\u067d\u067e\u0005\u0019\u0000\u0000\u067e\u0681"+
		"\u0005{\u0000\u0000\u067f\u0682\u0003\u00fc~\u0000\u0680\u0682\u0005\u0006"+
		"\u0000\u0000\u0681\u067f\u0001\u0000\u0000\u0000\u0681\u0680\u0001\u0000"+
		"\u0000\u0000\u0682\u069a\u0001\u0000\u0000\u0000\u0683\u0684\u0005q\u0000"+
		"\u0000\u0684\u0687\u0005{\u0000\u0000\u0685\u0688\u0003\u00fc~\u0000\u0686"+
		"\u0688\u0005\u0006\u0000\u0000\u0687\u0685\u0001\u0000\u0000\u0000\u0687"+
		"\u0686\u0001\u0000\u0000\u0000\u0688\u069a\u0001\u0000\u0000\u0000\u0689"+
		"\u068a\u0005\u0220\u0000\u0000\u068a\u068d\u0005{\u0000\u0000\u068b\u068e"+
		"\u0003\u00fc~\u0000\u068c\u068e\u0005\u0006\u0000\u0000\u068d\u068b\u0001"+
		"\u0000\u0000\u0000\u068d\u068c\u0001\u0000\u0000\u0000\u068e\u069a\u0001"+
		"\u0000\u0000\u0000\u068f\u0690\u0005\u022b\u0000\u0000\u0690\u0693\u0005"+
		"{\u0000\u0000\u0691\u0694\u0003\u00fc~\u0000\u0692\u0694\u0005\u0006\u0000"+
		"\u0000\u0693\u0691\u0001\u0000\u0000\u0000\u0693\u0692\u0001\u0000\u0000"+
		"\u0000\u0694\u069a\u0001\u0000\u0000\u0000\u0695\u0696\u0005\u0229\u0000"+
		"\u0000\u0696\u069a\u0005\u020d\u0000\u0000\u0697\u0698\u0005\u027c\u0000"+
		"\u0000\u0698\u069a\u0005\u020d\u0000\u0000\u0699\u0507\u0001\u0000\u0000"+
		"\u0000\u0699\u0511\u0001\u0000\u0000\u0000\u0699\u051f\u0001\u0000\u0000"+
		"\u0000\u0699\u0534\u0001\u0000\u0000\u0000\u0699\u0546\u0001\u0000\u0000"+
		"\u0000\u0699\u055c\u0001\u0000\u0000\u0000\u0699\u0574\u0001\u0000\u0000"+
		"\u0000\u0699\u0583\u0001\u0000\u0000\u0000\u0699\u0595\u0001\u0000\u0000"+
		"\u0000\u0699\u05a1\u0001\u0000\u0000\u0000\u0699\u05a6\u0001\u0000\u0000"+
		"\u0000\u0699\u05b2\u0001\u0000\u0000\u0000\u0699\u05c1\u0001\u0000\u0000"+
		"\u0000\u0699\u05c7\u0001\u0000\u0000\u0000\u0699\u05cc\u0001\u0000\u0000"+
		"\u0000\u0699\u05da\u0001\u0000\u0000\u0000\u0699\u05e5\u0001\u0000\u0000"+
		"\u0000\u0699\u05eb\u0001\u0000\u0000\u0000\u0699\u05ee\u0001\u0000\u0000"+
		"\u0000\u0699\u05f4\u0001\u0000\u0000\u0000\u0699\u05f9\u0001\u0000\u0000"+
		"\u0000\u0699\u05ff\u0001\u0000\u0000\u0000\u0699\u0606\u0001\u0000\u0000"+
		"\u0000\u0699\u0608\u0001\u0000\u0000\u0000\u0699\u060a\u0001\u0000\u0000"+
		"\u0000\u0699\u0612\u0001\u0000\u0000\u0000\u0699\u0615\u0001\u0000\u0000"+
		"\u0000\u0699\u061f\u0001\u0000\u0000\u0000\u0699\u062a\u0001\u0000\u0000"+
		"\u0000\u0699\u062c\u0001\u0000\u0000\u0000\u0699\u062e\u0001\u0000\u0000"+
		"\u0000\u0699\u062f\u0001\u0000\u0000\u0000\u0699\u0631\u0001\u0000\u0000"+
		"\u0000\u0699\u0641\u0001\u0000\u0000\u0000\u0699\u0647\u0001\u0000\u0000"+
		"\u0000\u0699\u064e\u0001\u0000\u0000\u0000\u0699\u0655\u0001\u0000\u0000"+
		"\u0000\u0699\u065b\u0001\u0000\u0000\u0000\u0699\u065e\u0001\u0000\u0000"+
		"\u0000\u0699\u066d\u0001\u0000\u0000\u0000\u0699\u0677\u0001\u0000\u0000"+
		"\u0000\u0699\u067d\u0001\u0000\u0000\u0000\u0699\u0683\u0001\u0000\u0000"+
		"\u0000\u0699\u0689\u0001\u0000\u0000\u0000\u0699\u068f\u0001\u0000\u0000"+
		"\u0000\u0699\u0695\u0001\u0000\u0000\u0000\u0699\u0697\u0001\u0000\u0000"+
		"\u0000\u069aK\u0001\u0000\u0000\u0000\u069b\u069c\u00051\u0000\u0000\u069c"+
		"\u069e\u0005N\u0000\u0000\u069d\u069f\u0007\u0000\u0000\u0000\u069e\u069d"+
		"\u0001\u0000\u0000\u0000\u069e\u069f\u0001\u0000\u0000\u0000\u069f\u06a0"+
		"\u0001\u0000\u0000\u0000\u06a0\u06a1\u0003\u00dcn\u0000\u06a1\u06a2\u0005"+
		"p\u0000\u0000\u06a2\u06af\u0003\u00ceg\u0000\u06a3\u06a5\u0005\u0144\u0000"+
		"\u0000\u06a4\u06a6\u0005\u044b\u0000\u0000\u06a5\u06a4\u0001\u0000\u0000"+
		"\u0000\u06a5\u06a6\u0001\u0000\u0000\u0000\u06a6\u06a7\u0001\u0000\u0000"+
		"\u0000\u06a7\u06ae\u0007\u0019\u0000\u0000\u06a8\u06aa\u0005c\u0000\u0000"+
		"\u06a9\u06ab\u0005\u044b\u0000\u0000\u06aa\u06a9\u0001\u0000\u0000\u0000"+
		"\u06aa\u06ab\u0001\u0000\u0000\u0000\u06ab\u06ac\u0001\u0000\u0000\u0000"+
		"\u06ac\u06ae\u0007\u0003\u0000\u0000\u06ad\u06a3\u0001\u0000\u0000\u0000"+
		"\u06ad\u06a8\u0001\u0000\u0000\u0000\u06ae\u06b1\u0001\u0000\u0000\u0000"+
		"\u06af\u06ad\u0001\u0000\u0000\u0000\u06af\u06b0\u0001\u0000\u0000\u0000"+
		"\u06b0M\u0001\u0000\u0000\u0000\u06b1\u06af\u0001\u0000\u0000\u0000\u06b2"+
		"\u06b4\u00051\u0000\u0000\u06b3\u06b5\u0005\u026d\u0000\u0000\u06b4\u06b3"+
		"\u0001\u0000\u0000\u0000\u06b4\u06b5\u0001\u0000\u0000\u0000\u06b5\u06b6"+
		"\u0001\u0000\u0000\u0000\u06b6\u06b8\u0005\u00a3\u0000\u0000\u06b7\u06b9"+
		"\u0003\u010c\u0086\u0000\u06b8\u06b7\u0001\u0000\u0000\u0000\u06b8\u06b9"+
		"\u0001\u0000\u0000\u0000\u06b9\u06ba\u0001\u0000\u0000\u0000\u06ba\u06bc"+
		"\u0003\u00fe\u007f\u0000\u06bb\u06bd\u0007\u001a\u0000\u0000\u06bc\u06bb"+
		"\u0001\u0000\u0000\u0000\u06bc\u06bd\u0001\u0000\u0000\u0000\u06bdO\u0001"+
		"\u0000\u0000\u0000\u06be\u06bf\u0005\u0085\u0000\u0000\u06bf\u06c0\u0005"+
		"\u00a3\u0000\u0000\u06c0\u06c5\u0003R)\u0000\u06c1\u06c2\u0005\u0456\u0000"+
		"\u0000\u06c2\u06c4\u0003R)\u0000\u06c3\u06c1\u0001\u0000\u0000\u0000\u06c4"+
		"\u06c7\u0001\u0000\u0000\u0000\u06c5\u06c3\u0001\u0000\u0000\u0000\u06c5"+
		"\u06c6\u0001\u0000\u0000\u0000\u06c6Q\u0001\u0000\u0000\u0000\u06c7\u06c5"+
		"\u0001\u0000\u0000\u0000\u06c8\u06c9\u0003\u00ceg\u0000\u06c9\u06ca\u0005"+
		"\u00a6\u0000\u0000\u06ca\u06cb\u0003\u00ceg\u0000\u06cbS\u0001\u0000\u0000"+
		"\u0000\u06cc\u06ce\u0005\u0274\u0000\u0000\u06cd\u06cf\u0005\u00a3\u0000"+
		"\u0000\u06ce\u06cd\u0001\u0000\u0000\u0000\u06ce\u06cf\u0001\u0000\u0000"+
		"\u0000\u06cf\u06d0\u0001\u0000\u0000\u0000\u06d0\u06d1\u0003\u00ceg\u0000"+
		"\u06d1U\u0001\u0000\u0000\u0000\u06d2\u06d5\u0003h4\u0000\u06d3\u06d5"+
		"\u0003j5\u0000\u06d4\u06d2\u0001\u0000\u0000\u0000\u06d4\u06d3\u0001\u0000"+
		"\u0000\u0000\u06d5W\u0001\u0000\u0000\u0000\u06d6\u06d8\u0005R\u0000\u0000"+
		"\u06d7\u06d9\u0007\u001b\u0000\u0000\u06d8\u06d7\u0001\u0000\u0000\u0000"+
		"\u06d8\u06d9\u0001\u0000\u0000\u0000\u06d9\u06db\u0001\u0000\u0000\u0000"+
		"\u06da\u06dc\u0005K\u0000\u0000\u06db\u06da\u0001\u0000\u0000\u0000\u06db"+
		"\u06dc\u0001\u0000\u0000\u0000\u06dc\u06de\u0001\u0000\u0000\u0000\u06dd"+
		"\u06df\u0005T\u0000\u0000\u06de\u06dd\u0001\u0000\u0000\u0000\u06de\u06df"+
		"\u0001\u0000\u0000\u0000\u06df\u06e0\u0001\u0000\u0000\u0000\u06e0\u06e7"+
		"\u0003\u00ceg\u0000\u06e1\u06e2\u0005{\u0000\u0000\u06e2\u06e4\u0005\u0454"+
		"\u0000\u0000\u06e3\u06e5\u0003\u00fc~\u0000\u06e4\u06e3\u0001\u0000\u0000"+
		"\u0000\u06e4\u06e5\u0001\u0000\u0000\u0000\u06e5\u06e6\u0001\u0000\u0000"+
		"\u0000\u06e6\u06e8\u0005\u0455\u0000\u0000\u06e7\u06e1\u0001\u0000\u0000"+
		"\u0000\u06e7\u06e8\u0001\u0000\u0000\u0000\u06e8\u06f9\u0001\u0000\u0000"+
		"\u0000\u06e9\u06ea\u0005\u0454\u0000\u0000\u06ea\u06eb\u0003\u00fc~\u0000"+
		"\u06eb\u06ec\u0005\u0455\u0000\u0000\u06ec\u06ee\u0001\u0000\u0000\u0000"+
		"\u06ed\u06e9\u0001\u0000\u0000\u0000\u06ed\u06ee\u0001\u0000\u0000\u0000"+
		"\u06ee\u06ef\u0001\u0000\u0000\u0000\u06ef\u06fa\u0003`0\u0000\u06f0\u06f1"+
		"\u0005\u0093\u0000\u0000\u06f1\u06f6\u0003b1\u0000\u06f2\u06f3\u0005\u0456"+
		"\u0000\u0000\u06f3\u06f5\u0003b1\u0000\u06f4\u06f2\u0001\u0000\u0000\u0000"+
		"\u06f5\u06f8\u0001\u0000\u0000\u0000\u06f6\u06f4\u0001\u0000\u0000\u0000"+
		"\u06f6\u06f7\u0001\u0000\u0000\u0000\u06f7\u06fa\u0001\u0000\u0000\u0000"+
		"\u06f8\u06f6\u0001\u0000\u0000\u0000\u06f9\u06ed\u0001\u0000\u0000\u0000"+
		"\u06f9\u06f0\u0001\u0000\u0000\u0000\u06fa\u0707\u0001\u0000\u0000\u0000"+
		"\u06fb\u06fc\u0005p\u0000\u0000\u06fc\u06fd\u0005\u0184\u0000\u0000\u06fd"+
		"\u06fe\u0005X\u0000\u0000\u06fe\u06ff\u0005\u00af\u0000\u0000\u06ff\u0704"+
		"\u0003b1\u0000\u0700\u0701\u0005\u0456\u0000\u0000\u0701\u0703\u0003b"+
		"1\u0000\u0702\u0700\u0001\u0000\u0000\u0000\u0703\u0706\u0001\u0000\u0000"+
		"\u0000\u0704\u0702\u0001\u0000\u0000\u0000\u0704\u0705\u0001\u0000\u0000"+
		"\u0000\u0705\u0708\u0001\u0000\u0000\u0000\u0706\u0704\u0001\u0000\u0000"+
		"\u0000\u0707\u06fb\u0001\u0000\u0000\u0000\u0707\u0708\u0001\u0000\u0000"+
		"\u0000\u0708Y\u0001\u0000\u0000\u0000\u0709\u070b\u0005\u0087\u0000\u0000"+
		"\u070a\u070c\u0007\u001c\u0000\u0000\u070b\u070a\u0001\u0000\u0000\u0000"+
		"\u070b\u070c\u0001\u0000\u0000\u0000\u070c\u070e\u0001\u0000\u0000\u0000"+
		"\u070d\u070f\u0005T\u0000\u0000\u070e\u070d\u0001\u0000\u0000\u0000\u070e"+
		"\u070f\u0001\u0000\u0000\u0000\u070f\u0710\u0001\u0000\u0000\u0000\u0710"+
		"\u0716\u0003\u00ceg\u0000\u0711\u0712\u0005{\u0000\u0000\u0712\u0713\u0005"+
		"\u0454\u0000\u0000\u0713\u0714\u0003\u00fc~\u0000\u0714\u0715\u0005\u0455"+
		"\u0000\u0000\u0715\u0717\u0001\u0000\u0000\u0000\u0716\u0711\u0001\u0000"+
		"\u0000\u0000\u0716\u0717\u0001\u0000\u0000\u0000\u0717\u0728\u0001\u0000"+
		"\u0000\u0000\u0718\u0719\u0005\u0454\u0000\u0000\u0719\u071a\u0003\u00fc"+
		"~\u0000\u071a\u071b\u0005\u0455\u0000\u0000\u071b\u071d\u0001\u0000\u0000"+
		"\u0000\u071c\u0718\u0001\u0000\u0000\u0000\u071c\u071d\u0001\u0000\u0000"+
		"\u0000\u071d\u071e\u0001\u0000\u0000\u0000\u071e\u0729\u0003`0\u0000\u071f"+
		"\u0720\u0005\u0093\u0000\u0000\u0720\u0725\u0003b1\u0000\u0721\u0722\u0005"+
		"\u0456\u0000\u0000\u0722\u0724\u0003b1\u0000\u0723\u0721\u0001\u0000\u0000"+
		"\u0000\u0724\u0727\u0001\u0000\u0000\u0000\u0725\u0723\u0001\u0000\u0000"+
		"\u0000\u0725\u0726\u0001\u0000\u0000\u0000\u0726\u0729\u0001\u0000\u0000"+
		"\u0000\u0727\u0725\u0001\u0000\u0000\u0000\u0728\u071c\u0001\u0000\u0000"+
		"\u0000\u0728\u071f\u0001\u0000\u0000\u0000\u0729[\u0001\u0000\u0000\u0000"+
		"\u072a\u072c\u0003\u0084B\u0000\u072b\u072d\u0003f3\u0000\u072c\u072b"+
		"\u0001\u0000\u0000\u0000\u072c\u072d\u0001\u0000\u0000\u0000\u072d\u0762"+
		"\u0001\u0000\u0000\u0000\u072e\u0730\u0003\u0080@\u0000\u072f\u0731\u0003"+
		"f3\u0000\u0730\u072f\u0001\u0000\u0000\u0000\u0730\u0731\u0001\u0000\u0000"+
		"\u0000\u0731\u0762\u0001\u0000\u0000\u0000\u0732\u0734\u0003\u0086C\u0000"+
		"\u0733\u0735\u0003\u008aE\u0000\u0734\u0733\u0001\u0000\u0000\u0000\u0735"+
		"\u0736\u0001\u0000\u0000\u0000\u0736\u0734\u0001\u0000\u0000\u0000\u0736"+
		"\u0737\u0001\u0000\u0000\u0000\u0737\u0740\u0001\u0000\u0000\u0000\u0738"+
		"\u073a\u0005\u00ab\u0000\u0000\u0739\u073b\u0007\u001d\u0000\u0000\u073a"+
		"\u0739\u0001\u0000\u0000\u0000\u073a\u073b\u0001\u0000\u0000\u0000\u073b"+
		"\u073e\u0001\u0000\u0000\u0000\u073c\u073f\u0003\u0084B\u0000\u073d\u073f"+
		"\u0003\u0080@\u0000\u073e\u073c\u0001\u0000\u0000\u0000\u073e\u073d\u0001"+
		"\u0000\u0000\u0000\u073f\u0741\u0001\u0000\u0000\u0000\u0740\u0738\u0001"+
		"\u0000\u0000\u0000\u0740\u0741\u0001\u0000\u0000\u0000\u0741\u0743\u0001"+
		"\u0000\u0000\u0000\u0742\u0744\u0003p8";
	private static final String _serializedATNSegment1 =
		"\u0000\u0743\u0742\u0001\u0000\u0000\u0000\u0743\u0744\u0001\u0000\u0000"+
		"\u0000\u0744\u0746\u0001\u0000\u0000\u0000\u0745\u0747\u0003\u00a2Q\u0000"+
		"\u0746\u0745\u0001\u0000\u0000\u0000\u0746\u0747\u0001\u0000\u0000\u0000"+
		"\u0747\u0749\u0001\u0000\u0000\u0000\u0748\u074a\u0003f3\u0000\u0749\u0748"+
		"\u0001\u0000\u0000\u0000\u0749\u074a\u0001\u0000\u0000\u0000\u074a\u0762"+
		"\u0001\u0000\u0000\u0000\u074b\u074d\u0003\u0082A\u0000\u074c\u074e\u0003"+
		"\u0088D\u0000\u074d\u074c\u0001\u0000\u0000\u0000\u074e\u074f\u0001\u0000"+
		"\u0000\u0000\u074f\u074d\u0001\u0000\u0000\u0000\u074f\u0750\u0001\u0000"+
		"\u0000\u0000\u0750\u0756\u0001\u0000\u0000\u0000\u0751\u0753\u0005\u00ab"+
		"\u0000\u0000\u0752\u0754\u0007\u001d\u0000\u0000\u0753\u0752\u0001\u0000"+
		"\u0000\u0000\u0753\u0754\u0001\u0000\u0000\u0000\u0754\u0755\u0001\u0000"+
		"\u0000\u0000\u0755\u0757\u0003\u0080@\u0000\u0756\u0751\u0001\u0000\u0000"+
		"\u0000\u0756\u0757\u0001\u0000\u0000\u0000\u0757\u0759\u0001\u0000\u0000"+
		"\u0000\u0758\u075a\u0003p8\u0000\u0759\u0758\u0001\u0000\u0000\u0000\u0759"+
		"\u075a\u0001\u0000\u0000\u0000\u075a\u075c\u0001\u0000\u0000\u0000\u075b"+
		"\u075d\u0003\u00a2Q\u0000\u075c\u075b\u0001\u0000\u0000\u0000\u075c\u075d"+
		"\u0001\u0000\u0000\u0000\u075d\u075f\u0001\u0000\u0000\u0000\u075e\u0760"+
		"\u0003f3\u0000\u075f\u075e\u0001\u0000\u0000\u0000\u075f\u0760\u0001\u0000"+
		"\u0000\u0000\u0760\u0762\u0001\u0000\u0000\u0000\u0761\u072a\u0001\u0000"+
		"\u0000\u0000\u0761\u072e\u0001\u0000\u0000\u0000\u0761\u0732\u0001\u0000"+
		"\u0000\u0000\u0761\u074b\u0001\u0000\u0000\u0000\u0762]\u0001\u0000\u0000"+
		"\u0000\u0763\u0766\u0003l6\u0000\u0764\u0766\u0003n7\u0000\u0765\u0763"+
		"\u0001\u0000\u0000\u0000\u0765\u0764\u0001\u0000\u0000\u0000\u0766_\u0001"+
		"\u0000\u0000\u0000\u0767\u077a\u0003\\.\u0000\u0768\u0769\u0007\u001e"+
		"\u0000\u0000\u0769\u076b\u0005\u0454\u0000\u0000\u076a\u076c\u0003\u0104"+
		"\u0082\u0000\u076b\u076a\u0001\u0000\u0000\u0000\u076b\u076c\u0001\u0000"+
		"\u0000\u0000\u076c\u076d\u0001\u0000\u0000\u0000\u076d\u0776\u0005\u0455"+
		"\u0000\u0000\u076e\u076f\u0005\u0456\u0000\u0000\u076f\u0771\u0005\u0454"+
		"\u0000\u0000\u0770\u0772\u0003\u0104\u0082\u0000\u0771\u0770\u0001\u0000"+
		"\u0000\u0000\u0771\u0772\u0001\u0000\u0000\u0000\u0772\u0773\u0001\u0000"+
		"\u0000\u0000\u0773\u0775\u0005\u0455\u0000\u0000\u0774\u076e\u0001\u0000"+
		"\u0000\u0000\u0775\u0778\u0001\u0000\u0000\u0000\u0776\u0774\u0001\u0000"+
		"\u0000\u0000\u0776\u0777\u0001\u0000\u0000\u0000\u0777\u077a\u0001\u0000"+
		"\u0000\u0000\u0778\u0776\u0001\u0000\u0000\u0000\u0779\u0767\u0001\u0000"+
		"\u0000\u0000\u0779\u0768\u0001\u0000\u0000\u0000\u077aa\u0001\u0000\u0000"+
		"\u0000\u077b\u077c\u0003\u00d0h\u0000\u077c\u077f\u0005\u044b\u0000\u0000"+
		"\u077d\u0780\u0003\u0138\u009c\u0000\u077e\u0780\u0005(\u0000\u0000\u077f"+
		"\u077d\u0001\u0000\u0000\u0000\u077f\u077e\u0001\u0000\u0000\u0000\u0780"+
		"c\u0001\u0000\u0000\u0000\u0781\u0784\u0003\u00dcn\u0000\u0782\u0784\u0005"+
		"\u0470\u0000\u0000\u0783\u0781\u0001\u0000\u0000\u0000\u0783\u0782\u0001"+
		"\u0000\u0000\u0000\u0784e\u0001\u0000\u0000\u0000\u0785\u0786\u0005>\u0000"+
		"\u0000\u0786\u078c\u0005\u00af\u0000\u0000\u0787\u0788\u0005c\u0000\u0000"+
		"\u0788\u0789\u0005M\u0000\u0000\u0789\u078a\u0005\u0246\u0000\u0000\u078a"+
		"\u078c\u0005\u01ed\u0000\u0000\u078b\u0785\u0001\u0000\u0000\u0000\u078b"+
		"\u0787\u0001\u0000\u0000\u0000\u078cg\u0001\u0000\u0000\u0000\u078d\u078f"+
		"\u0005*\u0000\u0000\u078e\u0790\u0005e\u0000\u0000\u078f\u078e\u0001\u0000"+
		"\u0000\u0000\u078f\u0790\u0001\u0000\u0000\u0000\u0790\u0792\u0001\u0000"+
		"\u0000\u0000\u0791\u0793\u0005\u021f\u0000\u0000\u0792\u0791\u0001\u0000"+
		"\u0000\u0000\u0792\u0793\u0001\u0000\u0000\u0000\u0793\u0795\u0001\u0000"+
		"\u0000\u0000\u0794\u0796\u0005K\u0000\u0000\u0795\u0794\u0001\u0000\u0000"+
		"\u0000\u0795\u0796\u0001\u0000\u0000\u0000\u0796\u0797\u0001\u0000\u0000"+
		"\u0000\u0797\u0798\u0005A\u0000\u0000\u0798\u079e\u0003\u00ceg\u0000\u0799"+
		"\u079a\u0005{\u0000\u0000\u079a\u079b\u0005\u0454\u0000\u0000\u079b\u079c"+
		"\u0003\u00fc~\u0000\u079c\u079d\u0005\u0455\u0000\u0000\u079d\u079f\u0001"+
		"\u0000\u0000\u0000\u079e\u0799\u0001\u0000\u0000\u0000\u079e\u079f\u0001"+
		"\u0000\u0000\u0000\u079f\u07a2\u0001\u0000\u0000\u0000\u07a0\u07a1\u0005"+
		"\u00b5\u0000\u0000\u07a1\u07a3\u0003\u0138\u009c\u0000\u07a2\u07a0\u0001"+
		"\u0000\u0000\u0000\u07a2\u07a3\u0001\u0000\u0000\u0000\u07a3\u07a5\u0001"+
		"\u0000\u0000\u0000\u07a4\u07a6\u0003p8\u0000\u07a5\u07a4\u0001\u0000\u0000"+
		"\u0000\u07a5\u07a6\u0001\u0000\u0000\u0000\u07a6\u07a9\u0001\u0000\u0000"+
		"\u0000\u07a7\u07a8\u0005_\u0000\u0000\u07a8\u07aa\u0003\u00a4R\u0000\u07a9"+
		"\u07a7\u0001\u0000\u0000\u0000\u07a9\u07aa\u0001\u0000\u0000\u0000\u07aa"+
		"i\u0001\u0000\u0000\u0000\u07ab\u07ad\u0005*\u0000\u0000\u07ac\u07ae\u0005"+
		"e\u0000\u0000\u07ad\u07ac\u0001\u0000\u0000\u0000\u07ad\u07ae\u0001\u0000"+
		"\u0000\u0000\u07ae\u07b0\u0001\u0000\u0000\u0000\u07af\u07b1\u0005\u021f"+
		"\u0000\u0000\u07b0\u07af\u0001\u0000\u0000\u0000\u07b0\u07b1\u0001\u0000"+
		"\u0000\u0000\u07b1\u07b3\u0001\u0000\u0000\u0000\u07b2\u07b4\u0005K\u0000"+
		"\u0000\u07b3\u07b2\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000"+
		"\u0000\u07b4\u07dc\u0001\u0000\u0000\u0000\u07b5\u07b8\u0003\u00ceg\u0000"+
		"\u07b6\u07b7\u0005\u0453\u0000\u0000\u07b7\u07b9\u0005\u0444\u0000\u0000"+
		"\u07b8\u07b6\u0001\u0000\u0000\u0000\u07b8\u07b9\u0001\u0000\u0000\u0000"+
		"\u07b9\u07c2\u0001\u0000\u0000\u0000\u07ba\u07bb\u0005\u0456\u0000\u0000"+
		"\u07bb\u07be\u0003\u00ceg\u0000\u07bc\u07bd\u0005\u0453\u0000\u0000\u07bd"+
		"\u07bf\u0005\u0444\u0000\u0000\u07be\u07bc\u0001\u0000\u0000\u0000\u07be"+
		"\u07bf\u0001\u0000\u0000\u0000\u07bf\u07c1\u0001\u0000\u0000\u0000\u07c0"+
		"\u07ba\u0001\u0000\u0000\u0000\u07c1\u07c4\u0001\u0000\u0000\u0000\u07c2"+
		"\u07c0\u0001\u0000\u0000\u0000\u07c2\u07c3\u0001\u0000\u0000\u0000\u07c3"+
		"\u07c5\u0001\u0000\u0000\u0000\u07c4\u07c2\u0001\u0000\u0000\u0000\u07c5"+
		"\u07c6\u0005A\u0000\u0000\u07c6\u07c7\u0003t:\u0000\u07c7\u07dd\u0001"+
		"\u0000\u0000\u0000\u07c8\u07c9\u0005A\u0000\u0000\u07c9\u07cc\u0003\u00ce"+
		"g\u0000\u07ca\u07cb\u0005\u0453\u0000\u0000\u07cb\u07cd\u0005\u0444\u0000"+
		"\u0000\u07cc\u07ca\u0001\u0000\u0000\u0000\u07cc\u07cd\u0001\u0000\u0000"+
		"\u0000\u07cd\u07d6\u0001\u0000\u0000\u0000\u07ce\u07cf\u0005\u0456\u0000"+
		"\u0000\u07cf\u07d2\u0003\u00ceg\u0000\u07d0\u07d1\u0005\u0453\u0000\u0000"+
		"\u07d1\u07d3\u0005\u0444\u0000\u0000\u07d2\u07d0\u0001\u0000\u0000\u0000"+
		"\u07d2\u07d3\u0001\u0000\u0000\u0000\u07d3\u07d5\u0001\u0000\u0000\u0000"+
		"\u07d4\u07ce\u0001\u0000\u0000\u0000\u07d5\u07d8\u0001\u0000\u0000\u0000"+
		"\u07d6\u07d4\u0001\u0000\u0000\u0000\u07d6\u07d7\u0001\u0000\u0000\u0000"+
		"\u07d7\u07d9\u0001\u0000\u0000\u0000\u07d8\u07d6\u0001\u0000\u0000\u0000"+
		"\u07d9\u07da\u0005\u00b2\u0000\u0000\u07da\u07db\u0003t:\u0000\u07db\u07dd"+
		"\u0001\u0000\u0000\u0000\u07dc\u07b5\u0001\u0000\u0000\u0000\u07dc\u07c8"+
		"\u0001\u0000\u0000\u0000\u07dd\u07e0\u0001\u0000\u0000\u0000\u07de\u07df"+
		"\u0005\u00b5\u0000\u0000\u07df\u07e1\u0003\u0138\u009c\u0000\u07e0\u07de"+
		"\u0001\u0000\u0000\u0000\u07e0\u07e1\u0001\u0000\u0000\u0000\u07e1k\u0001"+
		"\u0000\u0000\u0000\u07e2\u07e4\u0005\u00af\u0000\u0000\u07e3\u07e5\u0005"+
		"e\u0000\u0000\u07e4\u07e3\u0001\u0000\u0000\u0000\u07e4\u07e5\u0001\u0000"+
		"\u0000\u0000\u07e5\u07e7\u0001\u0000\u0000\u0000\u07e6\u07e8\u0005K\u0000"+
		"\u0000\u07e7\u07e6\u0001\u0000\u0000\u0000\u07e7\u07e8\u0001\u0000\u0000"+
		"\u0000\u07e8\u07e9\u0001\u0000\u0000\u0000\u07e9\u07ee\u0003\u00ceg\u0000"+
		"\u07ea\u07ec\u0005\f\u0000\u0000\u07eb\u07ea\u0001\u0000\u0000\u0000\u07eb"+
		"\u07ec\u0001\u0000\u0000\u0000\u07ec\u07ed\u0001\u0000\u0000\u0000\u07ed"+
		"\u07ef\u0003\u00dcn\u0000\u07ee\u07eb\u0001\u0000\u0000\u0000\u07ee\u07ef"+
		"\u0001\u0000\u0000\u0000\u07ef\u07f0\u0001\u0000\u0000\u0000\u07f0\u07f1"+
		"\u0005\u0093\u0000\u0000\u07f1\u07f6\u0003b1\u0000\u07f2\u07f3\u0005\u0456"+
		"\u0000\u0000\u07f3\u07f5\u0003b1\u0000\u07f4\u07f2\u0001\u0000\u0000\u0000"+
		"\u07f5\u07f8\u0001\u0000\u0000\u0000\u07f6\u07f4\u0001\u0000\u0000\u0000"+
		"\u07f6\u07f7\u0001\u0000\u0000\u0000\u07f7\u07fb\u0001\u0000\u0000\u0000"+
		"\u07f8\u07f6\u0001\u0000\u0000\u0000\u07f9\u07fa\u0005\u00b5\u0000\u0000"+
		"\u07fa\u07fc\u0003\u0138\u009c\u0000\u07fb\u07f9\u0001\u0000\u0000\u0000"+
		"\u07fb\u07fc\u0001\u0000\u0000\u0000\u07fc\u07fe\u0001\u0000\u0000\u0000"+
		"\u07fd\u07ff\u0003p8\u0000\u07fe\u07fd\u0001\u0000\u0000\u0000\u07fe\u07ff"+
		"\u0001\u0000\u0000\u0000\u07ff\u0801\u0001\u0000\u0000\u0000\u0800\u0802"+
		"\u0003\u00a2Q\u0000\u0801\u0800\u0001\u0000\u0000\u0000\u0801\u0802\u0001"+
		"\u0000\u0000\u0000\u0802m\u0001\u0000\u0000\u0000\u0803\u0805\u0005\u00af"+
		"\u0000\u0000\u0804\u0806\u0005e\u0000\u0000\u0805\u0804\u0001\u0000\u0000"+
		"\u0000\u0805\u0806\u0001\u0000\u0000\u0000\u0806\u0808\u0001\u0000\u0000"+
		"\u0000\u0807\u0809\u0005K\u0000\u0000\u0808\u0807\u0001\u0000\u0000\u0000"+
		"\u0808\u0809\u0001\u0000\u0000\u0000\u0809\u080a\u0001\u0000\u0000\u0000"+
		"\u080a\u080b\u0003t:\u0000\u080b\u080c\u0005\u0093\u0000\u0000\u080c\u0811"+
		"\u0003b1\u0000\u080d\u080e\u0005\u0456\u0000\u0000\u080e\u0810\u0003b"+
		"1\u0000\u080f\u080d\u0001\u0000\u0000\u0000\u0810\u0813\u0001\u0000\u0000"+
		"\u0000\u0811\u080f\u0001\u0000\u0000\u0000\u0811\u0812\u0001\u0000\u0000"+
		"\u0000\u0812\u0816\u0001\u0000\u0000\u0000\u0813\u0811\u0001\u0000\u0000"+
		"\u0000\u0814\u0815\u0005\u00b5\u0000\u0000\u0815\u0817\u0003\u0138\u009c"+
		"\u0000\u0816\u0814\u0001\u0000\u0000\u0000\u0816\u0817\u0001\u0000\u0000"+
		"\u0000\u0817o\u0001\u0000\u0000\u0000\u0818\u0819\u0005v\u0000\u0000\u0819"+
		"\u081a\u0005\u0012\u0000\u0000\u081a\u081f\u0003r9\u0000\u081b\u081c\u0005"+
		"\u0456\u0000\u0000\u081c\u081e\u0003r9\u0000\u081d\u081b\u0001\u0000\u0000"+
		"\u0000\u081e\u0821\u0001\u0000\u0000\u0000\u081f\u081d\u0001\u0000\u0000"+
		"\u0000\u081f\u0820\u0001\u0000\u0000\u0000\u0820q\u0001\u0000\u0000\u0000"+
		"\u0821\u081f\u0001\u0000\u0000\u0000\u0822\u0824\u0003\u0138\u009c\u0000"+
		"\u0823\u0825\u0007\u001f\u0000\u0000\u0824\u0823\u0001\u0000\u0000\u0000"+
		"\u0824\u0825\u0001\u0000\u0000\u0000\u0825s\u0001\u0000\u0000\u0000\u0826"+
		"\u082b\u0003v;\u0000\u0827\u0828\u0005\u0456\u0000\u0000\u0828\u082a\u0003"+
		"v;\u0000\u0829\u0827\u0001\u0000\u0000\u0000\u082a\u082d\u0001\u0000\u0000"+
		"\u0000\u082b\u0829\u0001\u0000\u0000\u0000\u082b\u082c\u0001\u0000\u0000"+
		"\u0000\u082cu\u0001\u0000\u0000\u0000\u082d\u082b\u0001\u0000\u0000\u0000"+
		"\u082e\u0832\u0003x<\u0000\u082f\u0831\u0003~?\u0000\u0830\u082f\u0001"+
		"\u0000\u0000\u0000\u0831\u0834\u0001\u0000\u0000\u0000\u0832\u0830\u0001"+
		"\u0000\u0000\u0000\u0832\u0833\u0001\u0000\u0000\u0000\u0833\u0840\u0001"+
		"\u0000\u0000\u0000\u0834\u0832\u0001\u0000\u0000\u0000\u0835\u0836\u0005"+
		"\u0454\u0000\u0000\u0836\u083a\u0003x<\u0000\u0837\u0839\u0003~?\u0000"+
		"\u0838\u0837\u0001\u0000\u0000\u0000\u0839\u083c\u0001\u0000\u0000\u0000"+
		"\u083a\u0838\u0001\u0000\u0000\u0000\u083a\u083b\u0001\u0000\u0000\u0000"+
		"\u083b\u083d\u0001\u0000\u0000\u0000\u083c\u083a\u0001\u0000\u0000\u0000"+
		"\u083d\u083e\u0005\u0455\u0000\u0000\u083e\u0840\u0001\u0000\u0000\u0000"+
		"\u083f\u082e\u0001\u0000\u0000\u0000\u083f\u0835\u0001\u0000\u0000\u0000"+
		"\u0840w\u0001\u0000\u0000\u0000\u0841\u0847\u0003\u00ceg\u0000\u0842\u0843"+
		"\u0005{\u0000\u0000\u0843\u0844\u0005\u0454\u0000\u0000\u0844\u0845\u0003"+
		"\u00fc~\u0000\u0845\u0846\u0005\u0455\u0000\u0000\u0846\u0848\u0001\u0000"+
		"\u0000\u0000\u0847\u0842\u0001\u0000\u0000\u0000\u0847\u0848\u0001\u0000"+
		"\u0000\u0000\u0848\u084d\u0001\u0000\u0000\u0000\u0849\u084b\u0005\f\u0000"+
		"\u0000\u084a\u0849\u0001\u0000\u0000\u0000\u084a\u084b\u0001\u0000\u0000"+
		"\u0000\u084b\u084c\u0001\u0000\u0000\u0000\u084c\u084e\u0003\u00dcn\u0000"+
		"\u084d\u084a\u0001\u0000\u0000\u0000\u084d\u084e\u0001\u0000\u0000\u0000"+
		"\u084e\u0857\u0001\u0000\u0000\u0000\u084f\u0854\u0003z=\u0000\u0850\u0851"+
		"\u0005\u0456\u0000\u0000\u0851\u0853\u0003z=\u0000\u0852\u0850\u0001\u0000"+
		"\u0000\u0000\u0853\u0856\u0001\u0000\u0000\u0000\u0854\u0852\u0001\u0000"+
		"\u0000\u0000\u0854\u0855\u0001\u0000\u0000\u0000\u0855\u0858\u0001\u0000"+
		"\u0000\u0000\u0856\u0854\u0001\u0000\u0000\u0000\u0857\u084f\u0001\u0000"+
		"\u0000\u0000\u0857\u0858\u0001\u0000\u0000\u0000\u0858\u086a\u0001\u0000"+
		"\u0000\u0000\u0859\u085f\u0003\\.\u0000\u085a\u085b\u0005\u0454\u0000"+
		"\u0000\u085b\u085c\u0003\\.\u0000\u085c\u085d\u0005\u0455\u0000\u0000"+
		"\u085d\u085f\u0001\u0000\u0000\u0000\u085e\u0859\u0001\u0000\u0000\u0000"+
		"\u085e\u085a\u0001\u0000\u0000\u0000\u085f\u0861\u0001\u0000\u0000\u0000"+
		"\u0860\u0862\u0005\f\u0000\u0000\u0861\u0860\u0001\u0000\u0000\u0000\u0861"+
		"\u0862\u0001\u0000\u0000\u0000\u0862\u0863\u0001\u0000\u0000\u0000\u0863"+
		"\u0864\u0003\u00dcn\u0000\u0864\u086a\u0001\u0000\u0000\u0000\u0865\u0866"+
		"\u0005\u0454\u0000\u0000\u0866\u0867\u0003t:\u0000\u0867\u0868\u0005\u0455"+
		"\u0000\u0000\u0868\u086a\u0001\u0000\u0000\u0000\u0869\u0841\u0001\u0000"+
		"\u0000\u0000\u0869\u085e\u0001\u0000\u0000\u0000\u0869\u0865\u0001\u0000"+
		"\u0000\u0000\u086ay\u0001\u0000\u0000\u0000\u086b\u086c\u0007 \u0000\u0000"+
		"\u086c\u086f\u0007\n\u0000\u0000\u086d\u086e\u0005>\u0000\u0000\u086e"+
		"\u0870\u0003|>\u0000\u086f\u086d\u0001\u0000\u0000\u0000\u086f\u0870\u0001"+
		"\u0000\u0000\u0000\u0870\u0871\u0001\u0000\u0000\u0000\u0871\u0872\u0005"+
		"\u0454\u0000\u0000\u0872\u0873\u0003\u00fc~\u0000\u0873\u0874\u0005\u0455"+
		"\u0000\u0000\u0874{\u0001\u0000\u0000\u0000\u0875\u087b\u0005W\u0000\u0000"+
		"\u0876\u0877\u0005v\u0000\u0000\u0877\u087b\u0005\u0012\u0000\u0000\u0878"+
		"\u0879\u0005F\u0000\u0000\u0879\u087b\u0005\u0012\u0000\u0000\u087a\u0875"+
		"\u0001\u0000\u0000\u0000\u087a\u0876\u0001\u0000\u0000\u0000\u087a\u0878"+
		"\u0001\u0000\u0000\u0000\u087b}\u0001\u0000\u0000\u0000\u087c\u087e\u0007"+
		"!\u0000\u0000\u087d\u087c\u0001\u0000\u0000\u0000\u087d\u087e\u0001\u0000"+
		"\u0000\u0000\u087e\u087f\u0001\u0000\u0000\u0000\u087f\u0880\u0005W\u0000"+
		"\u0000\u0880\u0888\u0003x<\u0000\u0881\u0882\u0005p\u0000\u0000\u0882"+
		"\u0889\u0003\u0138\u009c\u0000\u0883\u0884\u0005\u00b2\u0000\u0000\u0884"+
		"\u0885\u0005\u0454\u0000\u0000\u0885\u0886\u0003\u00fc~\u0000\u0886\u0887"+
		"\u0005\u0455\u0000\u0000\u0887\u0889\u0001\u0000\u0000\u0000\u0888\u0881"+
		"\u0001\u0000\u0000\u0000\u0888\u0883\u0001\u0000\u0000\u0000\u0888\u0889"+
		"\u0001\u0000\u0000\u0000\u0889\u08a9\u0001\u0000\u0000\u0000\u088a\u088b"+
		"\u0005\u00a2\u0000\u0000\u088b\u088e\u0003x<\u0000\u088c\u088d\u0005p"+
		"\u0000\u0000\u088d\u088f\u0003\u0138\u009c\u0000\u088e\u088c\u0001\u0000"+
		"\u0000\u0000\u088e\u088f\u0001\u0000\u0000\u0000\u088f\u08a9\u0001\u0000"+
		"\u0000\u0000\u0890\u0892\u0007\"\u0000\u0000\u0891\u0893\u0005y\u0000"+
		"\u0000\u0892\u0891\u0001\u0000\u0000\u0000\u0892\u0893\u0001\u0000\u0000"+
		"\u0000\u0893\u0894\u0001\u0000\u0000\u0000\u0894\u0895\u0005W\u0000\u0000"+
		"\u0895\u089d\u0003x<\u0000\u0896\u0897\u0005p\u0000\u0000\u0897\u089e"+
		"\u0003\u0138\u009c\u0000\u0898\u0899\u0005\u00b2\u0000\u0000\u0899\u089a"+
		"\u0005\u0454\u0000\u0000\u089a\u089b\u0003\u00fc~\u0000\u089b\u089c\u0005"+
		"\u0455\u0000\u0000\u089c\u089e\u0001\u0000\u0000\u0000\u089d\u0896\u0001"+
		"\u0000\u0000\u0000\u089d\u0898\u0001\u0000\u0000\u0000\u089e\u08a9\u0001"+
		"\u0000\u0000\u0000\u089f\u08a4\u0005k\u0000\u0000\u08a0\u08a2\u0007\""+
		"\u0000\u0000\u08a1\u08a3\u0005y\u0000\u0000\u08a2\u08a1\u0001\u0000\u0000"+
		"\u0000\u08a2\u08a3\u0001\u0000\u0000\u0000\u08a3\u08a5\u0001\u0000\u0000"+
		"\u0000\u08a4\u08a0\u0001\u0000\u0000\u0000\u08a4\u08a5\u0001\u0000\u0000"+
		"\u0000\u08a5\u08a6\u0001\u0000\u0000\u0000\u08a6\u08a7\u0005W\u0000\u0000"+
		"\u08a7\u08a9\u0003x<\u0000\u08a8\u087d\u0001\u0000\u0000\u0000\u08a8\u088a"+
		"\u0001\u0000\u0000\u0000\u08a8\u0890\u0001\u0000\u0000\u0000\u08a8\u089f"+
		"\u0001\u0000\u0000\u0000\u08a9\u007f\u0001\u0000\u0000\u0000\u08aa\u08ab"+
		"\u0005\u0454\u0000\u0000\u08ab\u08ac\u0003\u0084B\u0000\u08ac\u08ad\u0005"+
		"\u0455\u0000\u0000\u08ad\u08b3\u0001\u0000\u0000\u0000\u08ae\u08af\u0005"+
		"\u0454\u0000\u0000\u08af\u08b0\u0003\u0080@\u0000\u08b0\u08b1\u0005\u0455"+
		"\u0000\u0000\u08b1\u08b3\u0001\u0000\u0000\u0000\u08b2\u08aa\u0001\u0000"+
		"\u0000\u0000\u08b2\u08ae\u0001\u0000\u0000\u0000\u08b3\u0081\u0001\u0000"+
		"\u0000\u0000\u08b4\u08b5\u0005\u0454\u0000\u0000\u08b5\u08b6\u0003\u0086"+
		"C\u0000\u08b6\u08b7\u0005\u0455\u0000\u0000\u08b7\u08bd\u0001\u0000\u0000"+
		"\u0000\u08b8\u08b9\u0005\u0454\u0000\u0000\u08b9\u08ba\u0003\u0082A\u0000"+
		"\u08ba\u08bb\u0005\u0455\u0000\u0000\u08bb\u08bd\u0001\u0000\u0000\u0000"+
		"\u08bc\u08b4\u0001\u0000\u0000\u0000\u08bc\u08b8\u0001\u0000\u0000\u0000"+
		"\u08bd\u0083\u0001\u0000\u0000\u0000\u08be\u08c2\u0005\u0092\u0000\u0000"+
		"\u08bf\u08c1\u0003\u008cF\u0000\u08c0\u08bf\u0001\u0000\u0000\u0000\u08c1"+
		"\u08c4\u0001\u0000\u0000\u0000\u08c2\u08c0\u0001\u0000\u0000\u0000\u08c2"+
		"\u08c3\u0001\u0000\u0000\u0000\u08c3\u08c5\u0001\u0000\u0000\u0000\u08c4"+
		"\u08c2\u0001\u0000\u0000\u0000\u08c5\u08c7\u0003\u008eG\u0000\u08c6\u08c8"+
		"\u0003\u0092I\u0000\u08c7\u08c6\u0001\u0000\u0000\u0000\u08c7\u08c8\u0001"+
		"\u0000\u0000\u0000\u08c8\u08ca\u0001\u0000\u0000\u0000\u08c9\u08cb\u0003"+
		"\u0098L\u0000\u08ca\u08c9\u0001\u0000\u0000\u0000\u08ca\u08cb\u0001\u0000"+
		"\u0000\u0000\u08cb\u08cd\u0001\u0000\u0000\u0000\u08cc\u08ce\u0003\u009a"+
		"M\u0000\u08cd\u08cc\u0001\u0000\u0000\u0000\u08cd\u08ce\u0001\u0000\u0000"+
		"\u0000\u08ce\u08d0\u0001\u0000\u0000\u0000\u08cf\u08d1\u0003\u009cN\u0000"+
		"\u08d0\u08cf\u0001\u0000\u0000\u0000\u08d0\u08d1\u0001\u0000\u0000\u0000"+
		"\u08d1\u08d3\u0001\u0000\u0000\u0000\u08d2\u08d4\u0003\u009eO\u0000\u08d3"+
		"\u08d2\u0001\u0000\u0000\u0000\u08d3\u08d4\u0001\u0000\u0000\u0000\u08d4"+
		"\u08d6\u0001\u0000\u0000\u0000\u08d5\u08d7\u0003p8\u0000\u08d6\u08d5\u0001"+
		"\u0000\u0000\u0000\u08d6\u08d7\u0001\u0000\u0000\u0000\u08d7\u08d9\u0001"+
		"\u0000\u0000\u0000\u08d8\u08da\u0003\u00a2Q\u0000\u08d9\u08d8\u0001\u0000"+
		"\u0000\u0000\u08d9\u08da\u0001\u0000\u0000\u0000\u08da\u08f9\u0001\u0000"+
		"\u0000\u0000\u08db\u08df\u0005\u0092\u0000\u0000\u08dc\u08de\u0003\u008c"+
		"F\u0000\u08dd\u08dc\u0001\u0000\u0000\u0000\u08de\u08e1\u0001\u0000\u0000"+
		"\u0000\u08df\u08dd\u0001\u0000\u0000\u0000\u08df\u08e0\u0001\u0000\u0000"+
		"\u0000\u08e0\u08e2\u0001\u0000\u0000\u0000\u08e1\u08df\u0001\u0000\u0000"+
		"\u0000\u08e2\u08e4\u0003\u008eG\u0000\u08e3\u08e5\u0003\u0098L\u0000\u08e4"+
		"\u08e3\u0001\u0000\u0000\u0000\u08e4\u08e5\u0001\u0000\u0000\u0000\u08e5"+
		"\u08e7\u0001\u0000\u0000\u0000\u08e6\u08e8\u0003\u009aM\u0000\u08e7\u08e6"+
		"\u0001\u0000\u0000\u0000\u08e7\u08e8\u0001\u0000\u0000\u0000\u08e8\u08ea"+
		"\u0001\u0000\u0000\u0000\u08e9\u08eb\u0003\u009cN\u0000\u08ea\u08e9\u0001"+
		"\u0000\u0000\u0000\u08ea\u08eb\u0001\u0000\u0000\u0000\u08eb\u08ed\u0001"+
		"\u0000\u0000\u0000\u08ec\u08ee\u0003\u009eO\u0000\u08ed\u08ec\u0001\u0000"+
		"\u0000\u0000\u08ed\u08ee\u0001\u0000\u0000\u0000\u08ee\u08f0\u0001\u0000"+
		"\u0000\u0000\u08ef\u08f1\u0003p8\u0000\u08f0\u08ef\u0001\u0000\u0000\u0000"+
		"\u08f0\u08f1\u0001\u0000\u0000\u0000\u08f1\u08f3\u0001\u0000\u0000\u0000"+
		"\u08f2\u08f4\u0003\u00a2Q\u0000\u08f3\u08f2\u0001\u0000\u0000\u0000\u08f3"+
		"\u08f4\u0001\u0000\u0000\u0000\u08f4\u08f6\u0001\u0000\u0000\u0000\u08f5"+
		"\u08f7\u0003\u0092I\u0000\u08f6\u08f5\u0001\u0000\u0000\u0000\u08f6\u08f7"+
		"\u0001\u0000\u0000\u0000\u08f7\u08f9\u0001\u0000\u0000\u0000\u08f8\u08be"+
		"\u0001\u0000\u0000\u0000\u08f8\u08db\u0001\u0000\u0000\u0000\u08f9\u0085"+
		"\u0001\u0000\u0000\u0000\u08fa\u08fe\u0005\u0092\u0000\u0000\u08fb\u08fd"+
		"\u0003\u008cF\u0000\u08fc\u08fb\u0001\u0000\u0000\u0000\u08fd\u0900\u0001"+
		"\u0000\u0000\u0000\u08fe\u08fc\u0001\u0000\u0000\u0000\u08fe\u08ff\u0001"+
		"\u0000\u0000\u0000\u08ff\u0901\u0001\u0000\u0000\u0000\u0900\u08fe\u0001"+
		"\u0000\u0000\u0000\u0901\u0903\u0003\u008eG\u0000\u0902\u0904\u0003\u0098"+
		"L\u0000\u0903\u0902\u0001\u0000\u0000\u0000\u0903\u0904\u0001\u0000\u0000"+
		"\u0000\u0904\u0906\u0001\u0000\u0000\u0000\u0905\u0907\u0003\u009aM\u0000"+
		"\u0906\u0905\u0001\u0000\u0000\u0000\u0906\u0907\u0001\u0000\u0000\u0000"+
		"\u0907\u0909\u0001\u0000\u0000\u0000\u0908\u090a\u0003\u009cN\u0000\u0909"+
		"\u0908\u0001\u0000\u0000\u0000\u0909\u090a\u0001\u0000\u0000\u0000\u090a"+
		"\u090c\u0001\u0000\u0000\u0000\u090b\u090d\u0003\u009eO\u0000\u090c\u090b"+
		"\u0001\u0000\u0000\u0000\u090c\u090d\u0001\u0000\u0000\u0000\u090d\u090f"+
		"\u0001\u0000\u0000\u0000\u090e\u0910\u0003p8\u0000\u090f\u090e\u0001\u0000"+
		"\u0000\u0000\u090f\u0910\u0001\u0000\u0000\u0000\u0910\u0912\u0001\u0000"+
		"\u0000\u0000\u0911\u0913\u0003\u00a2Q\u0000\u0912\u0911\u0001\u0000\u0000"+
		"\u0000\u0912\u0913\u0001\u0000\u0000\u0000\u0913\u0087\u0001\u0000\u0000"+
		"\u0000\u0914\u0916\u0005\u00ab\u0000\u0000\u0915\u0917\u0007\u001d\u0000"+
		"\u0000\u0916\u0915\u0001\u0000\u0000\u0000\u0916\u0917\u0001\u0000\u0000"+
		"\u0000\u0917\u0918\u0001\u0000\u0000\u0000\u0918\u0919\u0003\u0082A\u0000"+
		"\u0919\u0089\u0001\u0000\u0000\u0000\u091a\u091c\u0005\u00ab\u0000\u0000"+
		"\u091b\u091d\u0007\u001d\u0000\u0000\u091c\u091b\u0001\u0000\u0000\u0000"+
		"\u091c\u091d\u0001\u0000\u0000\u0000\u091d\u0920\u0001\u0000\u0000\u0000"+
		"\u091e\u0921\u0003\u0086C\u0000\u091f\u0921\u0003\u0082A\u0000\u0920\u091e"+
		"\u0001\u0000\u0000\u0000\u0920\u091f\u0001\u0000\u0000\u0000\u0921\u008b"+
		"\u0001\u0000\u0000\u0000\u0922\u092b\u0007#\u0000\u0000\u0923\u092b\u0005"+
		"H\u0000\u0000\u0924\u092b\u0005\u00a2\u0000\u0000\u0925\u092b\u0005\u009e"+
		"\u0000\u0000\u0926\u092b\u0005\u009c\u0000\u0000\u0927\u092b\u0005\u0255"+
		"\u0000\u0000\u0928\u092b\u0007$\u0000\u0000\u0929\u092b\u0005\u009d\u0000"+
		"\u0000\u092a\u0922\u0001\u0000\u0000\u0000\u092a\u0923\u0001\u0000\u0000"+
		"\u0000\u092a\u0924\u0001\u0000\u0000\u0000\u092a\u0925\u0001\u0000\u0000"+
		"\u0000\u092a\u0926\u0001\u0000\u0000\u0000\u092a\u0927\u0001\u0000\u0000"+
		"\u0000\u092a\u0928\u0001\u0000\u0000\u0000\u092a\u0929\u0001\u0000\u0000"+
		"\u0000\u092b\u008d\u0001\u0000\u0000\u0000\u092c\u092f\u0005\u0444\u0000"+
		"\u0000\u092d\u092f\u0003\u0090H\u0000\u092e\u092c\u0001\u0000\u0000\u0000"+
		"\u092e\u092d\u0001\u0000\u0000\u0000\u092f\u0934\u0001\u0000\u0000\u0000"+
		"\u0930\u0931\u0005\u0456\u0000\u0000\u0931\u0933\u0003\u0090H\u0000\u0932"+
		"\u0930\u0001\u0000\u0000\u0000\u0933\u0936\u0001\u0000\u0000\u0000\u0934"+
		"\u0932\u0001\u0000\u0000\u0000\u0934\u0935\u0001\u0000\u0000\u0000\u0935"+
		"\u008f\u0001\u0000\u0000\u0000\u0936\u0934\u0001\u0000\u0000\u0000\u0937"+
		"\u0938\u0003\u00ccf\u0000\u0938\u0939\u0005\u0453\u0000\u0000\u0939\u093a"+
		"\u0005\u0444\u0000\u0000\u093a\u0955\u0001\u0000\u0000\u0000\u093b\u0940"+
		"\u0003\u00d0h\u0000\u093c\u093e\u0005\f\u0000\u0000\u093d\u093c\u0001"+
		"\u0000\u0000\u0000\u093d\u093e\u0001\u0000\u0000\u0000\u093e\u093f\u0001"+
		"\u0000\u0000\u0000\u093f\u0941\u0003\u00dcn\u0000\u0940\u093d\u0001\u0000"+
		"\u0000\u0000\u0940\u0941\u0001\u0000\u0000\u0000\u0941\u0955\u0001\u0000"+
		"\u0000\u0000\u0942\u0947\u0003\u0110\u0088\u0000\u0943\u0945\u0005\f\u0000"+
		"\u0000\u0944\u0943\u0001\u0000\u0000\u0000\u0944\u0945\u0001\u0000\u0000"+
		"\u0000\u0945\u0946\u0001\u0000\u0000\u0000\u0946\u0948\u0003\u00dcn\u0000"+
		"\u0947\u0944\u0001\u0000\u0000\u0000\u0947\u0948\u0001\u0000\u0000\u0000"+
		"\u0948\u0955\u0001\u0000\u0000\u0000\u0949\u094a\u0005\u0470\u0000\u0000"+
		"\u094a\u094c\u0005\u043b\u0000\u0000\u094b\u0949\u0001\u0000\u0000\u0000"+
		"\u094b\u094c\u0001\u0000\u0000\u0000\u094c\u094d\u0001\u0000\u0000\u0000"+
		"\u094d\u0952\u0003\u0138\u009c\u0000\u094e\u0950\u0005\f\u0000\u0000\u094f"+
		"\u094e\u0001\u0000\u0000\u0000\u094f\u0950\u0001\u0000\u0000\u0000\u0950"+
		"\u0951\u0001\u0000\u0000\u0000\u0951\u0953\u0003\u00dcn\u0000\u0952\u094f"+
		"\u0001\u0000\u0000\u0000\u0952\u0953\u0001\u0000\u0000\u0000\u0953\u0955"+
		"\u0001\u0000\u0000\u0000\u0954\u0937\u0001\u0000\u0000\u0000\u0954\u093b"+
		"\u0001\u0000\u0000\u0000\u0954\u0942\u0001\u0000\u0000\u0000\u0954\u094b"+
		"\u0001\u0000\u0000\u0000\u0955\u0091\u0001\u0000\u0000\u0000\u0956\u0957"+
		"\u0005T\u0000\u0000\u0957\u095c\u0003d2\u0000\u0958\u0959\u0005\u0456"+
		"\u0000\u0000\u0959\u095b\u0003d2\u0000\u095a\u0958\u0001\u0000\u0000\u0000"+
		"\u095b\u095e\u0001\u0000\u0000\u0000\u095c\u095a\u0001\u0000\u0000\u0000"+
		"\u095c\u095d\u0001\u0000\u0000\u0000\u095d\u097b\u0001\u0000\u0000\u0000"+
		"\u095e\u095c\u0001\u0000\u0000\u0000\u095f\u0960\u0005T\u0000\u0000\u0960"+
		"\u0961\u0005\u0183\u0000\u0000\u0961\u097b\u0005\u0463\u0000\u0000\u0962"+
		"\u0963\u0005T\u0000\u0000\u0963\u0964\u0005z\u0000\u0000\u0964\u0968\u0005"+
		"\u0463\u0000\u0000\u0965\u0966\u0005\u0018\u0000\u0000\u0966\u0967\u0005"+
		"\u0093\u0000\u0000\u0967\u0969\u0003\u00d6k\u0000\u0968\u0965\u0001\u0000"+
		"\u0000\u0000\u0968\u0969\u0001\u0000\u0000\u0000\u0969\u0970\u0001\u0000"+
		"\u0000\u0000\u096a\u096c\u0007%\u0000\u0000\u096b\u096d\u0003\u0094J\u0000"+
		"\u096c\u096b\u0001\u0000\u0000\u0000\u096d\u096e\u0001\u0000\u0000\u0000"+
		"\u096e\u096c\u0001\u0000\u0000\u0000\u096e\u096f\u0001\u0000\u0000\u0000"+
		"\u096f\u0971\u0001\u0000\u0000\u0000\u0970\u096a\u0001\u0000\u0000\u0000"+
		"\u0970\u0971\u0001\u0000\u0000\u0000\u0971\u0978\u0001\u0000\u0000\u0000"+
		"\u0972\u0974\u0005a\u0000\u0000\u0973\u0975\u0003\u0096K\u0000\u0974\u0973"+
		"\u0001\u0000\u0000\u0000\u0975\u0976\u0001\u0000\u0000\u0000\u0976\u0974"+
		"\u0001\u0000\u0000\u0000\u0976\u0977\u0001\u0000\u0000\u0000\u0977\u0979"+
		"\u0001\u0000\u0000\u0000\u0978\u0972\u0001\u0000\u0000\u0000\u0978\u0979"+
		"\u0001\u0000\u0000\u0000\u0979\u097b\u0001\u0000\u0000\u0000\u097a\u0956"+
		"\u0001\u0000\u0000\u0000\u097a\u095f\u0001\u0000\u0000\u0000\u097a\u0962"+
		"\u0001\u0000\u0000\u0000\u097b\u0093\u0001\u0000\u0000\u0000\u097c\u097d"+
		"\u0005\u00a4\u0000\u0000\u097d\u097e\u0005\u0012\u0000\u0000\u097e\u0989"+
		"\u0005\u0463\u0000\u0000\u097f\u0981\u0005t\u0000\u0000\u0980\u097f\u0001"+
		"\u0000\u0000\u0000\u0980\u0981\u0001\u0000\u0000\u0000\u0981\u0982\u0001"+
		"\u0000\u0000\u0000\u0982\u0983\u00056\u0000\u0000\u0983\u0984\u0005\u0012"+
		"\u0000\u0000\u0984\u0989\u0005\u0463\u0000\u0000\u0985\u0986\u00057\u0000"+
		"\u0000\u0986\u0987\u0005\u0012\u0000\u0000\u0987\u0989\u0005\u0463\u0000"+
		"\u0000\u0988\u097c\u0001\u0000\u0000\u0000\u0988\u0980\u0001\u0000\u0000"+
		"\u0000\u0988\u0985\u0001\u0000\u0000\u0000\u0989\u0095\u0001\u0000\u0000"+
		"\u0000\u098a\u098b\u0005\u00a1\u0000\u0000\u098b\u098c\u0005\u0012\u0000"+
		"\u0000\u098c\u0991\u0005\u0463\u0000\u0000\u098d\u098e\u0005\u00a4\u0000"+
		"\u0000\u098e\u098f\u0005\u0012\u0000\u0000\u098f\u0991\u0005\u0463\u0000"+
		"\u0000\u0990\u098a\u0001\u0000\u0000\u0000\u0990\u098d\u0001\u0000\u0000"+
		"\u0000\u0991\u0097\u0001\u0000\u0000\u0000\u0992\u0993\u0005A\u0000\u0000"+
		"\u0993\u0995\u0003t:\u0000\u0994\u0992\u0001\u0000\u0000\u0000\u0994\u0995"+
		"\u0001\u0000\u0000\u0000\u0995\u0998\u0001\u0000\u0000\u0000\u0996\u0997"+
		"\u0005\u00b5\u0000\u0000\u0997\u0999\u0003\u0138\u009c\u0000\u0998\u0996"+
		"\u0001\u0000\u0000\u0000\u0998\u0999\u0001\u0000\u0000\u0000\u0999\u0099"+
		"\u0001\u0000\u0000\u0000\u099a\u099b\u0005F\u0000\u0000\u099b\u099c\u0005"+
		"\u0012\u0000\u0000\u099c\u09a1\u0003\u00a0P\u0000\u099d\u099e\u0005\u0456"+
		"\u0000\u0000\u099e\u09a0\u0003\u00a0P\u0000\u099f\u099d\u0001\u0000\u0000"+
		"\u0000\u09a0\u09a3\u0001\u0000\u0000\u0000\u09a1\u099f\u0001\u0000\u0000"+
		"\u0000\u09a1\u09a2\u0001\u0000\u0000\u0000\u09a2\u09a6\u0001\u0000\u0000"+
		"\u0000\u09a3\u09a1\u0001\u0000\u0000\u0000\u09a4\u09a5\u0005\u00b7\u0000"+
		"\u0000\u09a5\u09a7\u0005\u023b\u0000\u0000\u09a6\u09a4\u0001\u0000\u0000"+
		"\u0000\u09a6\u09a7\u0001\u0000\u0000\u0000\u09a7\u009b\u0001\u0000\u0000"+
		"\u0000\u09a8\u09a9\u0005G\u0000\u0000\u09a9\u09aa\u0003\u0138\u009c\u0000"+
		"\u09aa\u009d\u0001\u0000\u0000\u0000\u09ab\u09ac\u0005\u0288\u0000\u0000"+
		"\u09ac\u09ad\u0003\u0122\u0091\u0000\u09ad\u09ae\u0005\f\u0000\u0000\u09ae"+
		"\u09af\u0005\u0454\u0000\u0000\u09af\u09b0\u0003\u0120\u0090\u0000\u09b0"+
		"\u09ba\u0005\u0455\u0000\u0000\u09b1\u09b2\u0005\u0456\u0000\u0000\u09b2"+
		"\u09b3\u0003\u0122\u0091\u0000\u09b3\u09b4\u0005\f\u0000\u0000\u09b4\u09b5"+
		"\u0005\u0454\u0000\u0000\u09b5\u09b6\u0003\u0120\u0090\u0000\u09b6\u09b7"+
		"\u0005\u0455\u0000\u0000\u09b7\u09b9\u0001\u0000\u0000\u0000\u09b8\u09b1"+
		"\u0001\u0000\u0000\u0000\u09b9\u09bc\u0001\u0000\u0000\u0000\u09ba\u09b8"+
		"\u0001\u0000\u0000\u0000\u09ba\u09bb\u0001\u0000\u0000\u0000\u09bb\u009f"+
		"\u0001\u0000\u0000\u0000\u09bc\u09ba\u0001\u0000\u0000\u0000\u09bd\u09bf"+
		"\u0003\u0138\u009c\u0000\u09be\u09c0\u0007\u001f\u0000\u0000\u09bf\u09be"+
		"\u0001\u0000\u0000\u0000\u09bf\u09c0\u0001\u0000\u0000\u0000\u09c0\u00a1"+
		"\u0001\u0000\u0000\u0000\u09c1\u09cc\u0005_\u0000\u0000\u09c2\u09c3\u0003"+
		"\u00a4R\u0000\u09c3\u09c4\u0005\u0456\u0000\u0000\u09c4\u09c6\u0001\u0000"+
		"\u0000\u0000\u09c5\u09c2\u0001\u0000\u0000\u0000\u09c5\u09c6\u0001\u0000"+
		"\u0000\u0000\u09c6\u09c7\u0001\u0000\u0000\u0000\u09c7\u09cd\u0003\u00a4"+
		"R\u0000\u09c8\u09c9\u0003\u00a4R\u0000\u09c9\u09ca\u0005\u01fe\u0000\u0000"+
		"\u09ca\u09cb\u0003\u00a4R\u0000\u09cb\u09cd\u0001\u0000\u0000\u0000\u09cc"+
		"\u09c5\u0001\u0000\u0000\u0000\u09cc\u09c8\u0001\u0000\u0000\u0000\u09cd"+
		"\u00a3\u0001\u0000\u0000\u0000\u09ce\u09d2\u0003\u00e2q\u0000\u09cf\u09d2"+
		"\u0003\u00d4j\u0000\u09d0\u09d2\u0003\u00deo\u0000\u09d1\u09ce\u0001\u0000"+
		"\u0000\u0000\u09d1\u09cf\u0001\u0000\u0000\u0000\u09d1\u09d0\u0001\u0000"+
		"\u0000\u0000\u09d2\u00a5\u0001\u0000\u0000\u0000\u09d3\u09d6\u0003\u00a8"+
		"T\u0000\u09d4\u09d6\u0003\u0004\u0002\u0000\u09d5\u09d3\u0001\u0000\u0000"+
		"\u0000\u09d5\u09d4\u0001\u0000\u0000\u0000\u09d6\u00a7\u0001\u0000\u0000"+
		"\u0000\u09d7\u09d8\u0003\u00dcn\u0000\u09d8\u09d9\u0005\u045f\u0000\u0000"+
		"\u09d9\u09db\u0001\u0000\u0000\u0000\u09da\u09d7\u0001\u0000\u0000\u0000"+
		"\u09da\u09db\u0001\u0000\u0000\u0000\u09db\u09dc\u0001\u0000\u0000\u0000"+
		"\u09dc\u0a03\u0005\u014c\u0000\u0000\u09dd\u09de\u0003\u00bc^\u0000\u09de"+
		"\u09df\u0005\u0457\u0000\u0000\u09df\u09e1\u0001\u0000\u0000\u0000\u09e0"+
		"\u09dd\u0001\u0000\u0000\u0000\u09e1\u09e4\u0001\u0000\u0000\u0000\u09e2"+
		"\u09e0\u0001\u0000\u0000\u0000\u09e2\u09e3\u0001\u0000\u0000\u0000\u09e3"+
		"\u09ea\u0001\u0000\u0000\u0000\u09e4\u09e2\u0001\u0000\u0000\u0000\u09e5"+
		"\u09e6\u0003\u00be_\u0000\u09e6\u09e7\u0005\u0457\u0000\u0000\u09e7\u09e9"+
		"\u0001\u0000\u0000\u0000\u09e8\u09e5\u0001\u0000\u0000\u0000\u09e9\u09ec"+
		"\u0001\u0000\u0000\u0000\u09ea\u09e8\u0001\u0000\u0000\u0000\u09ea\u09eb"+
		"\u0001\u0000\u0000\u0000\u09eb\u09f2\u0001\u0000\u0000\u0000\u09ec\u09ea"+
		"\u0001\u0000\u0000\u0000\u09ed\u09ee\u0003\u00c0`\u0000\u09ee\u09ef\u0005"+
		"\u0457\u0000\u0000\u09ef\u09f1\u0001\u0000\u0000\u0000\u09f0\u09ed\u0001"+
		"\u0000\u0000\u0000\u09f1\u09f4\u0001\u0000\u0000\u0000\u09f2\u09f0\u0001"+
		"\u0000\u0000\u0000\u09f2\u09f3\u0001\u0000\u0000\u0000\u09f3\u09fa\u0001"+
		"\u0000\u0000\u0000\u09f4\u09f2\u0001\u0000\u0000\u0000\u09f5\u09f6\u0003"+
		"\u00c2a\u0000\u09f6\u09f7\u0005\u0457\u0000\u0000\u09f7\u09f9\u0001\u0000"+
		"\u0000\u0000\u09f8\u09f5\u0001\u0000\u0000\u0000\u09f9\u09fc\u0001\u0000"+
		"\u0000\u0000\u09fa\u09f8\u0001\u0000\u0000\u0000\u09fa\u09fb\u0001\u0000"+
		"\u0000\u0000\u09fb\u0a00\u0001\u0000\u0000\u0000\u09fc\u09fa\u0001\u0000"+
		"\u0000\u0000\u09fd\u09ff\u0003\u00c6c\u0000\u09fe\u09fd\u0001\u0000\u0000"+
		"\u0000\u09ff\u0a02\u0001\u0000\u0000\u0000\u0a00\u09fe\u0001\u0000\u0000"+
		"\u0000\u0a00\u0a01\u0001\u0000\u0000\u0000\u0a01\u0a04\u0001\u0000\u0000"+
		"\u0000\u0a02\u0a00\u0001\u0000\u0000\u0000\u0a03\u09e2\u0001\u0000\u0000"+
		"\u0000\u0a03\u0a04\u0001\u0000\u0000\u0000\u0a04\u0a05\u0001\u0000\u0000"+
		"\u0000\u0a05\u0a07\u0005\u0188\u0000\u0000\u0a06\u0a08\u0003\u00dcn\u0000"+
		"\u0a07\u0a06\u0001\u0000\u0000\u0000\u0a07\u0a08\u0001\u0000\u0000\u0000"+
		"\u0a08\u00a9\u0001\u0000\u0000\u0000\u0a09\u0a0c\u0005\u0015\u0000\u0000"+
		"\u0a0a\u0a0d\u0003\u00dcn\u0000\u0a0b\u0a0d\u0003\u0138\u009c\u0000\u0a0c"+
		"\u0a0a\u0001\u0000\u0000\u0000\u0a0c\u0a0b\u0001\u0000\u0000\u0000\u0a0c"+
		"\u0a0d\u0001\u0000\u0000\u0000\u0a0d\u0a0f\u0001\u0000\u0000\u0000\u0a0e"+
		"\u0a10\u0003\u00c8d\u0000\u0a0f\u0a0e\u0001\u0000\u0000\u0000\u0a10\u0a11"+
		"\u0001\u0000\u0000\u0000\u0a11\u0a0f\u0001\u0000\u0000\u0000\u0a11\u0a12"+
		"\u0001\u0000\u0000\u0000\u0a12\u0a19\u0001\u0000\u0000\u0000\u0a13\u0a15"+
		"\u00053\u0000\u0000\u0a14\u0a16\u0003\u00c6c\u0000\u0a15\u0a14\u0001\u0000"+
		"\u0000\u0000\u0a16\u0a17\u0001\u0000\u0000\u0000\u0a17\u0a15\u0001\u0000"+
		"\u0000\u0000\u0a17\u0a18\u0001\u0000\u0000\u0000\u0a18\u0a1a\u0001\u0000"+
		"\u0000\u0000\u0a19\u0a13\u0001\u0000\u0000\u0000\u0a19\u0a1a\u0001\u0000"+
		"\u0000\u0000\u0a1a\u0a1b\u0001\u0000\u0000\u0000\u0a1b\u0a1c\u0005\u0188"+
		"\u0000\u0000\u0a1c\u0a1d\u0005\u0015\u0000\u0000\u0a1d\u00ab\u0001\u0000"+
		"\u0000\u0000\u0a1e\u0a1f\u0005J\u0000\u0000\u0a1f\u0a20\u0003\u0138\u009c"+
		"\u0000\u0a20\u0a22\u0005\u00a5\u0000\u0000\u0a21\u0a23\u0003\u00c6c\u0000"+
		"\u0a22\u0a21\u0001\u0000\u0000\u0000\u0a23\u0a24\u0001\u0000\u0000\u0000"+
		"\u0a24\u0a22\u0001\u0000\u0000\u0000\u0a24\u0a25\u0001\u0000\u0000\u0000"+
		"\u0a25\u0a29\u0001\u0000\u0000\u0000\u0a26\u0a28\u0003\u00cae\u0000\u0a27"+
		"\u0a26\u0001\u0000\u0000\u0000\u0a28\u0a2b\u0001\u0000\u0000\u0000\u0a29"+
		"\u0a27\u0001\u0000\u0000\u0000\u0a29\u0a2a\u0001\u0000\u0000\u0000\u0a2a"+
		"\u0a32\u0001\u0000\u0000\u0000\u0a2b\u0a29\u0001\u0000\u0000\u0000\u0a2c"+
		"\u0a2e\u00053\u0000\u0000\u0a2d\u0a2f\u0003\u00c6c\u0000\u0a2e\u0a2d\u0001"+
		"\u0000\u0000\u0000\u0a2f\u0a30\u0001\u0000\u0000\u0000\u0a30\u0a2e\u0001"+
		"\u0000\u0000\u0000\u0a30\u0a31\u0001\u0000\u0000\u0000\u0a31\u0a33\u0001"+
		"\u0000\u0000\u0000\u0a32\u0a2c\u0001\u0000\u0000\u0000\u0a32\u0a33\u0001"+
		"\u0000\u0000\u0000\u0a33\u0a34\u0001\u0000\u0000\u0000\u0a34\u0a35\u0005"+
		"\u0188\u0000\u0000\u0a35\u0a36\u0005J\u0000\u0000\u0a36\u00ad\u0001\u0000"+
		"\u0000\u0000\u0a37\u0a38\u0005V\u0000\u0000\u0a38\u0a39\u0003\u00dcn\u0000"+
		"\u0a39\u00af\u0001\u0000\u0000\u0000\u0a3a\u0a3b\u0005\\\u0000\u0000\u0a3b"+
		"\u0a3c\u0003\u00dcn\u0000\u0a3c\u00b1\u0001\u0000\u0000\u0000\u0a3d\u0a3e"+
		"\u0003\u00dcn\u0000\u0a3e\u0a3f\u0005\u045f\u0000\u0000\u0a3f\u0a41\u0001"+
		"\u0000\u0000\u0000\u0a40\u0a3d\u0001\u0000\u0000\u0000\u0a40\u0a41\u0001"+
		"\u0000\u0000\u0000\u0a41\u0a42\u0001\u0000\u0000\u0000\u0a42\u0a44\u0005"+
		"d\u0000\u0000\u0a43\u0a45\u0003\u00c6c\u0000\u0a44\u0a43\u0001\u0000\u0000"+
		"\u0000\u0a45\u0a46\u0001\u0000\u0000\u0000\u0a46\u0a44\u0001\u0000\u0000"+
		"\u0000\u0a46\u0a47\u0001\u0000\u0000\u0000\u0a47\u0a48\u0001\u0000\u0000"+
		"\u0000\u0a48\u0a49\u0005\u0188\u0000\u0000\u0a49\u0a4b\u0005d\u0000\u0000"+
		"\u0a4a\u0a4c\u0003\u00dcn\u0000\u0a4b\u0a4a\u0001\u0000\u0000\u0000\u0a4b"+
		"\u0a4c\u0001\u0000\u0000\u0000\u0a4c\u00b3\u0001\u0000\u0000\u0000\u0a4d"+
		"\u0a4e\u0003\u00dcn\u0000\u0a4e\u0a4f\u0005\u045f\u0000\u0000\u0a4f\u0a51"+
		"\u0001\u0000\u0000\u0000\u0a50\u0a4d\u0001\u0000\u0000\u0000\u0a50\u0a51"+
		"\u0001\u0000\u0000\u0000\u0a51\u0a52\u0001\u0000\u0000\u0000\u0a52\u0a54"+
		"\u0005\u0086\u0000\u0000\u0a53\u0a55\u0003\u00c6c\u0000\u0a54\u0a53\u0001"+
		"\u0000\u0000\u0000\u0a55\u0a56\u0001\u0000\u0000\u0000\u0a56\u0a54\u0001"+
		"\u0000\u0000\u0000\u0a56\u0a57\u0001\u0000\u0000\u0000\u0a57\u0a58\u0001"+
		"\u0000\u0000\u0000\u0a58\u0a59\u0005\u027b\u0000\u0000\u0a59\u0a5a\u0003"+
		"\u0138\u009c\u0000\u0a5a\u0a5b\u0005\u0188\u0000\u0000\u0a5b\u0a5d\u0005"+
		"\u0086\u0000\u0000\u0a5c\u0a5e\u0003\u00dcn\u0000\u0a5d\u0a5c\u0001\u0000"+
		"\u0000\u0000\u0a5d\u0a5e\u0001\u0000\u0000\u0000\u0a5e\u00b5\u0001\u0000"+
		"\u0000\u0000\u0a5f\u0a60\u0005\u008c\u0000\u0000\u0a60\u0a61\u0003\u0138"+
		"\u009c\u0000\u0a61\u00b7\u0001\u0000\u0000\u0000\u0a62\u0a63\u0003\u00dc"+
		"n\u0000\u0a63\u0a64\u0005\u045f\u0000\u0000\u0a64\u0a66\u0001\u0000\u0000"+
		"\u0000\u0a65\u0a62\u0001\u0000\u0000\u0000\u0a65\u0a66\u0001\u0000\u0000"+
		"\u0000\u0a66\u0a67\u0001\u0000\u0000\u0000\u0a67\u0a68\u0005\u00b6\u0000"+
		"\u0000\u0a68\u0a69\u0003\u0138\u009c\u0000\u0a69\u0a6b\u0005\u0182\u0000"+
		"\u0000\u0a6a\u0a6c\u0003\u00c6c\u0000\u0a6b\u0a6a\u0001\u0000\u0000\u0000"+
		"\u0a6c\u0a6d\u0001\u0000\u0000\u0000\u0a6d\u0a6b\u0001\u0000\u0000\u0000"+
		"\u0a6d\u0a6e\u0001\u0000\u0000\u0000\u0a6e\u0a6f\u0001\u0000\u0000\u0000"+
		"\u0a6f\u0a70\u0005\u0188\u0000\u0000\u0a70\u0a72\u0005\u00b6\u0000\u0000"+
		"\u0a71\u0a73\u0003\u00dcn\u0000\u0a72\u0a71\u0001\u0000\u0000\u0000\u0a72"+
		"\u0a73\u0001\u0000\u0000\u0000\u0a73\u00b9\u0001\u0000\u0000\u0000\u0a74"+
		"\u0a75\u0005\u015d\u0000\u0000\u0a75\u0a84\u0003\u00dcn\u0000\u0a76\u0a7b"+
		"\u0005=\u0000\u0000\u0a77\u0a79\u0005\u01f6\u0000\u0000\u0a78\u0a77\u0001"+
		"\u0000\u0000\u0000\u0a78\u0a79\u0001\u0000\u0000\u0000\u0a79\u0a7a\u0001"+
		"\u0000\u0000\u0000\u0a7a\u0a7c\u0005A\u0000\u0000\u0a7b\u0a78\u0001\u0000"+
		"\u0000\u0000\u0a7b\u0a7c\u0001\u0000\u0000\u0000\u0a7c\u0a7d\u0001\u0000"+
		"\u0000\u0000\u0a7d\u0a7e\u0003\u00dcn\u0000\u0a7e\u0a7f\u0005T\u0000\u0000"+
		"\u0a7f\u0a80\u0003\u00fc~\u0000\u0a80\u0a84\u0001\u0000\u0000\u0000\u0a81"+
		"\u0a82\u0005\u0205\u0000\u0000\u0a82\u0a84\u0003\u00dcn\u0000\u0a83\u0a74"+
		"\u0001\u0000\u0000\u0000\u0a83\u0a76\u0001\u0000\u0000\u0000\u0a83\u0a81"+
		"\u0001\u0000\u0000\u0000\u0a84\u00bb\u0001\u0000\u0000\u0000\u0a85\u0a86"+
		"\u0005\'\u0000\u0000\u0a86\u0a87\u0003\u00fc~\u0000\u0a87\u0a8a\u0003"+
		"\u00f0x\u0000\u0a88\u0a89\u0005(\u0000\u0000\u0a89\u0a8b\u0003\u0138\u009c"+
		"\u0000\u0a8a\u0a88\u0001\u0000\u0000\u0000\u0a8a\u0a8b\u0001\u0000\u0000"+
		"\u0000\u0a8b\u00bd\u0001\u0000\u0000\u0000\u0a8c\u0a8d\u0005\'\u0000\u0000"+
		"\u0a8d\u0a8e\u0003\u00dcn\u0000\u0a8e\u0a8f\u0005\u001c\u0000\u0000\u0a8f"+
		"\u0a96\u0005>\u0000\u0000\u0a90\u0a97\u0003\u00e2q\u0000\u0a91\u0a93\u0005"+
		"\u009a\u0000\u0000\u0a92\u0a94\u0005\u0281\u0000\u0000\u0a93\u0a92\u0001"+
		"\u0000\u0000\u0000\u0a93\u0a94\u0001\u0000\u0000\u0000\u0a94\u0a95\u0001"+
		"\u0000\u0000\u0000\u0a95\u0a97\u0005\u0463\u0000\u0000\u0a96\u0a90\u0001"+
		"\u0000\u0000\u0000\u0a96\u0a91\u0001\u0000\u0000\u0000\u0a97\u00bf\u0001"+
		"\u0000\u0000\u0000\u0a98\u0a99\u0005\'\u0000\u0000\u0a99\u0a9a\u0003\u00dc"+
		"n\u0000\u0a9a\u0a9b\u0005$\u0000\u0000\u0a9b\u0a9c\u0005>\u0000\u0000"+
		"\u0a9c\u0a9d\u0003\\.\u0000\u0a9d\u00c1\u0001\u0000\u0000\u0000\u0a9e"+
		"\u0a9f\u0005\'\u0000\u0000\u0a9f\u0aa0\u0007&\u0000\u0000\u0aa0\u0aa1"+
		"\u0005\u01aa\u0000\u0000\u0aa1\u0aa2\u0005>\u0000\u0000\u0aa2\u0aa7\u0003"+
		"\u00c4b\u0000\u0aa3\u0aa4\u0005\u0456\u0000\u0000\u0aa4\u0aa6\u0003\u00c4"+
		"b\u0000\u0aa5\u0aa3\u0001\u0000\u0000\u0000\u0aa6\u0aa9\u0001\u0000\u0000"+
		"\u0000\u0aa7\u0aa5\u0001\u0000\u0000\u0000\u0aa7\u0aa8\u0001\u0000\u0000"+
		"\u0000\u0aa8\u0aaa\u0001\u0000\u0000\u0000\u0aa9\u0aa7\u0001\u0000\u0000"+
		"\u0000\u0aaa\u0aab\u0003\u00a6S\u0000\u0aab\u00c3\u0001\u0000\u0000\u0000"+
		"\u0aac\u0ab8\u0003\u00e2q\u0000\u0aad\u0aaf\u0005\u009a\u0000\u0000\u0aae"+
		"\u0ab0\u0005\u0281\u0000\u0000\u0aaf\u0aae\u0001\u0000\u0000\u0000\u0aaf"+
		"\u0ab0\u0001\u0000\u0000\u0000\u0ab0\u0ab1\u0001\u0000\u0000\u0000\u0ab1"+
		"\u0ab8\u0005\u0463\u0000\u0000\u0ab2\u0ab8\u0003\u00dcn\u0000\u0ab3\u0ab8"+
		"\u0005\u009b\u0000\u0000\u0ab4\u0ab5\u0005l\u0000\u0000\u0ab5\u0ab8\u0005"+
		"\u01a3\u0000\u0000\u0ab6\u0ab8\u0005\u0099\u0000\u0000\u0ab7\u0aac\u0001"+
		"\u0000\u0000\u0000\u0ab7\u0aad\u0001\u0000\u0000\u0000\u0ab7\u0ab2\u0001"+
		"\u0000\u0000\u0000\u0ab7\u0ab3\u0001\u0000\u0000\u0000\u0ab7\u0ab4\u0001"+
		"\u0000\u0000\u0000\u0ab7\u0ab6\u0001\u0000\u0000\u0000\u0ab8\u00c5\u0001"+
		"\u0000\u0000\u0000\u0ab9\u0abc\u0003\f\u0006\u0000\u0aba\u0abc\u0003\u0004"+
		"\u0002\u0000\u0abb\u0ab9\u0001\u0000\u0000\u0000\u0abb\u0aba\u0001\u0000"+
		"\u0000\u0000\u0abc\u0abd\u0001\u0000\u0000\u0000\u0abd\u0abe\u0005\u0457"+
		"\u0000\u0000\u0abe\u00c7\u0001\u0000\u0000\u0000\u0abf\u0ac2\u0005\u00b4"+
		"\u0000\u0000\u0ac0\u0ac3\u0003\u00eew\u0000\u0ac1\u0ac3\u0003\u0138\u009c"+
		"\u0000\u0ac2\u0ac0\u0001\u0000\u0000\u0000\u0ac2\u0ac1\u0001\u0000\u0000"+
		"\u0000\u0ac3\u0ac4\u0001\u0000\u0000\u0000\u0ac4\u0ac6\u0005\u00a5\u0000"+
		"\u0000\u0ac5\u0ac7\u0003\u00c6c\u0000\u0ac6\u0ac5\u0001\u0000\u0000\u0000"+
		"\u0ac7\u0ac8\u0001\u0000\u0000\u0000\u0ac8\u0ac6\u0001\u0000\u0000\u0000"+
		"\u0ac8\u0ac9\u0001\u0000\u0000\u0000\u0ac9\u00c9\u0001\u0000\u0000\u0000"+
		"\u0aca\u0acb\u00054\u0000\u0000\u0acb\u0acc\u0003\u0138\u009c\u0000\u0acc"+
		"\u0ace\u0005\u00a5\u0000\u0000\u0acd\u0acf\u0003\u00c6c\u0000\u0ace\u0acd"+
		"\u0001\u0000\u0000\u0000\u0acf\u0ad0\u0001\u0000\u0000\u0000\u0ad0\u0ace"+
		"\u0001\u0000\u0000\u0000\u0ad0\u0ad1\u0001\u0000\u0000\u0000\u0ad1\u00cb"+
		"\u0001\u0000\u0000\u0000\u0ad2\u0ad6\u0003\u00dcn\u0000\u0ad3\u0ad7\u0005"+
		"\u046a\u0000\u0000\u0ad4\u0ad5\u0005\u0453\u0000\u0000\u0ad5\u0ad7\u0003"+
		"\u00dcn\u0000\u0ad6\u0ad3\u0001\u0000\u0000\u0000\u0ad6\u0ad4\u0001\u0000"+
		"\u0000\u0000\u0ad6\u0ad7\u0001\u0000\u0000\u0000\u0ad7\u00cd\u0001\u0000"+
		"\u0000\u0000\u0ad8\u0ad9\u0003\u00ccf\u0000\u0ad9\u00cf\u0001\u0000\u0000"+
		"\u0000\u0ada\u0adf\u0003\u00dcn\u0000\u0adb\u0add\u0003\u00e0p\u0000\u0adc"+
		"\u0ade\u0003\u00e0p\u0000\u0add\u0adc\u0001\u0000\u0000\u0000\u0add\u0ade"+
		"\u0001\u0000\u0000\u0000\u0ade\u0ae0\u0001\u0000\u0000\u0000\u0adf\u0adb"+
		"\u0001\u0000\u0000\u0000\u0adf\u0ae0\u0001\u0000\u0000\u0000\u0ae0\u0ae7"+
		"\u0001\u0000\u0000\u0000\u0ae1\u0ae2\t\u0000\u0000\u0000\u0ae2\u0ae4\u0003"+
		"\u00e0p\u0000\u0ae3\u0ae5\u0003\u00e0p\u0000\u0ae4\u0ae3\u0001\u0000\u0000"+
		"\u0000\u0ae4\u0ae5\u0001\u0000\u0000\u0000\u0ae5\u0ae7\u0001\u0000\u0000"+
		"\u0000\u0ae6\u0ada\u0001\u0000\u0000\u0000\u0ae6\u0ae1\u0001\u0000\u0000"+
		"\u0000\u0ae7\u00d1\u0001\u0000\u0000\u0000\u0ae8\u0aeb\u0003\u00dcn\u0000"+
		"\u0ae9\u0aeb\u0005\u0463\u0000\u0000\u0aea\u0ae8\u0001\u0000\u0000\u0000"+
		"\u0aea\u0ae9\u0001\u0000\u0000\u0000\u0aeb\u0af0\u0001\u0000\u0000\u0000"+
		"\u0aec\u0aed\u0005\u0454\u0000\u0000\u0aed\u0aee\u0003\u00e2q\u0000\u0aee"+
		"\u0aef\u0005\u0455\u0000\u0000\u0aef\u0af1\u0001\u0000\u0000\u0000\u0af0"+
		"\u0aec\u0001\u0000\u0000\u0000\u0af0\u0af1\u0001\u0000\u0000\u0000\u0af1"+
		"\u0af4\u0001\u0000\u0000\u0000\u0af2\u0af4\u0003\u0138\u009c\u0000\u0af3"+
		"\u0aea\u0001\u0000\u0000\u0000\u0af3\u0af2\u0001\u0000\u0000\u0000\u0af4"+
		"\u0af6\u0001\u0000\u0000\u0000\u0af5\u0af7\u0007\u001f\u0000\u0000\u0af6"+
		"\u0af5\u0001\u0000\u0000\u0000\u0af6\u0af7\u0001\u0000\u0000\u0000\u0af7"+
		"\u00d3\u0001\u0000\u0000\u0000\u0af8\u0af9\u0007\'\u0000\u0000\u0af9\u00d5"+
		"\u0001\u0000\u0000\u0000\u0afa\u0aff\u0005\u00d9\u0000\u0000\u0afb\u0aff"+
		"\u0003\u014a\u00a5\u0000\u0afc\u0aff\u0005\u0463\u0000\u0000\u0afd\u0aff"+
		"\u0005\u0460\u0000\u0000\u0afe\u0afa\u0001\u0000\u0000\u0000\u0afe\u0afb"+
		"\u0001\u0000\u0000\u0000\u0afe\u0afc\u0001\u0000\u0000\u0000\u0afe\u0afd"+
		"\u0001\u0000\u0000\u0000\u0aff\u00d7\u0001\u0000\u0000\u0000\u0b00\u0b03"+
		"\u0003\u00dcn\u0000\u0b01\u0b03\u0005\u0463\u0000\u0000\u0b02\u0b00\u0001"+
		"\u0000\u0000\u0000\u0b02\u0b01\u0001\u0000\u0000\u0000\u0b03\u00d9\u0001"+
		"\u0000\u0000\u0000\u0b04\u0b05\u0007(\u0000\u0000\u0b05\u00db\u0001\u0000"+
		"\u0000\u0000\u0b06\u0b0a\u0003\u00deo\u0000\u0b07\u0b0a\u0005\u046c\u0000"+
		"\u0000\u0b08\u0b0a\u0005\u0460\u0000\u0000\u0b09\u0b06\u0001\u0000\u0000"+
		"\u0000\u0b09\u0b07\u0001\u0000\u0000\u0000\u0b09\u0b08\u0001\u0000\u0000"+
		"\u0000\u0b0a\u00dd\u0001\u0000\u0000\u0000\u0b0b\u0b15\u0005\u046b\u0000"+
		"\u0000\u0b0c\u0b15\u0003\u014a\u00a5\u0000\u0b0d\u0b15\u0003\u014c\u00a6"+
		"\u0000\u0b0e\u0b15\u0003\u00dam\u0000\u0b0f\u0b15\u0003\u014e\u00a7\u0000"+
		"\u0b10\u0b15\u0003\u0150\u00a8\u0000\u0b11\u0b15\u0003\u0152\u00a9\u0000"+
		"\u0b12\u0b15\u0003\u0154\u00aa\u0000\u0b13\u0b15\u0003\u0156\u00ab\u0000"+
		"\u0b14\u0b0b\u0001\u0000\u0000\u0000\u0b14\u0b0c\u0001\u0000\u0000\u0000"+
		"\u0b14\u0b0d\u0001\u0000\u0000\u0000\u0b14\u0b0e\u0001\u0000\u0000\u0000"+
		"\u0b14\u0b0f\u0001\u0000\u0000\u0000\u0b14\u0b10\u0001\u0000\u0000\u0000"+
		"\u0b14\u0b11\u0001\u0000\u0000\u0000\u0b14\u0b12\u0001\u0000\u0000\u0000"+
		"\u0b14\u0b13\u0001\u0000\u0000\u0000\u0b15\u00df\u0001\u0000\u0000\u0000"+
		"\u0b16\u0b1a\u0005\u046a\u0000\u0000\u0b17\u0b18\u0005\u0453\u0000\u0000"+
		"\u0b18\u0b1a\u0003\u00dcn\u0000\u0b19\u0b16\u0001\u0000\u0000\u0000\u0b19"+
		"\u0b17\u0001\u0000\u0000\u0000\u0b1a\u00e1\u0001\u0000\u0000\u0000\u0b1b"+
		"\u0b1c\u0007)\u0000\u0000\u0b1c\u00e3\u0001\u0000\u0000\u0000\u0b1d\u0b20"+
		"\u0005\u0461\u0000\u0000\u0b1e\u0b20\u0003\u00e2q\u0000\u0b1f\u0b1d\u0001"+
		"\u0000\u0000\u0000\u0b1f\u0b1e\u0001\u0000\u0000\u0000\u0b20\u00e5\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b23\u0005\u0469\u0000\u0000\u0b22\u0b21\u0001"+
		"\u0000\u0000\u0000\u0b22\u0b23\u0001\u0000\u0000\u0000\u0b23\u0b24\u0001"+
		"\u0000\u0000\u0000\u0b24\u0b27\u0005\u0463\u0000\u0000\u0b25\u0b27\u0005"+
		"\u0462\u0000\u0000\u0b26\u0b22\u0001\u0000\u0000\u0000\u0b26\u0b25\u0001"+
		"\u0000\u0000\u0000\u0b27\u0b29\u0001\u0000\u0000\u0000\u0b28\u0b2a\u0005"+
		"\u0463\u0000\u0000\u0b29\u0b28\u0001\u0000\u0000\u0000\u0b2a\u0b2b\u0001"+
		"\u0000\u0000\u0000\u0b2b\u0b29\u0001\u0000\u0000\u0000\u0b2b\u0b2c\u0001"+
		"\u0000\u0000\u0000\u0b2c\u0b39\u0001\u0000\u0000\u0000\u0b2d\u0b2f\u0005"+
		"\u0469\u0000\u0000\u0b2e\u0b2d\u0001\u0000\u0000\u0000\u0b2e\u0b2f\u0001"+
		"\u0000\u0000\u0000\u0b2f\u0b30\u0001\u0000\u0000\u0000\u0b30\u0b33\u0005"+
		"\u0463\u0000\u0000\u0b31\u0b33\u0005\u0462\u0000\u0000\u0b32\u0b2e\u0001"+
		"\u0000\u0000\u0000\u0b32\u0b31\u0001\u0000\u0000\u0000\u0b33\u0b36\u0001"+
		"\u0000\u0000\u0000\u0b34\u0b35\u0005\u001a\u0000\u0000\u0b35\u0b37\u0003"+
		"\u00d8l\u0000\u0b36\u0b34\u0001\u0000\u0000\u0000\u0b36\u0b37\u0001\u0000"+
		"\u0000\u0000\u0b37\u0b39\u0001\u0000\u0000\u0000\u0b38\u0b26\u0001\u0000"+
		"\u0000\u0000\u0b38\u0b32\u0001\u0000\u0000\u0000\u0b39\u00e7\u0001\u0000"+
		"\u0000\u0000\u0b3a\u0b3b\u0007*\u0000\u0000\u0b3b\u00e9\u0001\u0000\u0000"+
		"\u0000\u0b3c\u0b3e\u0005\u0469\u0000\u0000\u0b3d\u0b3c\u0001\u0000\u0000"+
		"\u0000\u0b3d\u0b3e\u0001\u0000\u0000\u0000\u0b3e\u0b3f\u0001\u0000\u0000"+
		"\u0000\u0b3f\u0b40\u0005\u0465\u0000\u0000\u0b40\u00eb\u0001\u0000\u0000"+
		"\u0000\u0b41\u0b43\u0005l\u0000\u0000\u0b42\u0b41\u0001\u0000\u0000\u0000"+
		"\u0b42\u0b43\u0001\u0000\u0000\u0000\u0b43\u0b44\u0001\u0000\u0000\u0000"+
		"\u0b44\u0b45\u0007+\u0000\u0000\u0b45\u00ed\u0001\u0000\u0000\u0000\u0b46"+
		"\u0b53\u0003\u00e6s\u0000\u0b47\u0b53\u0003\u00e2q\u0000\u0b48\u0b49\u0005"+
		"\u0448\u0000\u0000\u0b49\u0b53\u0003\u00e2q\u0000\u0b4a\u0b53\u0003\u00ea"+
		"u\u0000\u0b4b\u0b53\u0003\u00e8t\u0000\u0b4c\u0b53\u0005\u0466\u0000\u0000"+
		"\u0b4d\u0b53\u0005\u0468\u0000\u0000\u0b4e\u0b50\u0005l\u0000\u0000\u0b4f"+
		"\u0b4e\u0001\u0000\u0000\u0000\u0b4f\u0b50\u0001\u0000\u0000\u0000\u0b50"+
		"\u0b51\u0001\u0000\u0000\u0000\u0b51\u0b53\u0007+\u0000\u0000\u0b52\u0b46"+
		"\u0001\u0000\u0000\u0000\u0b52\u0b47\u0001\u0000\u0000\u0000\u0b52\u0b48"+
		"\u0001\u0000\u0000\u0000\u0b52\u0b4a\u0001\u0000\u0000\u0000\u0b52\u0b4b"+
		"\u0001\u0000\u0000\u0000\u0b52\u0b4c\u0001\u0000\u0000\u0000\u0b52\u0b4d"+
		"\u0001\u0000\u0000\u0000\u0b52\u0b4f\u0001\u0000\u0000\u0000\u0b53\u00ef"+
		"\u0001\u0000\u0000\u0000\u0b54\u0b56\u0007,\u0000\u0000\u0b55\u0b57\u0005"+
		"\u00e5\u0000\u0000\u0b56\u0b55\u0001\u0000\u0000\u0000\u0b56\u0b57\u0001"+
		"\u0000\u0000\u0000\u0b57\u0b59\u0001\u0000\u0000\u0000\u0b58\u0b5a\u0003"+
		"\u00f6{\u0000\u0b59\u0b58\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0001\u0000"+
		"\u0000\u0000\u0b5a\u0b5c\u0001\u0000\u0000\u0000\u0b5b\u0b5d\u0005\u00d9"+
		"\u0000\u0000\u0b5c\u0b5b\u0001\u0000\u0000\u0000\u0b5c\u0b5d\u0001\u0000"+
		"\u0000\u0000\u0b5d\u0b61\u0001\u0000\u0000\u0000\u0b5e\u0b5f\u0003\u0018"+
		"\f\u0000\u0b5f\u0b60\u0003\u00d6k\u0000\u0b60\u0b62\u0001\u0000\u0000"+
		"\u0000\u0b61\u0b5e\u0001\u0000\u0000\u0000\u0b61\u0b62\u0001\u0000\u0000"+
		"\u0000\u0b62\u0b66\u0001\u0000\u0000\u0000\u0b63\u0b64\u0005\u001a\u0000"+
		"\u0000\u0b64\u0b67\u0003\u00d8l\u0000\u0b65\u0b67\u0005\u00d9\u0000\u0000"+
		"\u0b66\u0b63\u0001\u0000\u0000\u0000\u0b66\u0b65\u0001\u0000\u0000\u0000"+
		"\u0b66\u0b67\u0001\u0000\u0000\u0000\u0b67\u0bcf\u0001\u0000\u0000\u0000"+
		"\u0b68\u0b69\u0005\u00d8\u0000\u0000\u0b69\u0b6b\u0007-\u0000\u0000\u0b6a"+
		"\u0b6c\u0003\u00f6{\u0000\u0b6b\u0b6a\u0001\u0000\u0000\u0000\u0b6b\u0b6c"+
		"\u0001\u0000\u0000\u0000\u0b6c\u0b6e\u0001\u0000\u0000\u0000\u0b6d\u0b6f"+
		"\u0005\u00d9\u0000\u0000\u0b6e\u0b6d\u0001\u0000\u0000\u0000\u0b6e\u0b6f"+
		"\u0001\u0000\u0000\u0000\u0b6f\u0bcf\u0001\u0000\u0000\u0000\u0b70\u0b71"+
		"\u0005\u01f4\u0000\u0000\u0b71\u0b73\u0005\u00d6\u0000\u0000\u0b72\u0b74"+
		"\u0003\u00f6{\u0000\u0b73\u0b72\u0001\u0000\u0000\u0000\u0b73\u0b74\u0001"+
		"\u0000\u0000\u0000\u0b74\u0b76\u0001\u0000\u0000\u0000\u0b75\u0b77\u0005"+
		"\u00d9\u0000\u0000\u0b76\u0b75\u0001\u0000\u0000\u0000\u0b76\u0b77\u0001"+
		"\u0000\u0000\u0000\u0b77\u0bcf\u0001\u0000\u0000\u0000\u0b78\u0b79\u0005"+
		"\u00d8\u0000\u0000\u0b79\u0b7a\u0007.\u0000\u0000\u0b7a\u0b7c\u0005\u00e5"+
		"\u0000\u0000\u0b7b\u0b7d\u0003\u00f6{\u0000\u0b7c\u0b7b\u0001\u0000\u0000"+
		"\u0000\u0b7c\u0b7d\u0001\u0000\u0000\u0000\u0b7d\u0b7f\u0001\u0000\u0000"+
		"\u0000\u0b7e\u0b80\u0005\u00d9\u0000\u0000\u0b7f\u0b7e\u0001\u0000\u0000"+
		"\u0000\u0b7f\u0b80\u0001\u0000\u0000\u0000\u0b80\u0bcf\u0001\u0000\u0000"+
		"\u0000\u0b81\u0b83\u0007/\u0000\u0000\u0b82\u0b84\u0003\u00f6{\u0000\u0b83"+
		"\u0b82\u0001\u0000\u0000\u0000\u0b83\u0b84\u0001\u0000\u0000\u0000\u0b84"+
		"\u0b88\u0001\u0000\u0000\u0000\u0b85\u0b87\u00070\u0000\u0000\u0b86\u0b85"+
		"\u0001\u0000\u0000\u0000\u0b87\u0b8a\u0001\u0000\u0000\u0000\u0b88\u0b86"+
		"\u0001\u0000\u0000\u0000\u0b88\u0b89\u0001\u0000\u0000\u0000\u0b89\u0bcf"+
		"\u0001\u0000\u0000\u0000\u0b8a\u0b88\u0001\u0000\u0000\u0000\u0b8b\u0b8d"+
		"\u0005\u00c7\u0000\u0000\u0b8c\u0b8e\u0003\u00f8|\u0000\u0b8d\u0b8c\u0001"+
		"\u0000\u0000\u0000\u0b8d\u0b8e\u0001\u0000\u0000\u0000\u0b8e\u0b92\u0001"+
		"\u0000\u0000\u0000\u0b8f\u0b91\u00070\u0000\u0000\u0b90\u0b8f\u0001\u0000"+
		"\u0000\u0000\u0b91\u0b94\u0001\u0000\u0000\u0000\u0b92\u0b90\u0001\u0000"+
		"\u0000\u0000\u0b92\u0b93\u0001\u0000\u0000\u0000\u0b93\u0bcf\u0001\u0000"+
		"\u0000\u0000\u0b94\u0b92\u0001\u0000\u0000\u0000\u0b95\u0b97\u0005\u00c8"+
		"\u0000\u0000\u0b96\u0b98\u0005\u00c9\u0000\u0000\u0b97\u0b96\u0001\u0000"+
		"\u0000\u0000\u0b97\u0b98\u0001\u0000\u0000\u0000\u0b98\u0b9a\u0001\u0000"+
		"\u0000\u0000\u0b99\u0b9b\u0003\u00f8|\u0000\u0b9a\u0b99\u0001\u0000\u0000"+
		"\u0000\u0b9a\u0b9b\u0001\u0000\u0000\u0000\u0b9b\u0b9f\u0001\u0000\u0000"+
		"\u0000\u0b9c\u0b9e\u00070\u0000\u0000\u0b9d\u0b9c\u0001\u0000\u0000\u0000"+
		"\u0b9e\u0ba1\u0001\u0000\u0000\u0000\u0b9f\u0b9d\u0001\u0000\u0000\u0000"+
		"\u0b9f\u0ba0\u0001\u0000\u0000\u0000\u0ba0\u0bcf\u0001\u0000\u0000\u0000"+
		"\u0ba1\u0b9f\u0001\u0000\u0000\u0000\u0ba2\u0ba4\u00071\u0000\u0000\u0ba3"+
		"\u0ba5\u0003\u00fa}\u0000\u0ba4\u0ba3\u0001\u0000\u0000\u0000\u0ba4\u0ba5"+
		"\u0001\u0000\u0000\u0000\u0ba5\u0ba9\u0001\u0000\u0000\u0000\u0ba6\u0ba8"+
		"\u00070\u0000\u0000\u0ba7\u0ba6\u0001\u0000\u0000\u0000\u0ba8\u0bab\u0001"+
		"\u0000\u0000\u0000\u0ba9\u0ba7\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0001"+
		"\u0000\u0000\u0000\u0baa\u0bcf\u0001\u0000\u0000\u0000\u0bab\u0ba9\u0001"+
		"\u0000\u0000\u0000\u0bac\u0bcf\u00072\u0000\u0000\u0bad\u0baf\u00073\u0000"+
		"\u0000\u0bae\u0bb0\u0003\u00f6{\u0000\u0baf\u0bae\u0001\u0000\u0000\u0000"+
		"\u0baf\u0bb0\u0001\u0000\u0000\u0000\u0bb0\u0bcf\u0001\u0000\u0000\u0000"+
		"\u0bb1\u0bb2\u00074\u0000\u0000\u0bb2\u0bb4\u0003\u00f2y\u0000\u0bb3\u0bb5"+
		"\u0005\u00d9\u0000\u0000\u0bb4\u0bb3\u0001\u0000\u0000\u0000\u0bb4\u0bb5"+
		"\u0001\u0000\u0000\u0000\u0bb5\u0bb9\u0001\u0000\u0000\u0000\u0bb6\u0bb7"+
		"\u0003\u0018\f\u0000\u0bb7\u0bb8\u0003\u00d6k\u0000\u0bb8\u0bba\u0001"+
		"\u0000\u0000\u0000\u0bb9\u0bb6\u0001\u0000\u0000\u0000\u0bb9\u0bba\u0001"+
		"\u0000\u0000\u0000\u0bba\u0bcf\u0001\u0000\u0000\u0000\u0bbb\u0bcf\u0007"+
		"5\u0000\u0000\u0bbc\u0bbe\u0005\u00de\u0000\u0000\u0bbd\u0bbf\u0005\u00d6"+
		"\u0000\u0000\u0bbe\u0bbd\u0001\u0000\u0000\u0000\u0bbe\u0bbf\u0001\u0000"+
		"\u0000\u0000\u0bbf\u0bc1\u0001\u0000\u0000\u0000\u0bc0\u0bc2\u0005\u00d9"+
		"\u0000\u0000\u0bc1\u0bc0\u0001\u0000\u0000\u0000\u0bc1\u0bc2\u0001\u0000"+
		"\u0000\u0000\u0bc2\u0bc6\u0001\u0000\u0000\u0000\u0bc3\u0bc4\u0003\u0018"+
		"\f\u0000\u0bc4\u0bc5\u0003\u00d6k\u0000\u0bc5\u0bc7\u0001\u0000\u0000"+
		"\u0000\u0bc6\u0bc3\u0001\u0000\u0000\u0000\u0bc6\u0bc7\u0001\u0000\u0000"+
		"\u0000\u0bc7\u0bca\u0001\u0000\u0000\u0000\u0bc8\u0bc9\u0005\u001a\u0000"+
		"\u0000\u0bc9\u0bcb\u0003\u00d8l\u0000\u0bca\u0bc8\u0001\u0000\u0000\u0000"+
		"\u0bca\u0bcb\u0001\u0000\u0000\u0000\u0bcb\u0bcf\u0001\u0000\u0000\u0000"+
		"\u0bcc\u0bcd\u0005\u00de\u0000\u0000\u0bcd\u0bcf\u0005\u00da\u0000\u0000"+
		"\u0bce\u0b54\u0001\u0000\u0000\u0000\u0bce\u0b68\u0001\u0000\u0000\u0000"+
		"\u0bce\u0b70\u0001\u0000\u0000\u0000\u0bce\u0b78\u0001\u0000\u0000\u0000"+
		"\u0bce\u0b81\u0001\u0000\u0000\u0000\u0bce\u0b8b\u0001\u0000\u0000\u0000"+
		"\u0bce\u0b95\u0001\u0000\u0000\u0000\u0bce\u0ba2\u0001\u0000\u0000\u0000"+
		"\u0bce\u0bac\u0001\u0000\u0000\u0000\u0bce\u0bad\u0001\u0000\u0000\u0000"+
		"\u0bce\u0bb1\u0001\u0000\u0000\u0000\u0bce\u0bbb\u0001\u0000\u0000\u0000"+
		"\u0bce\u0bbc\u0001\u0000\u0000\u0000\u0bce\u0bcc\u0001\u0000\u0000\u0000"+
		"\u0bcf\u00f1\u0001\u0000\u0000\u0000\u0bd0\u0bd1\u0005\u0454\u0000\u0000"+
		"\u0bd1\u0bd6\u0005\u0463\u0000\u0000\u0bd2\u0bd3\u0005\u0456\u0000\u0000"+
		"\u0bd3\u0bd5\u0005\u0463\u0000\u0000\u0bd4\u0bd2\u0001\u0000\u0000\u0000"+
		"\u0bd5\u0bd8\u0001\u0000\u0000\u0000\u0bd6\u0bd4\u0001\u0000\u0000\u0000"+
		"\u0bd6\u0bd7\u0001\u0000\u0000\u0000\u0bd7\u0bd9\u0001\u0000\u0000\u0000"+
		"\u0bd8\u0bd6\u0001\u0000\u0000\u0000\u0bd9\u0bda\u0005\u0455\u0000\u0000"+
		"\u0bda\u00f3\u0001\u0000\u0000\u0000\u0bdb\u0bdd\u00076\u0000\u0000\u0bdc"+
		"\u0bde\u0003\u00f6{\u0000\u0bdd\u0bdc\u0001\u0000\u0000\u0000\u0bdd\u0bde"+
		"\u0001\u0000\u0000\u0000\u0bde\u0bf2\u0001\u0000\u0000\u0000\u0bdf\u0be1"+
		"\u0005\u00d5\u0000\u0000\u0be0\u0be2\u0003\u00f6{\u0000\u0be1\u0be0\u0001"+
		"\u0000\u0000\u0000\u0be1\u0be2\u0001\u0000\u0000\u0000\u0be2\u0be6\u0001"+
		"\u0000\u0000\u0000\u0be3\u0be4\u0003\u0018\f\u0000\u0be4\u0be5\u0003\u00d6"+
		"k\u0000\u0be5\u0be7\u0001\u0000\u0000\u0000\u0be6\u0be3\u0001\u0000\u0000"+
		"\u0000\u0be6\u0be7\u0001\u0000\u0000\u0000\u0be7\u0bf2\u0001\u0000\u0000"+
		"\u0000\u0be8\u0bf2\u00077\u0000\u0000\u0be9\u0beb\u0005\u00cd\u0000\u0000"+
		"\u0bea\u0bec\u0003\u00fa}\u0000\u0beb\u0bea\u0001\u0000\u0000\u0000\u0beb"+
		"\u0bec\u0001\u0000\u0000\u0000\u0bec\u0bf2\u0001\u0000\u0000\u0000\u0bed"+
		"\u0bef\u00078\u0000\u0000\u0bee\u0bf0\u0005\u00c5\u0000\u0000\u0bef\u0bee"+
		"\u0001\u0000\u0000\u0000\u0bef\u0bf0\u0001\u0000\u0000\u0000\u0bf0\u0bf2"+
		"\u0001\u0000\u0000\u0000\u0bf1\u0bdb\u0001\u0000\u0000\u0000\u0bf1\u0bdf"+
		"\u0001\u0000\u0000\u0000\u0bf1\u0be8\u0001\u0000\u0000\u0000\u0bf1\u0be9"+
		"\u0001\u0000\u0000\u0000\u0bf1\u0bed\u0001\u0000\u0000\u0000\u0bf2\u0bf4"+
		"\u0001\u0000\u0000\u0000\u0bf3\u0bf5\u0005\u000b\u0000\u0000\u0bf4\u0bf3"+
		"\u0001\u0000\u0000\u0000\u0bf4\u0bf5\u0001\u0000\u0000\u0000\u0bf5\u00f5"+
		"\u0001\u0000\u0000\u0000\u0bf6\u0bf7\u0005\u0454\u0000\u0000\u0bf7\u0bf8"+
		"\u0003\u00e2q\u0000\u0bf8\u0bf9\u0005\u0455\u0000\u0000\u0bf9\u00f7\u0001"+
		"\u0000\u0000\u0000\u0bfa\u0bfb\u0005\u0454\u0000\u0000\u0bfb\u0bfc\u0003"+
		"\u00e2q\u0000\u0bfc\u0bfd\u0005\u0456\u0000\u0000\u0bfd\u0bfe\u0003\u00e2"+
		"q\u0000\u0bfe\u0bff\u0005\u0455\u0000\u0000\u0bff\u00f9\u0001\u0000\u0000"+
		"\u0000\u0c00\u0c01\u0005\u0454\u0000\u0000\u0c01\u0c04\u0003\u00e2q\u0000"+
		"\u0c02\u0c03\u0005\u0456\u0000\u0000\u0c03\u0c05\u0003\u00e2q\u0000\u0c04"+
		"\u0c02\u0001\u0000\u0000\u0000\u0c04\u0c05\u0001\u0000\u0000\u0000\u0c05"+
		"\u0c06\u0001\u0000\u0000\u0000\u0c06\u0c07\u0005\u0455\u0000\u0000\u0c07"+
		"\u00fb\u0001\u0000\u0000\u0000\u0c08\u0c0d\u0003\u00dcn\u0000\u0c09\u0c0a"+
		"\u0005\u0456\u0000\u0000\u0c0a\u0c0c\u0003\u00dcn\u0000\u0c0b\u0c09\u0001"+
		"\u0000\u0000\u0000\u0c0c\u0c0f\u0001\u0000\u0000\u0000\u0c0d\u0c0b\u0001"+
		"\u0000\u0000\u0000\u0c0d\u0c0e\u0001\u0000\u0000\u0000\u0c0e\u00fd\u0001"+
		"\u0000\u0000\u0000\u0c0f\u0c0d\u0001\u0000\u0000\u0000\u0c10\u0c15\u0003"+
		"\u00ceg\u0000\u0c11\u0c12\u0005\u0456\u0000\u0000\u0c12\u0c14\u0003\u00ce"+
		"g\u0000\u0c13\u0c11\u0001\u0000\u0000\u0000\u0c14\u0c17\u0001\u0000\u0000"+
		"\u0000\u0c15\u0c13\u0001\u0000\u0000\u0000\u0c15\u0c16\u0001\u0000\u0000"+
		"\u0000\u0c16\u00ff\u0001\u0000\u0000\u0000\u0c17\u0c15\u0001\u0000\u0000"+
		"\u0000\u0c18\u0c19\u0005\u0454\u0000\u0000\u0c19\u0c1e\u0003\u00d2i\u0000"+
		"\u0c1a\u0c1b\u0005\u0456\u0000\u0000\u0c1b\u0c1d\u0003\u00d2i\u0000\u0c1c"+
		"\u0c1a\u0001\u0000\u0000\u0000\u0c1d\u0c20\u0001\u0000\u0000\u0000\u0c1e"+
		"\u0c1c\u0001\u0000\u0000\u0000\u0c1e\u0c1f\u0001\u0000\u0000\u0000\u0c1f"+
		"\u0c21\u0001\u0000\u0000\u0000\u0c20\u0c1e\u0001\u0000\u0000\u0000\u0c21"+
		"\u0c22\u0005\u0455\u0000\u0000\u0c22\u0101\u0001\u0000\u0000\u0000\u0c23"+
		"\u0c28\u0003\u0138\u009c\u0000\u0c24\u0c25\u0005\u0456\u0000\u0000\u0c25"+
		"\u0c27\u0003\u0138\u009c\u0000\u0c26\u0c24\u0001\u0000\u0000\u0000\u0c27"+
		"\u0c2a\u0001\u0000\u0000\u0000\u0c28\u0c26\u0001\u0000\u0000\u0000\u0c28"+
		"\u0c29\u0001\u0000\u0000\u0000\u0c29\u0103\u0001\u0000\u0000\u0000\u0c2a"+
		"\u0c28\u0001\u0000\u0000\u0000\u0c2b\u0c30\u0003\u010a\u0085\u0000\u0c2c"+
		"\u0c2d\u0005\u0456\u0000\u0000\u0c2d\u0c2f\u0003\u010a\u0085\u0000\u0c2e"+
		"\u0c2c\u0001\u0000\u0000\u0000\u0c2f\u0c32\u0001\u0000\u0000\u0000\u0c30"+
		"\u0c2e\u0001\u0000\u0000\u0000\u0c30\u0c31\u0001\u0000\u0000\u0000\u0c31"+
		"\u0105\u0001\u0000\u0000\u0000\u0c32\u0c30\u0001\u0000\u0000\u0000\u0c33"+
		"\u0c57\u0005n\u0000\u0000\u0c34\u0c35\u0005\u0016\u0000\u0000\u0c35\u0c36"+
		"\u0005\u0454\u0000\u0000\u0c36\u0c37\u0003\u0138\u009c\u0000\u0c37\u0c38"+
		"\u0005\f\u0000\u0000\u0c38\u0c39\u0003\u00f4z\u0000\u0c39\u0c3a\u0005"+
		"\u0455\u0000\u0000\u0c3a\u0c57\u0001\u0000\u0000\u0000\u0c3b\u0c3d\u0003"+
		"\u013e\u009f\u0000\u0c3c\u0c3b\u0001\u0000\u0000\u0000\u0c3c\u0c3d\u0001"+
		"\u0000\u0000\u0000\u0c3d\u0c3e\u0001\u0000\u0000\u0000\u0c3e\u0c57\u0003"+
		"\u00eew\u0000\u0c3f\u0c43\u0003\u0108\u0084\u0000\u0c40\u0c41\u0005p\u0000"+
		"\u0000\u0c41\u0c42\u0005\u00af\u0000\u0000\u0c42\u0c44\u0003\u0108\u0084"+
		"\u0000\u0c43\u0c40\u0001\u0000\u0000\u0000\u0c43\u0c44\u0001\u0000\u0000"+
		"\u0000\u0c44\u0c57\u0001\u0000\u0000\u0000\u0c45\u0c46\u0005\u0454\u0000"+
		"\u0000\u0c46\u0c47\u0003\u0138\u009c\u0000\u0c47\u0c48\u0005\u0455\u0000"+
		"\u0000\u0c48\u0c57\u0001\u0000\u0000\u0000\u0c49\u0c4a\u00079\u0000\u0000"+
		"\u0c4a\u0c4b\u0005\u0454\u0000\u0000\u0c4b\u0c4c\u0003\u00ccf\u0000\u0c4c"+
		"\u0c4d\u0005\u0455\u0000\u0000\u0c4d\u0c57\u0001\u0000\u0000\u0000\u0c4e"+
		"\u0c4f\u0005\u0454\u0000\u0000\u0c4f\u0c50\u0007:\u0000\u0000\u0c50\u0c51"+
		"\u0005\u0281\u0000\u0000\u0c51\u0c52\u0005>\u0000\u0000\u0c52\u0c53\u0003"+
		"\u00ccf\u0000\u0c53\u0c54\u0005\u0455\u0000\u0000\u0c54\u0c57\u0001\u0000"+
		"\u0000\u0000\u0c55\u0c57\u0003\u0138\u009c\u0000\u0c56\u0c33\u0001\u0000"+
		"\u0000\u0000\u0c56\u0c34\u0001\u0000\u0000\u0000\u0c56\u0c3c\u0001\u0000"+
		"\u0000\u0000\u0c56\u0c3f\u0001\u0000\u0000\u0000\u0c56\u0c45\u0001\u0000"+
		"\u0000\u0000\u0c56\u0c49\u0001\u0000\u0000\u0000\u0c56\u0c4e\u0001\u0000"+
		"\u0000\u0000\u0c56\u0c55\u0001\u0000\u0000\u0000\u0c57\u0107\u0001\u0000"+
		"\u0000\u0000\u0c58\u0c5e\u0007;\u0000\u0000\u0c59\u0c5b\u0005\u0454\u0000"+
		"\u0000\u0c5a\u0c5c\u0003\u00e2q\u0000\u0c5b\u0c5a\u0001\u0000\u0000\u0000"+
		"\u0c5b\u0c5c\u0001\u0000\u0000\u0000\u0c5c\u0c5d\u0001\u0000\u0000\u0000"+
		"\u0c5d\u0c5f\u0005\u0455\u0000\u0000\u0c5e\u0c59\u0001\u0000\u0000\u0000"+
		"\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f\u0c67\u0001\u0000\u0000\u0000"+
		"\u0c60\u0c61\u0005\u0137\u0000\u0000\u0c61\u0c63\u0005\u0454\u0000\u0000"+
		"\u0c62\u0c64\u0003\u00e2q\u0000\u0c63\u0c62\u0001\u0000\u0000\u0000\u0c63"+
		"\u0c64\u0001\u0000\u0000\u0000\u0c64\u0c65\u0001\u0000\u0000\u0000\u0c65"+
		"\u0c67\u0005\u0455\u0000\u0000\u0c66\u0c58\u0001\u0000\u0000\u0000\u0c66"+
		"\u0c60\u0001\u0000\u0000\u0000\u0c67\u0109\u0001\u0000\u0000\u0000\u0c68"+
		"\u0c6b\u0003\u0138\u009c\u0000\u0c69\u0c6b\u0005(\u0000\u0000\u0c6a\u0c68"+
		"\u0001\u0000\u0000\u0000\u0c6a\u0c69\u0001\u0000\u0000\u0000\u0c6b\u010b"+
		"\u0001\u0000\u0000\u0000\u0c6c\u0c6d\u0005J\u0000\u0000\u0c6d\u0c6e\u0005"+
		"9\u0000\u0000\u0c6e\u010d\u0001\u0000\u0000\u0000\u0c6f\u0c70\u0005J\u0000"+
		"\u0000\u0c70\u0c71\u0005l\u0000\u0000\u0c71\u0c72\u00059\u0000\u0000\u0c72"+
		"\u010f\u0001\u0000\u0000\u0000\u0c73\u0c86\u0003\u0112\u0089\u0000\u0c74"+
		"\u0c86\u0003\u011a\u008d\u0000\u0c75\u0c86\u0003\u011c\u008e\u0000\u0c76"+
		"\u0c77\u0003\u0130\u0098\u0000\u0c77\u0c79\u0005\u0454\u0000\u0000\u0c78"+
		"\u0c7a\u0003\u0134\u009a\u0000\u0c79\u0c78\u0001\u0000\u0000\u0000\u0c79"+
		"\u0c7a\u0001\u0000\u0000\u0000\u0c7a\u0c7b\u0001\u0000\u0000\u0000\u0c7b"+
		"\u0c7c\u0005\u0455\u0000\u0000\u0c7c\u0c86\u0001\u0000\u0000\u0000\u0c7d"+
		"\u0c7e\u0003\u00ccf\u0000\u0c7e\u0c80\u0005\u0454\u0000\u0000\u0c7f\u0c81"+
		"\u0003\u0134\u009a\u0000\u0c80\u0c7f\u0001\u0000\u0000\u0000\u0c80\u0c81"+
		"\u0001\u0000\u0000\u0000\u0c81\u0c82\u0001\u0000\u0000\u0000\u0c82\u0c83"+
		"\u0005\u0455\u0000\u0000\u0c83\u0c86\u0001\u0000\u0000\u0000\u0c84\u0c86"+
		"\u0003\u0132\u0099\u0000\u0c85\u0c73\u0001\u0000\u0000\u0000\u0c85\u0c74"+
		"\u0001\u0000\u0000\u0000\u0c85\u0c75\u0001\u0000\u0000\u0000\u0c85\u0c76"+
		"\u0001\u0000\u0000\u0000\u0c85\u0c7d\u0001\u0000\u0000\u0000\u0c85\u0c84"+
		"\u0001\u0000\u0000\u0000\u0c86\u0111\u0001\u0000\u0000\u0000\u0c87\u0c8a"+
		"\u0007<\u0000\u0000\u0c88\u0c89\u0005\u0454\u0000\u0000\u0c89\u0c8b\u0005"+
		"\u0455\u0000\u0000\u0c8a\u0c88\u0001\u0000\u0000\u0000\u0c8a\u0c8b\u0001"+
		"\u0000\u0000\u0000\u0c8b\u0d48\u0001\u0000\u0000\u0000\u0c8c\u0c8d\u0005"+
		"\u001f\u0000\u0000\u0c8d\u0c8e\u0005\u0454\u0000\u0000\u0c8e\u0c8f\u0003"+
		"\u0138\u009c\u0000\u0c8f\u0c90\u0005\u0456\u0000\u0000\u0c90\u0c91\u0003"+
		"\u00f4z\u0000\u0c91\u0c92\u0005\u0455\u0000\u0000\u0c92\u0d48\u0001\u0000"+
		"\u0000\u0000\u0c93\u0c94\u0005\u001f\u0000\u0000\u0c94\u0c95\u0005\u0454"+
		"\u0000\u0000\u0c95\u0c96\u0003\u0138\u009c\u0000\u0c96\u0c97\u0005\u00b2"+
		"\u0000\u0000\u0c97\u0c98\u0003\u00d6k\u0000\u0c98\u0c99\u0005\u0455\u0000"+
		"\u0000\u0c99\u0d48\u0001\u0000\u0000\u0000\u0c9a\u0c9b\u0005\u0016\u0000"+
		"\u0000\u0c9b\u0c9c\u0005\u0454\u0000\u0000\u0c9c\u0c9d\u0003\u0138\u009c"+
		"\u0000\u0c9d\u0c9e\u0005\f\u0000\u0000\u0c9e\u0c9f\u0003\u00f4z\u0000"+
		"\u0c9f\u0ca0\u0005\u0455\u0000\u0000\u0ca0\u0d48\u0001\u0000\u0000\u0000"+
		"\u0ca1\u0ca2\u0005\u00b3\u0000\u0000\u0ca2\u0ca3\u0005\u0454\u0000\u0000"+
		"\u0ca3\u0ca4\u0003\u00d0h\u0000\u0ca4\u0ca5\u0005\u0455\u0000\u0000\u0ca5"+
		"\u0d48\u0001\u0000\u0000\u0000\u0ca6\u0ca7\u0005\u0015\u0000\u0000\u0ca7"+
		"\u0ca9\u0003\u0138\u009c\u0000\u0ca8\u0caa\u0003\u0114\u008a\u0000\u0ca9"+
		"\u0ca8\u0001\u0000\u0000\u0000\u0caa\u0cab\u0001\u0000\u0000\u0000\u0cab"+
		"\u0ca9\u0001\u0000\u0000\u0000\u0cab\u0cac\u0001\u0000\u0000\u0000\u0cac"+
		"\u0caf\u0001\u0000\u0000\u0000\u0cad\u0cae\u00053\u0000\u0000\u0cae\u0cb0"+
		"\u0003\u0136\u009b\u0000\u0caf\u0cad\u0001\u0000\u0000\u0000\u0caf\u0cb0"+
		"\u0001\u0000\u0000\u0000\u0cb0\u0cb1\u0001\u0000\u0000\u0000\u0cb1\u0cb2"+
		"\u0005\u0188\u0000\u0000\u0cb2\u0d48\u0001\u0000\u0000\u0000\u0cb3\u0cb5"+
		"\u0005\u0015\u0000\u0000\u0cb4\u0cb6\u0003\u0114\u008a\u0000\u0cb5\u0cb4"+
		"\u0001\u0000\u0000\u0000\u0cb6\u0cb7\u0001\u0000\u0000\u0000\u0cb7\u0cb5"+
		"\u0001\u0000\u0000\u0000\u0cb7\u0cb8\u0001\u0000\u0000\u0000\u0cb8\u0cbb"+
		"\u0001\u0000\u0000\u0000\u0cb9\u0cba\u00053\u0000\u0000\u0cba\u0cbc\u0003"+
		"\u0136\u009b\u0000\u0cbb\u0cb9\u0001\u0000\u0000\u0000\u0cbb\u0cbc\u0001"+
		"\u0000\u0000\u0000\u0cbc\u0cbd\u0001\u0000\u0000\u0000\u0cbd\u0cbe\u0005"+
		"\u0188\u0000\u0000\u0cbe\u0d48\u0001\u0000\u0000\u0000\u0cbf\u0cc0\u0005"+
		"\u00d5\u0000\u0000\u0cc0\u0cc1\u0005\u0454\u0000\u0000\u0cc1\u0cc4\u0003"+
		"\u0134\u009a\u0000\u0cc2\u0cc3\u0005\u00b2\u0000\u0000\u0cc3\u0cc5\u0003"+
		"\u00d6k\u0000\u0cc4\u0cc2\u0001\u0000\u0000\u0000\u0cc4\u0cc5\u0001\u0000"+
		"\u0000\u0000\u0cc5\u0cc6\u0001\u0000\u0000\u0000\u0cc6\u0cc7\u0005\u0455"+
		"\u0000\u0000\u0cc7\u0d48\u0001\u0000\u0000\u0000\u0cc8\u0cc9\u0005\u0138"+
		"\u0000\u0000\u0cc9\u0ccc\u0005\u0454\u0000\u0000\u0cca\u0ccd\u0003\u00e6"+
		"s\u0000\u0ccb\u0ccd\u0003\u0138\u009c\u0000\u0ccc\u0cca\u0001\u0000\u0000"+
		"\u0000\u0ccc\u0ccb\u0001\u0000\u0000\u0000\u0ccd\u0cce\u0001\u0000\u0000"+
		"\u0000\u0cce\u0cd1\u0005M\u0000\u0000\u0ccf\u0cd2\u0003\u00e6s\u0000\u0cd0"+
		"\u0cd2\u0003\u0138\u009c\u0000\u0cd1\u0ccf\u0001\u0000\u0000\u0000\u0cd1"+
		"\u0cd0\u0001\u0000\u0000\u0000\u0cd2\u0cd3\u0001\u0000\u0000\u0000\u0cd3"+
		"\u0cd4\u0005\u0455\u0000\u0000\u0cd4\u0d48\u0001\u0000\u0000\u0000\u0cd5"+
		"\u0cd6\u0007=\u0000\u0000\u0cd6\u0cd9\u0005\u0454\u0000\u0000\u0cd7\u0cda"+
		"\u0003\u00e6s\u0000\u0cd8\u0cda\u0003\u0138\u009c\u0000\u0cd9\u0cd7\u0001"+
		"\u0000\u0000\u0000\u0cd9\u0cd8\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0001"+
		"\u0000\u0000\u0000\u0cdb\u0cde\u0005A\u0000\u0000\u0cdc\u0cdf\u0003\u00e2"+
		"q\u0000\u0cdd\u0cdf\u0003\u0138\u009c\u0000\u0cde\u0cdc\u0001\u0000\u0000"+
		"\u0000\u0cde\u0cdd\u0001\u0000\u0000\u0000\u0cdf\u0ce5\u0001\u0000\u0000"+
		"\u0000\u0ce0\u0ce3\u0005>\u0000\u0000\u0ce1\u0ce4\u0003\u00e2q\u0000\u0ce2"+
		"\u0ce4\u0003\u0138\u009c\u0000\u0ce3\u0ce1\u0001\u0000\u0000\u0000\u0ce3"+
		"\u0ce2\u0001\u0000\u0000\u0000\u0ce4\u0ce6\u0001\u0000\u0000\u0000\u0ce5"+
		"\u0ce0\u0001\u0000\u0000\u0000\u0ce5\u0ce6\u0001\u0000\u0000\u0000\u0ce6"+
		"\u0ce7\u0001\u0000\u0000\u0000\u0ce7\u0ce8\u0005\u0455\u0000\u0000\u0ce8"+
		"\u0d48\u0001\u0000\u0000\u0000\u0ce9\u0cea\u0005\u013c\u0000\u0000\u0cea"+
		"\u0ceb\u0005\u0454\u0000\u0000\u0ceb\u0cee\u0007>\u0000\u0000\u0cec\u0cef"+
		"\u0003\u00e6s\u0000\u0ced\u0cef\u0003\u0138\u009c\u0000\u0cee\u0cec\u0001"+
		"\u0000\u0000\u0000\u0cee\u0ced\u0001\u0000\u0000\u0000\u0cee\u0cef\u0001"+
		"\u0000\u0000\u0000\u0cef\u0cf0\u0001\u0000\u0000\u0000\u0cf0\u0cf3\u0005"+
		"A\u0000\u0000\u0cf1\u0cf4\u0003\u00e6s\u0000\u0cf2\u0cf4\u0003\u0138\u009c"+
		"\u0000\u0cf3\u0cf1\u0001\u0000\u0000\u0000\u0cf3\u0cf2\u0001\u0000\u0000"+
		"\u0000\u0cf4\u0cf5\u0001\u0000\u0000\u0000\u0cf5\u0cf6\u0005\u0455\u0000"+
		"\u0000\u0cf6\u0d48\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0005\u013c\u0000"+
		"\u0000\u0cf8\u0cfb\u0005\u0454\u0000\u0000\u0cf9\u0cfc\u0003\u00e6s\u0000"+
		"\u0cfa\u0cfc\u0003\u0138\u009c\u0000\u0cfb\u0cf9\u0001\u0000\u0000\u0000"+
		"\u0cfb\u0cfa\u0001\u0000\u0000\u0000\u0cfc\u0cfd\u0001\u0000\u0000\u0000"+
		"\u0cfd\u0d00\u0005A\u0000\u0000\u0cfe\u0d01\u0003\u00e6s\u0000\u0cff\u0d01"+
		"\u0003\u0138\u009c\u0000\u0d00\u0cfe\u0001\u0000\u0000\u0000\u0d00\u0cff"+
		"\u0001\u0000\u0000\u0000\u0d01\u0d02\u0001\u0000\u0000\u0000\u0d02\u0d03"+
		"\u0005\u0455\u0000\u0000\u0d03\u0d48\u0001\u0000\u0000\u0000\u0d04\u0d05"+
		"\u0005\u042a\u0000\u0000\u0d05\u0d08\u0005\u0454\u0000\u0000\u0d06\u0d09"+
		"\u0003\u00e6s\u0000\u0d07\u0d09\u0003\u0138\u009c\u0000\u0d08\u0d06\u0001"+
		"\u0000\u0000\u0000\u0d08\u0d07\u0001\u0000\u0000\u0000\u0d09\u0d10\u0001"+
		"\u0000\u0000\u0000\u0d0a\u0d0b\u0005\f\u0000\u0000\u0d0b\u0d0c\u0007?"+
		"\u0000\u0000\u0d0c\u0d0d\u0005\u0454\u0000\u0000\u0d0d\u0d0e\u0003\u00e2"+
		"q\u0000\u0d0e\u0d0f\u0005\u0455\u0000\u0000\u0d0f\u0d11\u0001\u0000\u0000"+
		"\u0000\u0d10\u0d0a\u0001\u0000\u0000\u0000\u0d10\u0d11\u0001\u0000\u0000"+
		"\u0000\u0d11\u0d13\u0001\u0000\u0000\u0000\u0d12\u0d14\u0003\u0116\u008b"+
		"\u0000\u0d13\u0d12\u0001\u0000\u0000\u0000\u0d13\u0d14\u0001\u0000\u0000"+
		"\u0000\u0d14\u0d15\u0001\u0000\u0000\u0000\u0d15\u0d16\u0005\u0455\u0000"+
		"\u0000\u0d16\u0d48\u0001\u0000\u0000\u0000\u0d17\u0d18\u0005\u0135\u0000"+
		"\u0000\u0d18\u0d19\u0005\u0454\u0000\u0000\u0d19\u0d1a\u0003\u001a\r\u0000"+
		"\u0d1a\u0d1d\u0005A\u0000\u0000\u0d1b\u0d1e\u0003\u00e6s\u0000\u0d1c\u0d1e"+
		"\u0003\u0138\u009c\u0000\u0d1d\u0d1b\u0001\u0000\u0000\u0000\u0d1d\u0d1c"+
		"\u0001\u0000\u0000\u0000\u0d1e\u0d1f\u0001\u0000\u0000\u0000\u0d1f\u0d20"+
		"\u0005\u0455\u0000\u0000\u0d20\u0d48\u0001\u0000\u0000\u0000\u0d21\u0d22"+
		"\u0005\u0361\u0000\u0000\u0d22\u0d23\u0005\u0454\u0000\u0000\u0d23\u0d24"+
		"\u0007@\u0000\u0000\u0d24\u0d25\u0005\u0456\u0000\u0000\u0d25\u0d26\u0003"+
		"\u00e6s\u0000\u0d26\u0d27\u0005\u0455\u0000\u0000\u0d27\u0d48\u0001\u0000"+
		"\u0000\u0000\u0d28\u0d29\u0005\u00fb\u0000\u0000\u0d29\u0d2a\u0005\u0454"+
		"\u0000\u0000\u0d2a\u0d2b\u0003\u0138\u009c\u0000\u0d2b\u0d2c\u0005\u0456"+
		"\u0000\u0000\u0d2c\u0d2f\u0003\u0138\u009c\u0000\u0d2d\u0d2e\u0005\u0237"+
		"\u0000\u0000\u0d2e\u0d30\u0003\u00f4z\u0000\u0d2f\u0d2d\u0001\u0000\u0000"+
		"\u0000\u0d2f\u0d30\u0001\u0000\u0000\u0000\u0d30\u0d39\u0001\u0000\u0000"+
		"\u0000\u0d31\u0d36\u0005n\u0000\u0000\u0d32\u0d36\u0005\u018c\u0000\u0000"+
		"\u0d33\u0d34\u0005(\u0000\u0000\u0d34\u0d36\u0003\u0106\u0083\u0000\u0d35"+
		"\u0d31\u0001\u0000\u0000\u0000\u0d35\u0d32\u0001\u0000\u0000\u0000\u0d35"+
		"\u0d33\u0001\u0000\u0000\u0000\u0d36\u0d37\u0001\u0000\u0000\u0000\u0d37"+
		"\u0d38\u0005p\u0000\u0000\u0d38\u0d3a\u00055\u0000\u0000\u0d39\u0d35\u0001"+
		"\u0000\u0000\u0000\u0d39\u0d3a\u0001\u0000\u0000\u0000\u0d3a\u0d43\u0001"+
		"\u0000\u0000\u0000\u0d3b\u0d40\u0005n\u0000\u0000\u0d3c\u0d40\u0005\u018c"+
		"\u0000\u0000\u0d3d\u0d3e\u0005(\u0000\u0000\u0d3e\u0d40\u0003\u0106\u0083"+
		"\u0000\u0d3f\u0d3b\u0001\u0000\u0000\u0000\u0d3f\u0d3c\u0001\u0000\u0000"+
		"\u0000\u0d3f\u0d3d\u0001\u0000\u0000\u0000\u0d40\u0d41\u0001\u0000\u0000"+
		"\u0000\u0d41\u0d42\u0005p\u0000\u0000\u0d42\u0d44\u0005\u018c\u0000\u0000"+
		"\u0d43\u0d3f\u0001\u0000\u0000\u0000\u0d43\u0d44\u0001\u0000\u0000\u0000"+
		"\u0d44\u0d45\u0001\u0000\u0000\u0000\u0d45\u0d46\u0005\u0455\u0000\u0000"+
		"\u0d46\u0d48\u0001\u0000\u0000\u0000\u0d47\u0c87\u0001\u0000\u0000\u0000"+
		"\u0d47\u0c8c\u0001\u0000\u0000\u0000\u0d47\u0c93\u0001\u0000\u0000\u0000"+
		"\u0d47\u0c9a\u0001\u0000\u0000\u0000\u0d47\u0ca1\u0001\u0000\u0000\u0000"+
		"\u0d47\u0ca6\u0001\u0000\u0000\u0000\u0d47\u0cb3\u0001\u0000\u0000\u0000"+
		"\u0d47\u0cbf\u0001\u0000\u0000\u0000\u0d47\u0cc8\u0001\u0000\u0000\u0000"+
		"\u0d47\u0cd5\u0001\u0000\u0000\u0000\u0d47\u0ce9\u0001\u0000\u0000\u0000"+
		"\u0d47\u0cf7\u0001\u0000\u0000\u0000\u0d47\u0d04\u0001\u0000\u0000\u0000"+
		"\u0d47\u0d17\u0001\u0000\u0000\u0000\u0d47\u0d21\u0001\u0000\u0000\u0000"+
		"\u0d47\u0d28\u0001\u0000\u0000\u0000\u0d48\u0113\u0001\u0000\u0000\u0000"+
		"\u0d49\u0d4a\u0005\u00b4\u0000\u0000\u0d4a\u0d4b\u0003\u0136\u009b\u0000"+
		"\u0d4b\u0d4c\u0005\u00a5\u0000\u0000\u0d4c\u0d4d\u0003\u0136\u009b\u0000"+
		"\u0d4d\u0115\u0001\u0000\u0000\u0000\u0d4e\u0d4f\u0005\u01c6\u0000\u0000"+
		"\u0d4f\u0d54\u0003\u0118\u008c\u0000\u0d50\u0d51\u0005\u0456\u0000\u0000"+
		"\u0d51\u0d53\u0003\u0118\u008c\u0000\u0d52\u0d50\u0001\u0000\u0000\u0000"+
		"\u0d53\u0d56\u0001\u0000\u0000\u0000\u0d54\u0d52\u0001\u0000\u0000\u0000"+
		"\u0d54\u0d55\u0001\u0000\u0000\u0000\u0d55\u0d5d\u0001\u0000\u0000\u0000"+
		"\u0d56\u0d54\u0001\u0000\u0000\u0000\u0d57\u0d58\u0005\u01c6\u0000\u0000"+
		"\u0d58\u0d59\u0003\u00e2q\u0000\u0d59\u0d5a\u0005\u0448\u0000\u0000\u0d5a"+
		"\u0d5b\u0003\u00e2q\u0000\u0d5b\u0d5d\u0001\u0000\u0000\u0000\u0d5c\u0d4e"+
		"\u0001\u0000\u0000\u0000\u0d5c\u0d57\u0001\u0000\u0000\u0000\u0d5d\u0117"+
		"\u0001\u0000\u0000\u0000\u0d5e\u0d60\u0003\u00e2q\u0000\u0d5f\u0d61\u0007"+
		"A\u0000\u0000\u0d60\u0d5f\u0001\u0000\u0000\u0000\u0d60\u0d61\u0001\u0000"+
		"\u0000\u0000\u0d61\u0119\u0001\u0000\u0000\u0000\u0d62\u0d63\u0007B\u0000"+
		"\u0000\u0d63\u0d65\u0005\u0454\u0000\u0000\u0d64\u0d66\u0007\u001d\u0000"+
		"\u0000\u0d65\u0d64\u0001\u0000\u0000\u0000\u0d65\u0d66\u0001\u0000\u0000"+
		"\u0000\u0d66\u0d67\u0001\u0000\u0000\u0000\u0d67\u0d68\u0003\u0136\u009b"+
		"\u0000\u0d68\u0d6a\u0005\u0455\u0000\u0000\u0d69\u0d6b\u0003\u011e\u008f"+
		"\u0000\u0d6a\u0d69\u0001\u0000\u0000\u0000\u0d6a\u0d6b\u0001\u0000\u0000"+
		"\u0000\u0d6b\u0d9e\u0001\u0000\u0000\u0000\u0d6c\u0d6d\u0005\u0116\u0000"+
		"\u0000\u0d6d\u0d75\u0005\u0454\u0000\u0000\u0d6e\u0d76\u0005\u0444\u0000"+
		"\u0000\u0d6f\u0d71\u0005\u0006\u0000\u0000\u0d70\u0d6f\u0001\u0000\u0000"+
		"\u0000\u0d70\u0d71\u0001\u0000\u0000\u0000\u0d71\u0d72\u0001\u0000\u0000"+
		"\u0000\u0d72\u0d76\u0003\u0136\u009b\u0000\u0d73\u0d74\u0005/\u0000\u0000"+
		"\u0d74\u0d76\u0003\u0134\u009a\u0000\u0d75\u0d6e\u0001\u0000\u0000\u0000"+
		"\u0d75\u0d70\u0001\u0000\u0000\u0000\u0d75\u0d73\u0001\u0000\u0000\u0000"+
		"\u0d76\u0d77\u0001\u0000\u0000\u0000\u0d77\u0d79\u0005\u0455\u0000\u0000"+
		"\u0d78\u0d7a\u0003\u011e\u008f\u0000\u0d79\u0d78\u0001\u0000\u0000\u0000"+
		"\u0d79\u0d7a\u0001\u0000\u0000\u0000\u0d7a\u0d9e\u0001\u0000\u0000\u0000"+
		"\u0d7b\u0d7c\u0007C\u0000\u0000\u0d7c\u0d7e\u0005\u0454\u0000\u0000\u0d7d"+
		"\u0d7f\u0005\u0006\u0000\u0000\u0d7e\u0d7d\u0001\u0000\u0000\u0000\u0d7e"+
		"\u0d7f\u0001\u0000\u0000\u0000\u0d7f\u0d80\u0001\u0000\u0000\u0000\u0d80"+
		"\u0d81\u0003\u0136\u009b\u0000\u0d81\u0d83\u0005\u0455\u0000\u0000\u0d82"+
		"\u0d84\u0003\u011e\u008f\u0000\u0d83\u0d82\u0001\u0000\u0000\u0000\u0d83"+
		"\u0d84\u0001\u0000\u0000\u0000\u0d84\u0d9e\u0001\u0000\u0000\u0000\u0d85"+
		"\u0d86\u0005\u011a\u0000\u0000\u0d86\u0d88\u0005\u0454\u0000\u0000\u0d87"+
		"\u0d89\u0005/\u0000\u0000\u0d88\u0d87\u0001\u0000\u0000\u0000\u0d88\u0d89"+
		"\u0001\u0000\u0000\u0000\u0d89\u0d8a\u0001\u0000\u0000\u0000\u0d8a\u0d95"+
		"\u0003\u0134\u009a\u0000\u0d8b\u0d8c\u0005v\u0000\u0000\u0d8c\u0d8d\u0005"+
		"\u0012\u0000\u0000\u0d8d\u0d92\u0003r9\u0000\u0d8e\u0d8f\u0005\u0456\u0000"+
		"\u0000\u0d8f\u0d91\u0003r9\u0000\u0d90\u0d8e\u0001\u0000\u0000\u0000\u0d91"+
		"\u0d94\u0001\u0000\u0000\u0000\u0d92\u0d90\u0001\u0000\u0000\u0000\u0d92"+
		"\u0d93\u0001\u0000\u0000\u0000\u0d93\u0d96\u0001\u0000\u0000\u0000\u0d94"+
		"\u0d92\u0001\u0000\u0000\u0000\u0d95\u0d8b\u0001\u0000\u0000\u0000\u0d95"+
		"\u0d96\u0001\u0000\u0000\u0000\u0d96\u0d99\u0001\u0000\u0000\u0000\u0d97"+
		"\u0d98\u0005\u0094\u0000\u0000\u0d98\u0d9a\u0005\u0463\u0000\u0000\u0d99"+
		"\u0d97\u0001\u0000\u0000\u0000\u0d99\u0d9a\u0001\u0000\u0000\u0000\u0d9a"+
		"\u0d9b\u0001\u0000\u0000\u0000\u0d9b\u0d9c\u0005\u0455\u0000\u0000\u0d9c"+
		"\u0d9e\u0001\u0000\u0000\u0000\u0d9d\u0d62\u0001\u0000\u0000\u0000\u0d9d"+
		"\u0d6c\u0001\u0000\u0000\u0000\u0d9d\u0d7b\u0001\u0000\u0000\u0000\u0d9d"+
		"\u0d85\u0001\u0000\u0000\u0000\u0d9e\u011b\u0001\u0000\u0000\u0000\u0d9f"+
		"\u0da0\u0007D\u0000\u0000\u0da0\u0da1\u0005\u0454\u0000\u0000\u0da1\u0da4"+
		"\u0003\u0138\u009c\u0000\u0da2\u0da3\u0005\u0456\u0000\u0000\u0da3\u0da5"+
		"\u0003\u00e2q\u0000\u0da4\u0da2\u0001\u0000\u0000\u0000\u0da4\u0da5\u0001"+
		"\u0000\u0000\u0000\u0da5\u0da8\u0001\u0000\u0000\u0000\u0da6\u0da7\u0005"+
		"\u0456\u0000\u0000\u0da7\u0da9\u0003\u00e2q\u0000\u0da8\u0da6\u0001\u0000"+
		"\u0000\u0000\u0da8\u0da9\u0001\u0000\u0000\u0000\u0da9\u0daa\u0001\u0000"+
		"\u0000\u0000\u0daa\u0dab\u0005\u0455\u0000\u0000\u0dab\u0dac\u0003\u011e"+
		"\u008f\u0000\u0dac\u0dc6\u0001\u0000\u0000\u0000\u0dad\u0dae\u0007E\u0000"+
		"\u0000\u0dae\u0daf\u0005\u0454\u0000\u0000\u0daf\u0db0\u0003\u0138\u009c"+
		"\u0000\u0db0\u0db1\u0005\u0455\u0000\u0000\u0db1\u0db2\u0003\u011e\u008f"+
		"\u0000\u0db2\u0dc6\u0001\u0000\u0000\u0000\u0db3\u0db4\u0007F\u0000\u0000"+
		"\u0db4\u0db5\u0005\u0454\u0000\u0000\u0db5\u0db6\u0005\u0455\u0000\u0000"+
		"\u0db6\u0dc6\u0003\u011e\u008f\u0000\u0db7\u0db8\u0005\u0121\u0000\u0000"+
		"\u0db8\u0db9\u0005\u0454\u0000\u0000\u0db9\u0dba\u0003\u0138\u009c\u0000"+
		"\u0dba\u0dbb\u0005\u0456\u0000\u0000\u0dbb\u0dbc\u0003\u00e2q\u0000\u0dbc"+
		"\u0dbd\u0005\u0455\u0000\u0000\u0dbd\u0dbe\u0003\u011e\u008f\u0000\u0dbe"+
		"\u0dc6\u0001\u0000\u0000\u0000\u0dbf\u0dc0\u0005\u0120\u0000\u0000\u0dc0"+
		"\u0dc1\u0005\u0454\u0000\u0000\u0dc1\u0dc2\u0003\u00e2q\u0000\u0dc2\u0dc3"+
		"\u0005\u0455\u0000\u0000\u0dc3\u0dc4\u0003\u011e\u008f\u0000\u0dc4\u0dc6"+
		"\u0001\u0000\u0000\u0000\u0dc5\u0d9f\u0001\u0000\u0000\u0000\u0dc5\u0dad"+
		"\u0001\u0000\u0000\u0000\u0dc5\u0db3\u0001\u0000\u0000\u0000\u0dc5\u0db7"+
		"\u0001\u0000\u0000\u0000\u0dc5\u0dbf\u0001\u0000\u0000\u0000\u0dc6\u011d"+
		"\u0001\u0000\u0000\u0000\u0dc7\u0dce\u0005x\u0000\u0000\u0dc8\u0dca\u0005"+
		"\u0454\u0000\u0000\u0dc9\u0dcb\u0003\u0120\u0090\u0000\u0dca\u0dc9\u0001"+
		"\u0000\u0000\u0000\u0dca\u0dcb\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0001"+
		"\u0000\u0000\u0000\u0dcc\u0dcf\u0005\u0455\u0000\u0000\u0dcd\u0dcf\u0003"+
		"\u0122\u0091\u0000\u0dce\u0dc8\u0001\u0000\u0000\u0000\u0dce\u0dcd\u0001"+
		"\u0000\u0000\u0000\u0dcf\u011f\u0001\u0000\u0000\u0000\u0dd0\u0dd2\u0003"+
		"\u0122\u0091\u0000\u0dd1\u0dd0\u0001\u0000\u0000\u0000\u0dd1\u0dd2\u0001"+
		"\u0000\u0000\u0000\u0dd2\u0dd4\u0001\u0000\u0000\u0000\u0dd3\u0dd5\u0003"+
		"\u012e\u0097\u0000\u0dd4\u0dd3\u0001\u0000\u0000\u0000\u0dd4\u0dd5\u0001"+
		"\u0000\u0000\u0000\u0dd5\u0dd7\u0001\u0000\u0000\u0000\u0dd6\u0dd8\u0003"+
		"p8\u0000\u0dd7\u0dd6\u0001\u0000\u0000\u0000\u0dd7\u0dd8\u0001\u0000\u0000"+
		"\u0000\u0dd8\u0dda\u0001\u0000\u0000\u0000\u0dd9\u0ddb\u0003\u0124\u0092"+
		"\u0000\u0dda\u0dd9\u0001\u0000\u0000\u0000\u0dda\u0ddb\u0001\u0000\u0000"+
		"\u0000\u0ddb\u0121\u0001\u0000\u0000\u0000\u0ddc\u0ddd\u0003\u00dcn\u0000"+
		"\u0ddd\u0123\u0001\u0000\u0000\u0000\u0dde\u0ddf\u0003\u0126\u0093\u0000"+
		"\u0ddf\u0de0\u0003\u0128\u0094\u0000\u0de0\u0125\u0001\u0000\u0000\u0000"+
		"\u0de1\u0de2\u0007G\u0000\u0000\u0de2\u0127\u0001\u0000\u0000\u0000\u0de3"+
		"\u0de6\u0003\u012c\u0096\u0000\u0de4\u0de6\u0003\u012a\u0095\u0000\u0de5"+
		"\u0de3\u0001\u0000\u0000\u0000\u0de5\u0de4\u0001\u0000\u0000\u0000\u0de6"+
		"\u0129\u0001\u0000\u0000\u0000\u0de7\u0de8\u0005\u000f\u0000\u0000\u0de8"+
		"\u0de9\u0003\u012c\u0096\u0000\u0de9\u0dea\u0005\n\u0000\u0000\u0dea\u0deb"+
		"\u0003\u012c\u0096\u0000\u0deb\u012b\u0001\u0000\u0000\u0000\u0dec\u0ded"+
		"\u0005\"\u0000\u0000\u0ded\u0df4\u0005\u023d\u0000\u0000\u0dee\u0def\u0005"+
		"\u0275\u0000\u0000\u0def\u0df4\u0007H\u0000\u0000\u0df0\u0df1\u0003\u0138"+
		"\u009c\u0000\u0df1\u0df2\u0007H\u0000\u0000\u0df2\u0df4\u0001\u0000\u0000"+
		"\u0000\u0df3\u0dec\u0001\u0000\u0000\u0000\u0df3\u0dee\u0001\u0000\u0000"+
		"\u0000\u0df3\u0df0\u0001\u0000\u0000\u0000\u0df4\u012d\u0001\u0000\u0000"+
		"\u0000\u0df5\u0df6\u0005{\u0000\u0000\u0df6\u0df7\u0005\u0012\u0000\u0000"+
		"\u0df7\u0dfc\u0003\u0138\u009c\u0000\u0df8\u0df9\u0005\u0456\u0000\u0000"+
		"\u0df9\u0dfb\u0003\u0138\u009c\u0000\u0dfa\u0df8\u0001\u0000\u0000\u0000"+
		"\u0dfb\u0dfe\u0001\u0000\u0000\u0000\u0dfc\u0dfa\u0001\u0000\u0000\u0000"+
		"\u0dfc\u0dfd\u0001\u0000\u0000\u0000\u0dfd\u012f\u0001\u0000\u0000\u0000"+
		"\u0dfe\u0dfc\u0001\u0000\u0000\u0000\u0dff\u0e17\u0003\u0156\u00ab\u0000"+
		"\u0e00\u0e17\u0005\u02c8\u0000\u0000\u0e01\u0e17\u0005\u0131\u0000\u0000"+
		"\u0e02\u0e17\u0005\u012d\u0000\u0000\u0e03\u0e17\u0005\u012e\u0000\u0000"+
		"\u0e04\u0e17\u0005\u012f\u0000\u0000\u0e05\u0e17\u0005\u0132\u0000\u0000"+
		"\u0e06\u0e17\u0005\u0133\u0000\u0000\u0e07\u0e17\u0005\u0134\u0000\u0000"+
		"\u0e08\u0e17\u0005J\u0000\u0000\u0e09\u0e17\u0005R\u0000\u0000\u0e0a\u0e17"+
		"\u0005\u0130\u0000\u0000\u0e0b\u0e17\u0005\u0136\u0000\u0000\u0e0c\u0e17"+
		"\u0005\u01ea\u0000\u0000\u0e0d\u0e17\u0005\u0137\u0000\u0000\u0e0e\u0e17"+
		"\u0005\u0087\u0000\u0000\u0e0f\u0e17\u0005\u0139\u0000\u0000\u0e10\u0e17"+
		"\u0005\u013a\u0000\u0000\u0e11\u0e17\u0005\u013b\u0000\u0000\u0e12\u0e17"+
		"\u0005\u013c\u0000\u0000\u0e13\u0e17\u0005\u013d\u0000\u0000\u0e14\u0e17"+
		"\u0005\u013e\u0000\u0000\u0e15\u0e17\u0005\u013f\u0000\u0000\u0e16\u0dff"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e00\u0001\u0000\u0000\u0000\u0e16\u0e01"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e02\u0001\u0000\u0000\u0000\u0e16\u0e03"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e04\u0001\u0000\u0000\u0000\u0e16\u0e05"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e06\u0001\u0000\u0000\u0000\u0e16\u0e07"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e08\u0001\u0000\u0000\u0000\u0e16\u0e09"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e0a\u0001\u0000\u0000\u0000\u0e16\u0e0b"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e0c\u0001\u0000\u0000\u0000\u0e16\u0e0d"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e0e\u0001\u0000\u0000\u0000\u0e16\u0e0f"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e10\u0001\u0000\u0000\u0000\u0e16\u0e11"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e12\u0001\u0000\u0000\u0000\u0e16\u0e13"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e14\u0001\u0000\u0000\u0000\u0e16\u0e15"+
		"\u0001\u0000\u0000\u0000\u0e17\u0131\u0001\u0000\u0000\u0000\u0e18\u0e19"+
		"\u0007I\u0000\u0000\u0e19\u0e1a\u0005\u0454\u0000\u0000\u0e1a\u0e1b\u0003"+
		"\u0136\u009b\u0000\u0e1b\u0e1c\u0005\u0455\u0000\u0000\u0e1c\u0133\u0001"+
		"\u0000\u0000\u0000\u0e1d\u0e22\u0003\u00eew\u0000\u0e1e\u0e22\u0003\u00d0"+
		"h\u0000\u0e1f\u0e22\u0003\u0110\u0088\u0000\u0e20\u0e22\u0003\u0138\u009c"+
		"\u0000\u0e21\u0e1d\u0001\u0000\u0000\u0000\u0e21\u0e1e\u0001\u0000\u0000"+
		"\u0000\u0e21\u0e1f\u0001\u0000\u0000\u0000\u0e21\u0e20\u0001\u0000\u0000"+
		"\u0000\u0e22\u0e2c\u0001\u0000\u0000\u0000\u0e23\u0e28\u0005\u0456\u0000"+
		"\u0000\u0e24\u0e29\u0003\u00eew\u0000\u0e25\u0e29\u0003\u00d0h\u0000\u0e26"+
		"\u0e29\u0003\u0110\u0088\u0000\u0e27\u0e29\u0003\u0138\u009c\u0000\u0e28"+
		"\u0e24\u0001\u0000\u0000\u0000\u0e28\u0e25\u0001\u0000\u0000\u0000\u0e28"+
		"\u0e26\u0001\u0000\u0000\u0000\u0e28\u0e27\u0001\u0000\u0000\u0000\u0e29"+
		"\u0e2b\u0001\u0000\u0000\u0000\u0e2a\u0e23\u0001\u0000\u0000\u0000\u0e2b"+
		"\u0e2e\u0001\u0000\u0000\u0000\u0e2c\u0e2a\u0001\u0000\u0000\u0000\u0e2c"+
		"\u0e2d\u0001\u0000\u0000\u0000\u0e2d\u0135\u0001\u0000\u0000\u0000\u0e2e"+
		"\u0e2c\u0001\u0000\u0000\u0000\u0e2f\u0e34\u0003\u00eew\u0000\u0e30\u0e34"+
		"\u0003\u00d0h\u0000\u0e31\u0e34\u0003\u0110\u0088\u0000\u0e32\u0e34\u0003"+
		"\u0138\u009c\u0000\u0e33\u0e2f\u0001\u0000\u0000\u0000\u0e33\u0e30\u0001"+
		"\u0000\u0000\u0000\u0e33\u0e31\u0001\u0000\u0000\u0000\u0e33\u0e32\u0001"+
		"\u0000\u0000\u0000\u0e34\u0137\u0001\u0000\u0000\u0000\u0e35\u0e36\u0006"+
		"\u009c\uffff\uffff\u0000\u0e36\u0e37\u0007J\u0000\u0000\u0e37\u0e41\u0003"+
		"\u0138\u009c\u0004\u0e38\u0e39\u0003\u013a\u009d\u0000\u0e39\u0e3b\u0005"+
		"U\u0000\u0000\u0e3a\u0e3c\u0005l\u0000\u0000\u0e3b\u0e3a\u0001\u0000\u0000"+
		"\u0000\u0e3b\u0e3c\u0001\u0000\u0000\u0000\u0e3c\u0e3d\u0001\u0000\u0000"+
		"\u0000\u0e3d\u0e3e\u0007K\u0000\u0000\u0e3e\u0e41\u0001\u0000\u0000\u0000"+
		"\u0e3f\u0e41\u0003\u013a\u009d\u0000\u0e40\u0e35\u0001\u0000\u0000\u0000"+
		"\u0e40\u0e38\u0001\u0000\u0000\u0000\u0e40\u0e3f\u0001\u0000\u0000\u0000"+
		"\u0e41\u0e48\u0001\u0000\u0000\u0000\u0e42\u0e43\n\u0003\u0000\u0000\u0e43"+
		"\u0e44\u0003\u0142\u00a1\u0000\u0e44\u0e45\u0003\u0138\u009c\u0004\u0e45"+
		"\u0e47\u0001\u0000\u0000\u0000\u0e46\u0e42\u0001\u0000\u0000\u0000\u0e47"+
		"\u0e4a\u0001\u0000\u0000\u0000\u0e48\u0e46\u0001\u0000\u0000\u0000\u0e48"+
		"\u0e49\u0001\u0000\u0000\u0000\u0e49\u0139\u0001\u0000\u0000\u0000\u0e4a"+
		"\u0e48\u0001\u0000\u0000\u0000\u0e4b\u0e4e\u0006\u009d\uffff\uffff\u0000"+
		"\u0e4c\u0e4d\u0005\u0470\u0000\u0000\u0e4d\u0e4f\u0005\u043b\u0000\u0000"+
		"\u0e4e\u0e4c\u0001\u0000\u0000\u0000\u0e4e\u0e4f\u0001\u0000\u0000\u0000"+
		"\u0e4f\u0e50\u0001\u0000\u0000\u0000\u0e50\u0e51\u0003\u013c\u009e\u0000"+
		"\u0e51\u0e92\u0001\u0000\u0000\u0000\u0e52\u0e53\n\b\u0000\u0000\u0e53"+
		"\u0e54\u0003\u0140\u00a0\u0000\u0e54\u0e55\u0003\u013a\u009d\t\u0e55\u0e91"+
		"\u0001\u0000\u0000\u0000\u0e56\u0e58\n\u0006\u0000\u0000\u0e57\u0e59\u0005"+
		"l\u0000\u0000\u0e58\u0e57\u0001\u0000\u0000\u0000\u0e58\u0e59\u0001\u0000"+
		"\u0000\u0000\u0e59\u0e5a\u0001\u0000\u0000\u0000\u0e5a\u0e5b\u0005\u000f"+
		"\u0000\u0000\u0e5b\u0e5c\u0003\u013a\u009d\u0000\u0e5c\u0e5d\u0005\n\u0000"+
		"\u0000\u0e5d\u0e5e\u0003\u013a\u009d\u0007\u0e5e\u0e91\u0001\u0000\u0000"+
		"\u0000\u0e5f\u0e60\n\u0005\u0000\u0000\u0e60\u0e61\u0005\u0250\u0000\u0000"+
		"\u0e61\u0e62\u0005^\u0000\u0000\u0e62\u0e91\u0003\u013a\u009d\u0006\u0e63"+
		"\u0e65\n\u0003\u0000\u0000\u0e64\u0e66\u0005l\u0000\u0000\u0e65\u0e64"+
		"\u0001\u0000\u0000\u0000\u0e65\u0e66\u0001\u0000\u0000\u0000\u0e66\u0e67"+
		"\u0001\u0000\u0000\u0000\u0e67\u0e68\u0007L\u0000\u0000\u0e68\u0e91\u0003"+
		"\u013a\u009d\u0004\u0e69\u0e6b\n\n\u0000\u0000\u0e6a\u0e6c\u0005l\u0000"+
		"\u0000\u0e6b\u0e6a\u0001\u0000\u0000\u0000\u0e6b\u0e6c\u0001\u0000\u0000"+
		"\u0000\u0e6c\u0e6d\u0001\u0000\u0000\u0000\u0e6d\u0e6e\u0005M\u0000\u0000"+
		"\u0e6e\u0e71\u0005\u0454\u0000\u0000\u0e6f\u0e72\u0003\\.\u0000\u0e70"+
		"\u0e72\u0003\u0102\u0081\u0000\u0e71\u0e6f\u0001\u0000\u0000\u0000\u0e71"+
		"\u0e70\u0001\u0000\u0000\u0000\u0e72\u0e73\u0001\u0000\u0000\u0000\u0e73"+
		"\u0e74\u0005\u0455\u0000\u0000\u0e74\u0e91\u0001\u0000\u0000\u0000\u0e75"+
		"\u0e76\n\t\u0000\u0000\u0e76\u0e77\u0005U\u0000\u0000\u0e77\u0e91\u0003"+
		"\u00ecv\u0000\u0e78\u0e79\n\u0007\u0000\u0000\u0e79\u0e7a\u0003\u0140"+
		"\u00a0\u0000\u0e7a\u0e7b\u0007M\u0000\u0000\u0e7b\u0e7c\u0005\u0454\u0000"+
		"\u0000\u0e7c\u0e7d\u0003\\.\u0000\u0e7d\u0e7e\u0005\u0455\u0000\u0000"+
		"\u0e7e\u0e91\u0001\u0000\u0000\u0000\u0e7f\u0e81\n\u0004\u0000\u0000\u0e80"+
		"\u0e82\u0005l\u0000\u0000\u0e81\u0e80\u0001\u0000\u0000\u0000\u0e81\u0e82"+
		"\u0001\u0000\u0000\u0000\u0e82\u0e83\u0001\u0000\u0000\u0000\u0e83\u0e84"+
		"\u0005^\u0000\u0000\u0e84\u0e87\u0003\u013a\u009d\u0000\u0e85\u0e86\u0005"+
		"\u018e\u0000\u0000\u0e86\u0e88\u0005\u0463\u0000\u0000\u0e87\u0e85\u0001"+
		"\u0000\u0000\u0000\u0e87\u0e88\u0001\u0000\u0000\u0000\u0e88\u0e91\u0001"+
		"\u0000\u0000\u0000\u0e89\u0e8a\n\u0001\u0000\u0000\u0e8a\u0e8b\u0005\u01e7"+
		"\u0000\u0000\u0e8b\u0e8c\u0005\u01ff\u0000\u0000\u0e8c\u0e8d\u0005\u0454"+
		"\u0000\u0000\u0e8d\u0e8e\u0003\u013a\u009d\u0000\u0e8e\u0e8f\u0005\u0455"+
		"\u0000\u0000\u0e8f\u0e91\u0001\u0000\u0000\u0000\u0e90\u0e52\u0001\u0000"+
		"\u0000\u0000\u0e90\u0e56\u0001\u0000\u0000\u0000\u0e90\u0e5f\u0001\u0000"+
		"\u0000\u0000\u0e90\u0e63\u0001\u0000\u0000\u0000\u0e90\u0e69\u0001\u0000"+
		"\u0000\u0000\u0e90\u0e75\u0001\u0000\u0000\u0000\u0e90\u0e78\u0001\u0000"+
		"\u0000\u0000\u0e90\u0e7f\u0001\u0000\u0000\u0000\u0e90\u0e89\u0001\u0000"+
		"\u0000\u0000\u0e91\u0e94\u0001\u0000\u0000\u0000\u0e92\u0e90\u0001\u0000"+
		"\u0000\u0000\u0e92\u0e93\u0001\u0000\u0000\u0000\u0e93\u013b\u0001\u0000"+
		"\u0000\u0000\u0e94\u0e92\u0001\u0000\u0000\u0000\u0e95\u0e96\u0006\u009e"+
		"\uffff\uffff\u0000\u0e96\u0ec3\u0003\u00eew\u0000\u0e97\u0ec3\u0003\u00d0"+
		"h\u0000\u0e98\u0ec3\u0003\u0110\u0088\u0000\u0e99\u0ec3\u0003\u00d4j\u0000"+
		"\u0e9a\u0e9b\u0003\u013e\u009f\u0000\u0e9b\u0e9c\u0003\u013c\u009e\n\u0e9c"+
		"\u0ec3\u0001\u0000\u0000\u0000\u0e9d\u0e9e\u0005\u00d9\u0000\u0000\u0e9e"+
		"\u0ec3\u0003\u013c\u009e\t\u0e9f\u0ea0\u0005\u0454\u0000\u0000\u0ea0\u0ea5"+
		"\u0003\u0138\u009c\u0000\u0ea1\u0ea2\u0005\u0456\u0000\u0000\u0ea2\u0ea4"+
		"\u0003\u0138\u009c\u0000\u0ea3\u0ea1\u0001\u0000\u0000\u0000\u0ea4\u0ea7"+
		"\u0001\u0000\u0000\u0000\u0ea5\u0ea3\u0001\u0000\u0000\u0000\u0ea5\u0ea6"+
		"\u0001\u0000\u0000\u0000\u0ea6\u0ea8\u0001\u0000\u0000\u0000\u0ea7\u0ea5"+
		"\u0001\u0000\u0000\u0000\u0ea8\u0ea9\u0005\u0455\u0000\u0000\u0ea9\u0ec3"+
		"\u0001\u0000\u0000\u0000\u0eaa\u0eab\u0005\u023d\u0000\u0000\u0eab\u0eac"+
		"\u0005\u0454\u0000\u0000\u0eac\u0eaf\u0003\u0138\u009c\u0000\u0ead\u0eae"+
		"\u0005\u0456\u0000\u0000\u0eae\u0eb0\u0003\u0138\u009c\u0000\u0eaf\u0ead"+
		"\u0001\u0000\u0000\u0000\u0eb0\u0eb1\u0001\u0000\u0000\u0000\u0eb1\u0eaf"+
		"\u0001\u0000\u0000\u0000\u0eb1\u0eb2\u0001\u0000\u0000\u0000\u0eb2\u0eb3"+
		"\u0001\u0000\u0000\u0000\u0eb3\u0eb4\u0005\u0455\u0000\u0000\u0eb4\u0ec3"+
		"\u0001\u0000\u0000\u0000\u0eb5\u0eb6\u00059\u0000\u0000\u0eb6\u0eb7\u0005"+
		"\u0454\u0000\u0000\u0eb7\u0eb8\u0003\\.\u0000\u0eb8\u0eb9\u0005\u0455"+
		"\u0000\u0000\u0eb9\u0ec3\u0001\u0000\u0000\u0000\u0eba\u0ebb\u0005\u0454"+
		"\u0000\u0000\u0ebb\u0ebc\u0003\\.\u0000\u0ebc\u0ebd\u0005\u0455\u0000"+
		"\u0000\u0ebd\u0ec3\u0001\u0000\u0000\u0000\u0ebe\u0ebf\u0005S\u0000\u0000"+
		"\u0ebf\u0ec0\u0003\u0138\u009c\u0000\u0ec0\u0ec1\u0003\u001a\r\u0000\u0ec1"+
		"\u0ec3\u0001\u0000\u0000\u0000\u0ec2\u0e95\u0001\u0000\u0000\u0000\u0ec2"+
		"\u0e97\u0001\u0000\u0000\u0000\u0ec2\u0e98\u0001\u0000\u0000\u0000\u0ec2"+
		"\u0e99\u0001\u0000\u0000\u0000\u0ec2\u0e9a\u0001\u0000\u0000\u0000\u0ec2"+
		"\u0e9d\u0001\u0000\u0000\u0000\u0ec2\u0e9f\u0001\u0000\u0000\u0000\u0ec2"+
		"\u0eaa\u0001\u0000\u0000\u0000\u0ec2\u0eb5\u0001\u0000\u0000\u0000\u0ec2"+
		"\u0eba\u0001\u0000\u0000\u0000\u0ec2\u0ebe\u0001\u0000\u0000\u0000\u0ec3"+
		"\u0ed5\u0001\u0000\u0000\u0000\u0ec4\u0ec5\n\u0003\u0000\u0000\u0ec5\u0ec6"+
		"\u0003\u0144\u00a2\u0000\u0ec6\u0ec7\u0003\u013c\u009e\u0004\u0ec7\u0ed4"+
		"\u0001\u0000\u0000\u0000\u0ec8\u0ec9\n\u0002\u0000\u0000\u0ec9\u0eca\u0003"+
		"\u0146\u00a3\u0000\u0eca\u0ecb\u0003\u013c\u009e\u0003\u0ecb\u0ed4\u0001"+
		"\u0000\u0000\u0000\u0ecc\u0ecd\n\u0001\u0000\u0000\u0ecd\u0ece\u0003\u0148"+
		"\u00a4\u0000\u0ece\u0ecf\u0003\u013c\u009e\u0002\u0ecf\u0ed4\u0001\u0000"+
		"\u0000\u0000\u0ed0\u0ed1\n\f\u0000\u0000\u0ed1\u0ed2\u0005\u001a\u0000"+
		"\u0000\u0ed2\u0ed4\u0003\u00d8l\u0000\u0ed3\u0ec4\u0001\u0000\u0000\u0000"+
		"\u0ed3\u0ec8\u0001\u0000\u0000\u0000\u0ed3\u0ecc\u0001\u0000\u0000\u0000"+
		"\u0ed3\u0ed0\u0001\u0000\u0000\u0000\u0ed4\u0ed7\u0001\u0000\u0000\u0000"+
		"\u0ed5\u0ed3\u0001\u0000\u0000\u0000\u0ed5\u0ed6\u0001\u0000\u0000\u0000"+
		"\u0ed6\u013d\u0001\u0000\u0000\u0000\u0ed7\u0ed5\u0001\u0000\u0000\u0000"+
		"\u0ed8\u0ed9\u0007N\u0000\u0000\u0ed9\u013f\u0001\u0000\u0000\u0000\u0eda"+
		"\u0ee9\u0005\u044b\u0000\u0000\u0edb\u0ee9\u0005\u044c\u0000\u0000\u0edc"+
		"\u0ee9\u0005\u044d\u0000\u0000\u0edd\u0ede\u0005\u044d\u0000\u0000\u0ede"+
		"\u0ee9\u0005\u044b\u0000\u0000\u0edf\u0ee0\u0005\u044c\u0000\u0000\u0ee0"+
		"\u0ee9\u0005\u044b\u0000\u0000\u0ee1\u0ee2\u0005\u044d\u0000\u0000\u0ee2"+
		"\u0ee9\u0005\u044c\u0000\u0000\u0ee3\u0ee4\u0005\u044e\u0000\u0000\u0ee4"+
		"\u0ee9\u0005\u044b\u0000\u0000\u0ee5\u0ee6\u0005\u044d\u0000\u0000\u0ee6"+
		"\u0ee7\u0005\u044b\u0000\u0000\u0ee7\u0ee9\u0005\u044c\u0000\u0000\u0ee8"+
		"\u0eda\u0001\u0000\u0000\u0000\u0ee8\u0edb\u0001\u0000\u0000\u0000\u0ee8"+
		"\u0edc\u0001\u0000\u0000\u0000\u0ee8\u0edd\u0001\u0000\u0000\u0000\u0ee8"+
		"\u0edf\u0001\u0000\u0000\u0000\u0ee8\u0ee1\u0001\u0000\u0000\u0000\u0ee8"+
		"\u0ee3\u0001\u0000\u0000\u0000\u0ee8\u0ee5\u0001\u0000\u0000\u0000\u0ee9"+
		"\u0141\u0001\u0000\u0000\u0000\u0eea\u0ef2\u0005\n\u0000\u0000\u0eeb\u0eec"+
		"\u0005\u0451\u0000\u0000\u0eec\u0ef2\u0005\u0451\u0000\u0000\u0eed\u0ef2"+
		"\u0005\u00b9\u0000\u0000\u0eee\u0ef2\u0005u\u0000\u0000\u0eef\u0ef0\u0005"+
		"\u0450\u0000\u0000\u0ef0\u0ef2\u0005\u0450\u0000\u0000\u0ef1\u0eea\u0001"+
		"\u0000\u0000\u0000\u0ef1\u0eeb\u0001\u0000\u0000\u0000\u0ef1\u0eed\u0001"+
		"\u0000\u0000\u0000\u0ef1\u0eee\u0001\u0000\u0000\u0000\u0ef1\u0eef\u0001"+
		"\u0000\u0000\u0000\u0ef2\u0143\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0005"+
		"\u044d\u0000\u0000\u0ef4\u0efb\u0005\u044d\u0000\u0000\u0ef5\u0ef6\u0005"+
		"\u044c\u0000\u0000\u0ef6\u0efb\u0005\u044c\u0000\u0000\u0ef7\u0efb\u0005"+
		"\u0451\u0000\u0000\u0ef8\u0efb\u0005\u0452\u0000\u0000\u0ef9\u0efb\u0005"+
		"\u0450\u0000\u0000\u0efa\u0ef3\u0001\u0000\u0000\u0000\u0efa\u0ef5\u0001"+
		"\u0000\u0000\u0000\u0efa\u0ef7\u0001\u0000\u0000\u0000\u0efa\u0ef8\u0001"+
		"\u0000\u0000\u0000\u0efa\u0ef9\u0001\u0000\u0000\u0000\u0efb\u0145\u0001"+
		"\u0000\u0000\u0000\u0efc\u0efd\u0007O\u0000\u0000\u0efd\u0147\u0001\u0000"+
		"\u0000\u0000\u0efe\u0eff\u0005\u0448\u0000\u0000\u0eff\u0f04\u0005\u044c"+
		"\u0000\u0000\u0f00\u0f01\u0005\u0448\u0000\u0000\u0f01\u0f02\u0005\u044c"+
		"\u0000\u0000\u0f02\u0f04\u0005\u044c\u0000\u0000\u0f03\u0efe\u0001\u0000"+
		"\u0000\u0000\u0f03\u0f00\u0001\u0000\u0000\u0000\u0f04\u0149\u0001\u0000"+
		"\u0000\u0000\u0f05\u0f06\u0007P\u0000\u0000\u0f06\u014b\u0001\u0000\u0000"+
		"\u0000\u0f07\u0f08\u0007Q\u0000\u0000\u0f08\u014d\u0001\u0000\u0000\u0000"+
		"\u0f09\u0f0a\u0007R\u0000\u0000\u0f0a\u014f\u0001\u0000\u0000\u0000\u0f0b"+
		"\u0f0c\u0007S\u0000\u0000\u0f0c\u0151\u0001\u0000\u0000\u0000\u0f0d\u0f0e"+
		"\u0007T\u0000\u0000\u0f0e\u0153\u0001\u0000\u0000\u0000\u0f0f\u0f10\u0007"+
		"U\u0000\u0000\u0f10\u0155\u0001\u0000\u0000\u0000\u0f11\u0f12\u0007V\u0000"+
		"\u0000\u0f12\u0157\u0001\u0000\u0000\u0000\u0252\u0159\u015d\u0164\u0167"+
		"\u016a\u016c\u0172\u0175\u0178\u017c\u0187\u018e\u019a\u019f\u01a2\u01a5"+
		"\u01ab\u01af\u01b7\u01bc\u01c1\u01c6\u01c9\u01cb\u01d1\u01d4\u01d8\u01de"+
		"\u01e3\u01e6\u01e9\u01f2\u01f7\u01ff\u020a\u0219\u0220\u022c\u0231\u023a"+
		"\u023c\u0244\u024e\u0254\u0260\u0263\u0268\u0275\u027c\u0283\u0285\u028c"+
		"\u0290\u0292\u0297\u029a\u02a0\u02a5\u02a7\u02ab\u02ae\u02b1\u02b7\u02bc"+
		"\u02be\u02c3\u02ca\u02cc\u02d3\u02d8\u02dc\u02df\u02e7\u02ef\u02f1\u02f9"+
		"\u02fd\u0300\u0306\u030b\u030e\u0314\u0317\u031b\u031e\u0322\u0327\u032b"+
		"\u032f\u0333\u0337\u033b\u033f\u0344\u0349\u034e\u0354\u0359\u035e\u0364"+
		"\u0369\u036e\u0373\u0378\u037d\u0382\u0387\u038c\u0391\u0396\u039c\u03a4"+
		"\u03aa\u03b6\u03bd\u03bf\u03c7\u03cc\u03cf\u03d7\u03dd\u03ed\u03f9\u03fb"+
		"\u03fe\u0406\u040c\u0412\u041f\u0426\u042f\u0434\u043f\u0448\u044d\u0459"+
		"\u0460\u0469\u046e\u047a\u0481\u048a\u048f\u0496\u049f\u04a4\u04a6\u04ab"+
		"\u04b3\u04bc\u04c0\u04c3\u04c7\u04cc\u04d2\u04d8\u04dd\u04e2\u04e7\u04ec"+
		"\u04ef\u04f3\u04f6\u04ff\u0502\u0505\u0509\u050e\u0513\u0516\u051d\u0521"+
		"\u0524\u052f\u0537\u053a\u053d\u0543\u0549\u054b\u0550\u0553\u0559\u055f"+
		"\u0561\u0565\u0568\u056b\u0571\u0577\u057a\u0580\u0586\u0588\u058d\u0590"+
		"\u0598\u059a\u05a3\u05a8\u05b0\u05b4\u05b7\u05bf\u05c9\u05ce\u05d1\u05d8"+
		"\u05dc\u05df\u05e3\u05e8\u05fc\u0603\u060c\u0610\u061c\u061f\u0628\u0634"+
		"\u063c\u0644\u064b\u0652\u0659\u0668\u0675\u067b\u0681\u0687\u068d\u0693"+
		"\u0699\u069e\u06a5\u06aa\u06ad\u06af\u06b4\u06b8\u06bc\u06c5\u06ce\u06d4"+
		"\u06d8\u06db\u06de\u06e4\u06e7\u06ed\u06f6\u06f9\u0704\u0707\u070b\u070e"+
		"\u0716\u071c\u0725\u0728\u072c\u0730\u0736\u073a\u073e\u0740\u0743\u0746"+
		"\u0749\u074f\u0753\u0756\u0759\u075c\u075f\u0761\u0765\u076b\u0771\u0776"+
		"\u0779\u077f\u0783\u078b\u078f\u0792\u0795\u079e\u07a2\u07a5\u07a9\u07ad"+
		"\u07b0\u07b3\u07b8\u07be\u07c2\u07cc\u07d2\u07d6\u07dc\u07e0\u07e4\u07e7"+
		"\u07eb\u07ee\u07f6\u07fb\u07fe\u0801\u0805\u0808\u0811\u0816\u081f\u0824"+
		"\u082b\u0832\u083a\u083f\u0847\u084a\u084d\u0854\u0857\u085e\u0861\u0869"+
		"\u086f\u087a\u087d\u0888\u088e\u0892\u089d\u08a2\u08a4\u08a8\u08b2\u08bc"+
		"\u08c2\u08c7\u08ca\u08cd\u08d0\u08d3\u08d6\u08d9\u08df\u08e4\u08e7\u08ea"+
		"\u08ed\u08f0\u08f3\u08f6\u08f8\u08fe\u0903\u0906\u0909\u090c\u090f\u0912"+
		"\u0916\u091c\u0920\u092a\u092e\u0934\u093d\u0940\u0944\u0947\u094b\u094f"+
		"\u0952\u0954\u095c\u0968\u096e\u0970\u0976\u0978\u097a\u0980\u0988\u0990"+
		"\u0994\u0998\u09a1\u09a6\u09ba\u09bf\u09c5\u09cc\u09d1\u09d5\u09da\u09e2"+
		"\u09ea\u09f2\u09fa\u0a00\u0a03\u0a07\u0a0c\u0a11\u0a17\u0a19\u0a24\u0a29"+
		"\u0a30\u0a32\u0a40\u0a46\u0a4b\u0a50\u0a56\u0a5d\u0a65\u0a6d\u0a72\u0a78"+
		"\u0a7b\u0a83\u0a8a\u0a93\u0a96\u0aa7\u0aaf\u0ab7\u0abb\u0ac2\u0ac8\u0ad0"+
		"\u0ad6\u0add\u0adf\u0ae4\u0ae6\u0aea\u0af0\u0af3\u0af6\u0afe\u0b02\u0b09"+
		"\u0b14\u0b19\u0b1f\u0b22\u0b26\u0b2b\u0b2e\u0b32\u0b36\u0b38\u0b3d\u0b42"+
		"\u0b4f\u0b52\u0b56\u0b59\u0b5c\u0b61\u0b66\u0b6b\u0b6e\u0b73\u0b76\u0b7c"+
		"\u0b7f\u0b83\u0b88\u0b8d\u0b92\u0b97\u0b9a\u0b9f\u0ba4\u0ba9\u0baf\u0bb4"+
		"\u0bb9\u0bbe\u0bc1\u0bc6\u0bca\u0bce\u0bd6\u0bdd\u0be1\u0be6\u0beb\u0bef"+
		"\u0bf1\u0bf4\u0c04\u0c0d\u0c15\u0c1e\u0c28\u0c30\u0c3c\u0c43\u0c56\u0c5b"+
		"\u0c5e\u0c63\u0c66\u0c6a\u0c79\u0c80\u0c85\u0c8a\u0cab\u0caf\u0cb7\u0cbb"+
		"\u0cc4\u0ccc\u0cd1\u0cd9\u0cde\u0ce3\u0ce5\u0cee\u0cf3\u0cfb\u0d00\u0d08"+
		"\u0d10\u0d13\u0d1d\u0d2f\u0d35\u0d39\u0d3f\u0d43\u0d47\u0d54\u0d5c\u0d60"+
		"\u0d65\u0d6a\u0d70\u0d75\u0d79\u0d7e\u0d83\u0d88\u0d92\u0d95\u0d99\u0d9d"+
		"\u0da4\u0da8\u0dc5\u0dca\u0dce\u0dd1\u0dd4\u0dd7\u0dda\u0de5\u0df3\u0dfc"+
		"\u0e16\u0e21\u0e28\u0e2c\u0e33\u0e3b\u0e40\u0e48\u0e4e\u0e58\u0e65\u0e6b"+
		"\u0e71\u0e81\u0e87\u0e90\u0e92\u0ea5\u0eb1\u0ec2\u0ed3\u0ed5\u0ee8\u0ef1"+
		"\u0efa\u0f03";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}